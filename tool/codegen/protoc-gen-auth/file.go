package main

const fileTpl = `// Copyright 2022 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-auth. DO NOT EDIT.
// source: {{ .InputPath }}

package webservice

import (
	"github.com/pipe-cd/pipecd/pkg/model"
	"github.com/pipe-cd/pipecd/pkg/rpc/rpcauth"
)

type authorizer struct{}

// NewRBACAuthorizer returns an RBACAuthorizer object for checking requested method based on RBAC.
func NewRBACAuthorizer() rpcauth.RBACAuthorizer {
	return &authorizer{}
}

func isAdmin(r model.Role) bool {
	return r.ProjectRole == model.Role_ADMIN
}

func isEditor(r model.Role) bool {
	return r.ProjectRole == model.Role_EDITOR
}

func isViewer(r model.Role) bool {
	return r.ProjectRole == model.Role_VIEWER
}

// Authorize checks whether a role is enough for given gRPC method or not.
func (a *authorizer) Authorize(method string, r model.Role) bool {
	switch method {
	{{- range .Methods }}
	case "/grpc.service.webservice.WebService/{{ .Name }}":
		{{- if eq .Role "VIEWER" }}
			return isAdmin(r) || isEditor(r) || isViewer(r)
		{{- else if eq .Role "EDITOR" }}
			return isAdmin(r) || isEditor(r)
		{{- else }}
			return isAdmin(r)
		{{- end }}
	{{- end }}
	}
	return false
}
`
