// source: pkg/model/insight.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));



goog.exportSymbol('proto.model.InsightApplicationCount', null, global);
goog.exportSymbol('proto.model.InsightApplicationCountLabelKey', null, global);
goog.exportSymbol('proto.model.InsightChunkDateRange', null, global);
goog.exportSymbol('proto.model.InsightDailyDeployment', null, global);
goog.exportSymbol('proto.model.InsightDataPoint', null, global);
goog.exportSymbol('proto.model.InsightDeploymentChunk', null, global);
goog.exportSymbol('proto.model.InsightDeploymentChunkMetaData', null, global);
goog.exportSymbol('proto.model.InsightDeploymentChunkMetaData.ChunkData', null, global);
goog.exportSymbol('proto.model.InsightDeploymentSubset', null, global);
goog.exportSymbol('proto.model.InsightMetricsKind', null, global);
goog.exportSymbol('proto.model.InsightResultType', null, global);
goog.exportSymbol('proto.model.InsightSample', null, global);
goog.exportSymbol('proto.model.InsightSampleStream', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightSample = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.InsightSample, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightSample.displayName = 'proto.model.InsightSample';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightSampleStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.InsightSampleStream.repeatedFields_, null);
};
goog.inherits(proto.model.InsightSampleStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightSampleStream.displayName = 'proto.model.InsightSampleStream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightDataPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.InsightDataPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightDataPoint.displayName = 'proto.model.InsightDataPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightApplicationCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.InsightApplicationCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightApplicationCount.displayName = 'proto.model.InsightApplicationCount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightDeploymentSubset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.InsightDeploymentSubset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightDeploymentSubset.displayName = 'proto.model.InsightDeploymentSubset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightDailyDeployment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.InsightDailyDeployment.repeatedFields_, null);
};
goog.inherits(proto.model.InsightDailyDeployment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightDailyDeployment.displayName = 'proto.model.InsightDailyDeployment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightDeploymentChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.InsightDeploymentChunk.repeatedFields_, null);
};
goog.inherits(proto.model.InsightDeploymentChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightDeploymentChunk.displayName = 'proto.model.InsightDeploymentChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightDeploymentChunkMetaData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.InsightDeploymentChunkMetaData.repeatedFields_, null);
};
goog.inherits(proto.model.InsightDeploymentChunkMetaData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightDeploymentChunkMetaData.displayName = 'proto.model.InsightDeploymentChunkMetaData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.InsightDeploymentChunkMetaData.ChunkData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightDeploymentChunkMetaData.ChunkData.displayName = 'proto.model.InsightDeploymentChunkMetaData.ChunkData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.InsightChunkDateRange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.InsightChunkDateRange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.InsightChunkDateRange.displayName = 'proto.model.InsightChunkDateRange';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightSample.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightSample.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightSample} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightSample.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    dataPoint: (f = msg.getDataPoint()) && proto.model.InsightDataPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightSample}
 */
proto.model.InsightSample.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightSample;
  return proto.model.InsightSample.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightSample} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightSample}
 */
proto.model.InsightSample.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = new proto.model.InsightDataPoint;
      reader.readMessage(value,proto.model.InsightDataPoint.deserializeBinaryFromReader);
      msg.setDataPoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightSample.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightSample.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightSample} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightSample.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDataPoint();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.model.InsightDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, string> labels = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.model.InsightSample.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.model.InsightSample} returns this
 */
proto.model.InsightSample.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};


/**
 * optional InsightDataPoint data_point = 2;
 * @return {?proto.model.InsightDataPoint}
 */
proto.model.InsightSample.prototype.getDataPoint = function() {
  return /** @type{?proto.model.InsightDataPoint} */ (
    jspb.Message.getWrapperField(this, proto.model.InsightDataPoint, 2));
};


/**
 * @param {?proto.model.InsightDataPoint|undefined} value
 * @return {!proto.model.InsightSample} returns this
*/
proto.model.InsightSample.prototype.setDataPoint = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.InsightSample} returns this
 */
proto.model.InsightSample.prototype.clearDataPoint = function() {
  return this.setDataPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.InsightSample.prototype.hasDataPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.InsightSampleStream.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightSampleStream.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightSampleStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightSampleStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightSampleStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    dataPointsList: jspb.Message.toObjectList(msg.getDataPointsList(),
    proto.model.InsightDataPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightSampleStream}
 */
proto.model.InsightSampleStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightSampleStream;
  return proto.model.InsightSampleStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightSampleStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightSampleStream}
 */
proto.model.InsightSampleStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = new proto.model.InsightDataPoint;
      reader.readMessage(value,proto.model.InsightDataPoint.deserializeBinaryFromReader);
      msg.addDataPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightSampleStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightSampleStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightSampleStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightSampleStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getDataPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.InsightDataPoint.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, string> labels = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.model.InsightSampleStream.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.model.InsightSampleStream} returns this
 */
proto.model.InsightSampleStream.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};


/**
 * repeated InsightDataPoint data_points = 2;
 * @return {!Array<!proto.model.InsightDataPoint>}
 */
proto.model.InsightSampleStream.prototype.getDataPointsList = function() {
  return /** @type{!Array<!proto.model.InsightDataPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.InsightDataPoint, 2));
};


/**
 * @param {!Array<!proto.model.InsightDataPoint>} value
 * @return {!proto.model.InsightSampleStream} returns this
*/
proto.model.InsightSampleStream.prototype.setDataPointsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.InsightDataPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.InsightDataPoint}
 */
proto.model.InsightSampleStream.prototype.addDataPoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.InsightDataPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.model.InsightSampleStream} returns this
 */
proto.model.InsightSampleStream.prototype.clearDataPointsList = function() {
  return this.setDataPointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightDataPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightDataPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightDataPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDataPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightDataPoint}
 */
proto.model.InsightDataPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightDataPoint;
  return proto.model.InsightDataPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightDataPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightDataPoint}
 */
proto.model.InsightDataPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightDataPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightDataPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightDataPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDataPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.model.InsightDataPoint.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightDataPoint} returns this
 */
proto.model.InsightDataPoint.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float value = 2;
 * @return {number}
 */
proto.model.InsightDataPoint.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightDataPoint} returns this
 */
proto.model.InsightDataPoint.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightApplicationCount.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightApplicationCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightApplicationCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightApplicationCount.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsMap: (f = msg.getLabelsMap()) ? f.toObject(includeInstance, undefined) : [],
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightApplicationCount}
 */
proto.model.InsightApplicationCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightApplicationCount;
  return proto.model.InsightApplicationCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightApplicationCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightApplicationCount}
 */
proto.model.InsightApplicationCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getLabelsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightApplicationCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightApplicationCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightApplicationCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightApplicationCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * map<string, string> labels = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.model.InsightApplicationCount.prototype.getLabelsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.model.InsightApplicationCount} returns this
 */
proto.model.InsightApplicationCount.prototype.clearLabelsMap = function() {
  this.getLabelsMap().clear();
  return this;};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.model.InsightApplicationCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightApplicationCount} returns this
 */
proto.model.InsightApplicationCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightDeploymentSubset.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightDeploymentSubset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightDeploymentSubset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDeploymentSubset.toObject = function(includeInstance, msg) {
  var f, obj = {
    createdAt: jspb.Message.getFieldWithDefault(msg, 14, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightDeploymentSubset}
 */
proto.model.InsightDeploymentSubset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightDeploymentSubset;
  return proto.model.InsightDeploymentSubset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightDeploymentSubset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightDeploymentSubset}
 */
proto.model.InsightDeploymentSubset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightDeploymentSubset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightDeploymentSubset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightDeploymentSubset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDeploymentSubset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
};


/**
 * optional int64 created_at = 14;
 * @return {number}
 */
proto.model.InsightDeploymentSubset.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightDeploymentSubset} returns this
 */
proto.model.InsightDeploymentSubset.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 updated_at = 15;
 * @return {number}
 */
proto.model.InsightDeploymentSubset.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightDeploymentSubset} returns this
 */
proto.model.InsightDeploymentSubset.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.InsightDailyDeployment.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightDailyDeployment.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightDailyDeployment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightDailyDeployment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDailyDeployment.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: jspb.Message.getFieldWithDefault(msg, 1, 0),
    createdAt: jspb.Message.getFieldWithDefault(msg, 14, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 15, 0),
    dailyDeploymentsList: jspb.Message.toObjectList(msg.getDailyDeploymentsList(),
    proto.model.InsightDeploymentSubset.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightDailyDeployment}
 */
proto.model.InsightDailyDeployment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightDailyDeployment;
  return proto.model.InsightDailyDeployment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightDailyDeployment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightDailyDeployment}
 */
proto.model.InsightDailyDeployment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 4:
      var value = new proto.model.InsightDeploymentSubset;
      reader.readMessage(value,proto.model.InsightDeploymentSubset.deserializeBinaryFromReader);
      msg.addDailyDeployments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightDailyDeployment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightDailyDeployment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightDailyDeployment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDailyDeployment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getDailyDeploymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.model.InsightDeploymentSubset.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 date = 1;
 * @return {number}
 */
proto.model.InsightDailyDeployment.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightDailyDeployment} returns this
 */
proto.model.InsightDailyDeployment.prototype.setDate = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 created_at = 14;
 * @return {number}
 */
proto.model.InsightDailyDeployment.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightDailyDeployment} returns this
 */
proto.model.InsightDailyDeployment.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 updated_at = 15;
 * @return {number}
 */
proto.model.InsightDailyDeployment.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightDailyDeployment} returns this
 */
proto.model.InsightDailyDeployment.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * repeated InsightDeploymentSubset daily_deployments = 4;
 * @return {!Array<!proto.model.InsightDeploymentSubset>}
 */
proto.model.InsightDailyDeployment.prototype.getDailyDeploymentsList = function() {
  return /** @type{!Array<!proto.model.InsightDeploymentSubset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.InsightDeploymentSubset, 4));
};


/**
 * @param {!Array<!proto.model.InsightDeploymentSubset>} value
 * @return {!proto.model.InsightDailyDeployment} returns this
*/
proto.model.InsightDailyDeployment.prototype.setDailyDeploymentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.model.InsightDeploymentSubset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.InsightDeploymentSubset}
 */
proto.model.InsightDailyDeployment.prototype.addDailyDeployments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.model.InsightDeploymentSubset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.model.InsightDailyDeployment} returns this
 */
proto.model.InsightDailyDeployment.prototype.clearDailyDeploymentsList = function() {
  return this.setDailyDeploymentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.InsightDeploymentChunk.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightDeploymentChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightDeploymentChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightDeploymentChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDeploymentChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    dateRange: (f = msg.getDateRange()) && proto.model.InsightChunkDateRange.toObject(includeInstance, f),
    deploymentsList: jspb.Message.toObjectList(msg.getDeploymentsList(),
    proto.model.InsightDailyDeployment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightDeploymentChunk}
 */
proto.model.InsightDeploymentChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightDeploymentChunk;
  return proto.model.InsightDeploymentChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightDeploymentChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightDeploymentChunk}
 */
proto.model.InsightDeploymentChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.InsightChunkDateRange;
      reader.readMessage(value,proto.model.InsightChunkDateRange.deserializeBinaryFromReader);
      msg.setDateRange(value);
      break;
    case 2:
      var value = new proto.model.InsightDailyDeployment;
      reader.readMessage(value,proto.model.InsightDailyDeployment.deserializeBinaryFromReader);
      msg.addDeployments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightDeploymentChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightDeploymentChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightDeploymentChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDeploymentChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDateRange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.InsightChunkDateRange.serializeBinaryToWriter
    );
  }
  f = message.getDeploymentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.InsightDailyDeployment.serializeBinaryToWriter
    );
  }
};


/**
 * optional InsightChunkDateRange date_range = 1;
 * @return {?proto.model.InsightChunkDateRange}
 */
proto.model.InsightDeploymentChunk.prototype.getDateRange = function() {
  return /** @type{?proto.model.InsightChunkDateRange} */ (
    jspb.Message.getWrapperField(this, proto.model.InsightChunkDateRange, 1));
};


/**
 * @param {?proto.model.InsightChunkDateRange|undefined} value
 * @return {!proto.model.InsightDeploymentChunk} returns this
*/
proto.model.InsightDeploymentChunk.prototype.setDateRange = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.InsightDeploymentChunk} returns this
 */
proto.model.InsightDeploymentChunk.prototype.clearDateRange = function() {
  return this.setDateRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.InsightDeploymentChunk.prototype.hasDateRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated InsightDailyDeployment deployments = 2;
 * @return {!Array<!proto.model.InsightDailyDeployment>}
 */
proto.model.InsightDeploymentChunk.prototype.getDeploymentsList = function() {
  return /** @type{!Array<!proto.model.InsightDailyDeployment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.InsightDailyDeployment, 2));
};


/**
 * @param {!Array<!proto.model.InsightDailyDeployment>} value
 * @return {!proto.model.InsightDeploymentChunk} returns this
*/
proto.model.InsightDeploymentChunk.prototype.setDeploymentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.InsightDailyDeployment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.InsightDailyDeployment}
 */
proto.model.InsightDeploymentChunk.prototype.addDeployments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.InsightDailyDeployment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.model.InsightDeploymentChunk} returns this
 */
proto.model.InsightDeploymentChunk.prototype.clearDeploymentsList = function() {
  return this.setDeploymentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.InsightDeploymentChunkMetaData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightDeploymentChunkMetaData.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightDeploymentChunkMetaData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightDeploymentChunkMetaData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDeploymentChunkMetaData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.model.InsightDeploymentChunkMetaData.ChunkData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightDeploymentChunkMetaData}
 */
proto.model.InsightDeploymentChunkMetaData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightDeploymentChunkMetaData;
  return proto.model.InsightDeploymentChunkMetaData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightDeploymentChunkMetaData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightDeploymentChunkMetaData}
 */
proto.model.InsightDeploymentChunkMetaData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.InsightDeploymentChunkMetaData.ChunkData;
      reader.readMessage(value,proto.model.InsightDeploymentChunkMetaData.ChunkData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightDeploymentChunkMetaData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightDeploymentChunkMetaData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightDeploymentChunkMetaData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDeploymentChunkMetaData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.InsightDeploymentChunkMetaData.ChunkData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightDeploymentChunkMetaData.ChunkData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightDeploymentChunkMetaData.ChunkData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.toObject = function(includeInstance, msg) {
  var f, obj = {
    dateRange: (f = msg.getDateRange()) && proto.model.InsightChunkDateRange.toObject(includeInstance, f),
    chunkKey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chunkSize: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightDeploymentChunkMetaData.ChunkData}
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightDeploymentChunkMetaData.ChunkData;
  return proto.model.InsightDeploymentChunkMetaData.ChunkData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightDeploymentChunkMetaData.ChunkData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightDeploymentChunkMetaData.ChunkData}
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.InsightChunkDateRange;
      reader.readMessage(value,proto.model.InsightChunkDateRange.deserializeBinaryFromReader);
      msg.setDateRange(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChunkKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChunkSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightDeploymentChunkMetaData.ChunkData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightDeploymentChunkMetaData.ChunkData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDateRange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.InsightChunkDateRange.serializeBinaryToWriter
    );
  }
  f = message.getChunkKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChunkSize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional InsightChunkDateRange date_range = 1;
 * @return {?proto.model.InsightChunkDateRange}
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.getDateRange = function() {
  return /** @type{?proto.model.InsightChunkDateRange} */ (
    jspb.Message.getWrapperField(this, proto.model.InsightChunkDateRange, 1));
};


/**
 * @param {?proto.model.InsightChunkDateRange|undefined} value
 * @return {!proto.model.InsightDeploymentChunkMetaData.ChunkData} returns this
*/
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.setDateRange = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.model.InsightDeploymentChunkMetaData.ChunkData} returns this
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.clearDateRange = function() {
  return this.setDateRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.hasDateRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string chunk_key = 2;
 * @return {string}
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.getChunkKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.model.InsightDeploymentChunkMetaData.ChunkData} returns this
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.setChunkKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 chunk_size = 3;
 * @return {number}
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.getChunkSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightDeploymentChunkMetaData.ChunkData} returns this
 */
proto.model.InsightDeploymentChunkMetaData.ChunkData.prototype.setChunkSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated ChunkData data = 1;
 * @return {!Array<!proto.model.InsightDeploymentChunkMetaData.ChunkData>}
 */
proto.model.InsightDeploymentChunkMetaData.prototype.getDataList = function() {
  return /** @type{!Array<!proto.model.InsightDeploymentChunkMetaData.ChunkData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.InsightDeploymentChunkMetaData.ChunkData, 1));
};


/**
 * @param {!Array<!proto.model.InsightDeploymentChunkMetaData.ChunkData>} value
 * @return {!proto.model.InsightDeploymentChunkMetaData} returns this
*/
proto.model.InsightDeploymentChunkMetaData.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.InsightDeploymentChunkMetaData.ChunkData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.InsightDeploymentChunkMetaData.ChunkData}
 */
proto.model.InsightDeploymentChunkMetaData.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.InsightDeploymentChunkMetaData.ChunkData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.model.InsightDeploymentChunkMetaData} returns this
 */
proto.model.InsightDeploymentChunkMetaData.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.InsightChunkDateRange.prototype.toObject = function(opt_includeInstance) {
  return proto.model.InsightChunkDateRange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.InsightChunkDateRange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightChunkDateRange.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, 0),
    to: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.InsightChunkDateRange}
 */
proto.model.InsightChunkDateRange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.InsightChunkDateRange;
  return proto.model.InsightChunkDateRange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.InsightChunkDateRange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.InsightChunkDateRange}
 */
proto.model.InsightChunkDateRange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.InsightChunkDateRange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.InsightChunkDateRange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.InsightChunkDateRange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.InsightChunkDateRange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTo();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 from = 1;
 * @return {number}
 */
proto.model.InsightChunkDateRange.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightChunkDateRange} returns this
 */
proto.model.InsightChunkDateRange.prototype.setFrom = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 to = 2;
 * @return {number}
 */
proto.model.InsightChunkDateRange.prototype.getTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.model.InsightChunkDateRange} returns this
 */
proto.model.InsightChunkDateRange.prototype.setTo = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.model.InsightResultType = {
  MATRIX: 0,
  VECTOR: 1
};

/**
 * @enum {number}
 */
proto.model.InsightMetricsKind = {
  DEPLOYMENT_FREQUENCY: 0,
  CHANGE_FAILURE_RATE: 1,
  MTTR: 2,
  LEAD_TIME: 3,
  APPLICATIONS_COUNT: 4
};

/**
 * @enum {number}
 */
proto.model.InsightApplicationCountLabelKey = {
  KIND: 0,
  ACTIVE_STATUS: 1
};

goog.object.extend(exports, proto.model);
