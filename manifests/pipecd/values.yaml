# Service and ingress.
service:
  port: 8080
  internalPort:
  type: "NodePort"

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.allow-http: "false"
    # kubernetes.io/ingress.global-static-ip-name: pipecd

# ServiceAccount
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of existing ServiceAccount to use when create is false.
  name: ""
  # Annotations to add to the service account
  annotations: {}

# Workloads.
gateway:
  replicasCount: 1
  imageTag: v1.18.3
  resources: {}
  internalTLS:
    enabled: false

server:
  image:
    repository: ghcr.io/pipe-cd/pipecd
  replicasCount: 1
  args:
    cacheAddress: ""
    enableGRPCReflection: false
    secureCookie: false
    # One of "humanize", "json", or "console" is available.
    logEncoding: humanize
    # One of "debug", "info", "warn", "error", "dpanic", "panic" or "fatal" is available.
    logLevel: info
    metrics: true
  resources: {}
  env: []

cache:
  imageTag: "5.0.5-alpine3.9"
  password: ""
  resources: {}

ops:
  image:
    repository: ghcr.io/pipe-cd/pipecd
  args:
    cacheAddress: ""
    # One of "humanize", "json", or "console" is available.
    logEncoding: humanize
    # One of "debug", "info", "warn", "error", "dpanic", "panic" or "fatal" is available.
    logLevel: info
    metrics: true
  resources: {}

cloudSQLProxy:
  enabled: false
  version: 1.17
  args:
    instanceConnectionName: ""
    port: 3306
  resources: {}

mysql:
  image: mysql
  imageTag: 8.0.33
  resources: {}
  port: 3306

minio:
  imageTag: "RELEASE.2020-08-26T00-00-49Z"
  resources: {}
  port: 9000

# Control Plane Configurations.
config:
  # Specifies whether a ConfigMap for control plane configuration should be created
  create: true
  # The name of the ConfigMap to use when create is false.
  name: ""
  # The name of the configuration file.
  fileName: control-plane-config.yaml
  # Configuration data for control plane when create is false.
  data: |
    apiVersion: "pipecd.dev/v1beta1"
    kind: ControlPlane
    spec:

# Secret files that can be used in above configuration.
secret:
  # Specifies whether a Secret for storing sensitive data should be created.
  create: true
  # The name of the Secret should be mounted to container.
  name: "pipecd-secrets"
  mountPath: /etc/pipecd-secret
  encryptionKey:
    fileName: "encryption-key"
    data: ""
  firestoreServiceAccount:
    fileName: "firestore-service-account"
    data: ""
  gcsServiceAccount:
    fileName: "gcs-service-account"
    data: ""
  cloudSQLServiceAccount:
    fileName: "cloud-sql-service-account"
    data: ""
  minioAccessKey:
    fileName: "minio-access-key"
    data: ""
  minioSecretKey:
    fileName: "minio-secret-key"
    data: ""
  internalTLSKey:
    fileName: "internal-tls.key"
    data: ""
  internalTLSCert:
    fileName: "internal-tls.cert"
    data: ""


# Optional configuration for GKE.
backendConfig:
  enabled: false
  iap:
    enabled: false
    secretName: pipecd-iap

managedCertificate:
  enabled: false
  domains: []

cors:
  enabled: false
  allowOrigins:
    - "http://localhost:9090"

quickstart:
  enabled: false

monitoring:
  # If true, prometheus and grafana sub-charts will be installed
  enabled: false
  # If true, cluster stats will be collected and shown on the dashboard.
  # It includes stats for Nodes, Pods and so on.
  clusterStats: false
  # Optional configuration for GKE.
  backendConfig:
    enabled: false
    iap:
      enabled: false
      secretName: pipecd-monitoring-iap
  managedCertificate:
    enabled: false
    domains: []

# All directives inside this section will be directly sent to the prometheus chart.
# Head to the below link to see all available values.
# https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus/values.yaml
prometheus:
  pushgateway:
    enabled: false
  nodeExporter:
    enabled: true
    service:
      hostPort: 9100
      servicePort: 9100
  kubeStateMetrics:
    enabled: true
  configmapReload:
    prometheus:
      enabled: true
    alertmanager:
      enabled: true
  alertmanager:
    enabled: true
    useClusterRole: true
  alertmanagerFiles:
    alertmanager.yml:
      # The root node of the routing tree.
      route: {}
      # A list of notification receivers.
      receivers: []
  server:
    configMapOverrideName: prometheus-server
    retention: 7d
    persistentVolume:
      size: 4Gi
    strategy:
      type: Recreate

# All directives inside this section will be directly sent to the grafana chart.
# Head to the below link to see all available values.
# https://github.com/grafana/helm-charts/tree/main/charts/grafana
grafana:
  rbac:
    pspEnabled: false
  adminPassword: admin
  ingress:
    enabled: false
    hosts: []
    path: /
    pathType: Prefix
  sidecar:
    datasources:
      enabled: true
      # Label that the configmaps with datasources are marked with
      label: grafana_datasource
    dashboards:
      enabled: true
      # Label that the configmaps with dashboards are marked with
      label: grafana_dashboard
      provider:
        foldersFromFilesStructure: true
  extraConfigmapMounts:
    - name: datasources
      configMap: pipecd-grafana-datasources
      mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
      subPath: datasources.yaml
      readOnly: true
  # TODO: Manage Grafana dashboard providers as a ConfigMap
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'Cluster'
          orgId: 1
          folder: 'Cluster'
          type: file
          disableDeletion: false
          allowUiUpdates: false
          options:
            path: /tmp/dashboards/cluster
        - name: 'Control-Plane'
          orgId: 1
          folder: 'Control-Plane'
          type: file
          disableDeletion: false
          allowUiUpdates: false
          options:
            path: /tmp/dashboards/control-plane
        - name: 'Piped'
          orgId: 1
          folder: 'Piped'
          type: file
          disableDeletion: false
          allowUiUpdates: false
          options:
            path: /tmp/dashboards/piped
