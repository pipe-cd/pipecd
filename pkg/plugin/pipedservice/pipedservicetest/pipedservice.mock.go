// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pipe-cd/pipecd/pkg/plugin/pipedservice (interfaces: PluginServiceClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod --package=pipedservicetest --destination=pkg/plugin/pipedservice/pipedservicetest/pipedservice.mock.go github.com/pipe-cd/pipecd/pkg/plugin/pipedservice PluginServiceClient
//

// Package pipedservicetest is a generated GoMock package.
package pipedservicetest

import (
	context "context"
	reflect "reflect"

	pipedservice "github.com/pipe-cd/pipecd/pkg/plugin/pipedservice"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPluginServiceClient is a mock of PluginServiceClient interface.
type MockPluginServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPluginServiceClientMockRecorder
	isgomock struct{}
}

// MockPluginServiceClientMockRecorder is the mock recorder for MockPluginServiceClient.
type MockPluginServiceClientMockRecorder struct {
	mock *MockPluginServiceClient
}

// NewMockPluginServiceClient creates a new mock instance.
func NewMockPluginServiceClient(ctrl *gomock.Controller) *MockPluginServiceClient {
	mock := &MockPluginServiceClient{ctrl: ctrl}
	mock.recorder = &MockPluginServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginServiceClient) EXPECT() *MockPluginServiceClientMockRecorder {
	return m.recorder
}

// GetDeploymentPluginMetadata mocks base method.
func (m *MockPluginServiceClient) GetDeploymentPluginMetadata(ctx context.Context, in *pipedservice.GetDeploymentPluginMetadataRequest, opts ...grpc.CallOption) (*pipedservice.GetDeploymentPluginMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentPluginMetadata", varargs...)
	ret0, _ := ret[0].(*pipedservice.GetDeploymentPluginMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentPluginMetadata indicates an expected call of GetDeploymentPluginMetadata.
func (mr *MockPluginServiceClientMockRecorder) GetDeploymentPluginMetadata(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentPluginMetadata", reflect.TypeOf((*MockPluginServiceClient)(nil).GetDeploymentPluginMetadata), varargs...)
}

// GetDeploymentSharedMetadata mocks base method.
func (m *MockPluginServiceClient) GetDeploymentSharedMetadata(ctx context.Context, in *pipedservice.GetDeploymentSharedMetadataRequest, opts ...grpc.CallOption) (*pipedservice.GetDeploymentSharedMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeploymentSharedMetadata", varargs...)
	ret0, _ := ret[0].(*pipedservice.GetDeploymentSharedMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeploymentSharedMetadata indicates an expected call of GetDeploymentSharedMetadata.
func (mr *MockPluginServiceClientMockRecorder) GetDeploymentSharedMetadata(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeploymentSharedMetadata", reflect.TypeOf((*MockPluginServiceClient)(nil).GetDeploymentSharedMetadata), varargs...)
}

// GetStageMetadata mocks base method.
func (m *MockPluginServiceClient) GetStageMetadata(ctx context.Context, in *pipedservice.GetStageMetadataRequest, opts ...grpc.CallOption) (*pipedservice.GetStageMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStageMetadata", varargs...)
	ret0, _ := ret[0].(*pipedservice.GetStageMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStageMetadata indicates an expected call of GetStageMetadata.
func (mr *MockPluginServiceClientMockRecorder) GetStageMetadata(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStageMetadata", reflect.TypeOf((*MockPluginServiceClient)(nil).GetStageMetadata), varargs...)
}

// InstallTool mocks base method.
func (m *MockPluginServiceClient) InstallTool(ctx context.Context, in *pipedservice.InstallToolRequest, opts ...grpc.CallOption) (*pipedservice.InstallToolResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InstallTool", varargs...)
	ret0, _ := ret[0].(*pipedservice.InstallToolResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstallTool indicates an expected call of InstallTool.
func (mr *MockPluginServiceClientMockRecorder) InstallTool(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallTool", reflect.TypeOf((*MockPluginServiceClient)(nil).InstallTool), varargs...)
}

// ListStageCommands mocks base method.
func (m *MockPluginServiceClient) ListStageCommands(ctx context.Context, in *pipedservice.ListStageCommandsRequest, opts ...grpc.CallOption) (*pipedservice.ListStageCommandsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStageCommands", varargs...)
	ret0, _ := ret[0].(*pipedservice.ListStageCommandsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStageCommands indicates an expected call of ListStageCommands.
func (mr *MockPluginServiceClientMockRecorder) ListStageCommands(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStageCommands", reflect.TypeOf((*MockPluginServiceClient)(nil).ListStageCommands), varargs...)
}

// PutDeploymentPluginMetadata mocks base method.
func (m *MockPluginServiceClient) PutDeploymentPluginMetadata(ctx context.Context, in *pipedservice.PutDeploymentPluginMetadataRequest, opts ...grpc.CallOption) (*pipedservice.PutDeploymentPluginMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDeploymentPluginMetadata", varargs...)
	ret0, _ := ret[0].(*pipedservice.PutDeploymentPluginMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeploymentPluginMetadata indicates an expected call of PutDeploymentPluginMetadata.
func (mr *MockPluginServiceClientMockRecorder) PutDeploymentPluginMetadata(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeploymentPluginMetadata", reflect.TypeOf((*MockPluginServiceClient)(nil).PutDeploymentPluginMetadata), varargs...)
}

// PutDeploymentPluginMetadataMulti mocks base method.
func (m *MockPluginServiceClient) PutDeploymentPluginMetadataMulti(ctx context.Context, in *pipedservice.PutDeploymentPluginMetadataMultiRequest, opts ...grpc.CallOption) (*pipedservice.PutDeploymentPluginMetadataMultiResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutDeploymentPluginMetadataMulti", varargs...)
	ret0, _ := ret[0].(*pipedservice.PutDeploymentPluginMetadataMultiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutDeploymentPluginMetadataMulti indicates an expected call of PutDeploymentPluginMetadataMulti.
func (mr *MockPluginServiceClientMockRecorder) PutDeploymentPluginMetadataMulti(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeploymentPluginMetadataMulti", reflect.TypeOf((*MockPluginServiceClient)(nil).PutDeploymentPluginMetadataMulti), varargs...)
}

// PutStageMetadata mocks base method.
func (m *MockPluginServiceClient) PutStageMetadata(ctx context.Context, in *pipedservice.PutStageMetadataRequest, opts ...grpc.CallOption) (*pipedservice.PutStageMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutStageMetadata", varargs...)
	ret0, _ := ret[0].(*pipedservice.PutStageMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStageMetadata indicates an expected call of PutStageMetadata.
func (mr *MockPluginServiceClientMockRecorder) PutStageMetadata(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStageMetadata", reflect.TypeOf((*MockPluginServiceClient)(nil).PutStageMetadata), varargs...)
}

// PutStageMetadataMulti mocks base method.
func (m *MockPluginServiceClient) PutStageMetadataMulti(ctx context.Context, in *pipedservice.PutStageMetadataMultiRequest, opts ...grpc.CallOption) (*pipedservice.PutStageMetadataMultiResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutStageMetadataMulti", varargs...)
	ret0, _ := ret[0].(*pipedservice.PutStageMetadataMultiResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutStageMetadataMulti indicates an expected call of PutStageMetadataMulti.
func (mr *MockPluginServiceClientMockRecorder) PutStageMetadataMulti(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutStageMetadataMulti", reflect.TypeOf((*MockPluginServiceClient)(nil).PutStageMetadataMulti), varargs...)
}

// ReportStageLogs mocks base method.
func (m *MockPluginServiceClient) ReportStageLogs(ctx context.Context, in *pipedservice.ReportStageLogsRequest, opts ...grpc.CallOption) (*pipedservice.ReportStageLogsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportStageLogs", varargs...)
	ret0, _ := ret[0].(*pipedservice.ReportStageLogsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportStageLogs indicates an expected call of ReportStageLogs.
func (mr *MockPluginServiceClientMockRecorder) ReportStageLogs(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStageLogs", reflect.TypeOf((*MockPluginServiceClient)(nil).ReportStageLogs), varargs...)
}

// ReportStageLogsFromLastCheckpoint mocks base method.
func (m *MockPluginServiceClient) ReportStageLogsFromLastCheckpoint(ctx context.Context, in *pipedservice.ReportStageLogsFromLastCheckpointRequest, opts ...grpc.CallOption) (*pipedservice.ReportStageLogsFromLastCheckpointResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportStageLogsFromLastCheckpoint", varargs...)
	ret0, _ := ret[0].(*pipedservice.ReportStageLogsFromLastCheckpointResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportStageLogsFromLastCheckpoint indicates an expected call of ReportStageLogsFromLastCheckpoint.
func (mr *MockPluginServiceClientMockRecorder) ReportStageLogsFromLastCheckpoint(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportStageLogsFromLastCheckpoint", reflect.TypeOf((*MockPluginServiceClient)(nil).ReportStageLogsFromLastCheckpoint), varargs...)
}
