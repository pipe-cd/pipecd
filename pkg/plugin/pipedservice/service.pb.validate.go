// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/plugin/pipedservice/service.proto

package pipedservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DecryptSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecryptSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecryptSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecryptSecretRequestMultiError, or nil if none found.
func (m *DecryptSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DecryptSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecret()) < 1 {
		err := DecryptSecretRequestValidationError{
			field:  "Secret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DecryptSecretRequestMultiError(errors)
	}

	return nil
}

// DecryptSecretRequestMultiError is an error wrapping multiple validation
// errors returned by DecryptSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type DecryptSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecryptSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecryptSecretRequestMultiError) AllErrors() []error { return m }

// DecryptSecretRequestValidationError is the validation error returned by
// DecryptSecretRequest.Validate if the designated constraints aren't met.
type DecryptSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecryptSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecryptSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecryptSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecryptSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecryptSecretRequestValidationError) ErrorName() string {
	return "DecryptSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DecryptSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecryptSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecryptSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecryptSecretRequestValidationError{}

// Validate checks the field values on DecryptSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DecryptSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DecryptSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DecryptSecretResponseMultiError, or nil if none found.
func (m *DecryptSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DecryptSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DecryptedSecret

	if len(errors) > 0 {
		return DecryptSecretResponseMultiError(errors)
	}

	return nil
}

// DecryptSecretResponseMultiError is an error wrapping multiple validation
// errors returned by DecryptSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type DecryptSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecryptSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecryptSecretResponseMultiError) AllErrors() []error { return m }

// DecryptSecretResponseValidationError is the validation error returned by
// DecryptSecretResponse.Validate if the designated constraints aren't met.
type DecryptSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecryptSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecryptSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecryptSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecryptSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecryptSecretResponseValidationError) ErrorName() string {
	return "DecryptSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DecryptSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecryptSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecryptSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecryptSecretResponseValidationError{}

// Validate checks the field values on InstallToolRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallToolRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallToolRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallToolRequestMultiError, or nil if none found.
func (m *InstallToolRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallToolRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := InstallToolRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := InstallToolRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetInstallScript()) < 1 {
		err := InstallToolRequestValidationError{
			field:  "InstallScript",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InstallToolRequestMultiError(errors)
	}

	return nil
}

// InstallToolRequestMultiError is an error wrapping multiple validation errors
// returned by InstallToolRequest.ValidateAll() if the designated constraints
// aren't met.
type InstallToolRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallToolRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallToolRequestMultiError) AllErrors() []error { return m }

// InstallToolRequestValidationError is the validation error returned by
// InstallToolRequest.Validate if the designated constraints aren't met.
type InstallToolRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallToolRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallToolRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallToolRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallToolRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallToolRequestValidationError) ErrorName() string {
	return "InstallToolRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InstallToolRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallToolRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallToolRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallToolRequestValidationError{}

// Validate checks the field values on InstallToolResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InstallToolResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstallToolResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstallToolResponseMultiError, or nil if none found.
func (m *InstallToolResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstallToolResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstalledPath

	if len(errors) > 0 {
		return InstallToolResponseMultiError(errors)
	}

	return nil
}

// InstallToolResponseMultiError is an error wrapping multiple validation
// errors returned by InstallToolResponse.ValidateAll() if the designated
// constraints aren't met.
type InstallToolResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstallToolResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstallToolResponseMultiError) AllErrors() []error { return m }

// InstallToolResponseValidationError is the validation error returned by
// InstallToolResponse.Validate if the designated constraints aren't met.
type InstallToolResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstallToolResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstallToolResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstallToolResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstallToolResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstallToolResponseValidationError) ErrorName() string {
	return "InstallToolResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InstallToolResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstallToolResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstallToolResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstallToolResponseValidationError{}

// Validate checks the field values on ReportStageLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportStageLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStageLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportStageLogsRequestMultiError, or nil if none found.
func (m *ReportStageLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ReportStageLogsRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := ReportStageLogsRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RetriedCount

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportStageLogsRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportStageLogsRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportStageLogsRequestValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportStageLogsRequestMultiError(errors)
	}

	return nil
}

// ReportStageLogsRequestMultiError is an error wrapping multiple validation
// errors returned by ReportStageLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportStageLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageLogsRequestMultiError) AllErrors() []error { return m }

// ReportStageLogsRequestValidationError is the validation error returned by
// ReportStageLogsRequest.Validate if the designated constraints aren't met.
type ReportStageLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageLogsRequestValidationError) ErrorName() string {
	return "ReportStageLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageLogsRequestValidationError{}

// Validate checks the field values on ReportStageLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportStageLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStageLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportStageLogsResponseMultiError, or nil if none found.
func (m *ReportStageLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportStageLogsResponseMultiError(errors)
	}

	return nil
}

// ReportStageLogsResponseMultiError is an error wrapping multiple validation
// errors returned by ReportStageLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportStageLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageLogsResponseMultiError) AllErrors() []error { return m }

// ReportStageLogsResponseValidationError is the validation error returned by
// ReportStageLogsResponse.Validate if the designated constraints aren't met.
type ReportStageLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageLogsResponseValidationError) ErrorName() string {
	return "ReportStageLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageLogsResponseValidationError{}

// Validate checks the field values on ReportStageLogsFromLastCheckpointRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReportStageLogsFromLastCheckpointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportStageLogsFromLastCheckpointRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ReportStageLogsFromLastCheckpointRequestMultiError, or nil if none found.
func (m *ReportStageLogsFromLastCheckpointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageLogsFromLastCheckpointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ReportStageLogsFromLastCheckpointRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := ReportStageLogsFromLastCheckpointRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RetriedCount

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportStageLogsFromLastCheckpointRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportStageLogsFromLastCheckpointRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportStageLogsFromLastCheckpointRequestValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Completed

	if len(errors) > 0 {
		return ReportStageLogsFromLastCheckpointRequestMultiError(errors)
	}

	return nil
}

// ReportStageLogsFromLastCheckpointRequestMultiError is an error wrapping
// multiple validation errors returned by
// ReportStageLogsFromLastCheckpointRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportStageLogsFromLastCheckpointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageLogsFromLastCheckpointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageLogsFromLastCheckpointRequestMultiError) AllErrors() []error { return m }

// ReportStageLogsFromLastCheckpointRequestValidationError is the validation
// error returned by ReportStageLogsFromLastCheckpointRequest.Validate if the
// designated constraints aren't met.
type ReportStageLogsFromLastCheckpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) ErrorName() string {
	return "ReportStageLogsFromLastCheckpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageLogsFromLastCheckpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageLogsFromLastCheckpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageLogsFromLastCheckpointRequestValidationError{}

// Validate checks the field values on
// ReportStageLogsFromLastCheckpointResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportStageLogsFromLastCheckpointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportStageLogsFromLastCheckpointResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ReportStageLogsFromLastCheckpointResponseMultiError, or nil if none found.
func (m *ReportStageLogsFromLastCheckpointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageLogsFromLastCheckpointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportStageLogsFromLastCheckpointResponseMultiError(errors)
	}

	return nil
}

// ReportStageLogsFromLastCheckpointResponseMultiError is an error wrapping
// multiple validation errors returned by
// ReportStageLogsFromLastCheckpointResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportStageLogsFromLastCheckpointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageLogsFromLastCheckpointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageLogsFromLastCheckpointResponseMultiError) AllErrors() []error { return m }

// ReportStageLogsFromLastCheckpointResponseValidationError is the validation
// error returned by ReportStageLogsFromLastCheckpointResponse.Validate if the
// designated constraints aren't met.
type ReportStageLogsFromLastCheckpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) ErrorName() string {
	return "ReportStageLogsFromLastCheckpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageLogsFromLastCheckpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageLogsFromLastCheckpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageLogsFromLastCheckpointResponseValidationError{}

// Validate checks the field values on GetStageMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStageMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStageMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStageMetadataRequestMultiError, or nil if none found.
func (m *GetStageMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStageMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := GetStageMetadataRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := GetStageMetadataRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := GetStageMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStageMetadataRequestMultiError(errors)
	}

	return nil
}

// GetStageMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by GetStageMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStageMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStageMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStageMetadataRequestMultiError) AllErrors() []error { return m }

// GetStageMetadataRequestValidationError is the validation error returned by
// GetStageMetadataRequest.Validate if the designated constraints aren't met.
type GetStageMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStageMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStageMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStageMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStageMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStageMetadataRequestValidationError) ErrorName() string {
	return "GetStageMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStageMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStageMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStageMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStageMetadataRequestValidationError{}

// Validate checks the field values on GetStageMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStageMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStageMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStageMetadataResponseMultiError, or nil if none found.
func (m *GetStageMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStageMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Found

	if len(errors) > 0 {
		return GetStageMetadataResponseMultiError(errors)
	}

	return nil
}

// GetStageMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by GetStageMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStageMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStageMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStageMetadataResponseMultiError) AllErrors() []error { return m }

// GetStageMetadataResponseValidationError is the validation error returned by
// GetStageMetadataResponse.Validate if the designated constraints aren't met.
type GetStageMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStageMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStageMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStageMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStageMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStageMetadataResponseValidationError) ErrorName() string {
	return "GetStageMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStageMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStageMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStageMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStageMetadataResponseValidationError{}

// Validate checks the field values on PutStageMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutStageMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutStageMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutStageMetadataRequestMultiError, or nil if none found.
func (m *PutStageMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutStageMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := PutStageMetadataRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := PutStageMetadataRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := PutStageMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return PutStageMetadataRequestMultiError(errors)
	}

	return nil
}

// PutStageMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by PutStageMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type PutStageMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutStageMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutStageMetadataRequestMultiError) AllErrors() []error { return m }

// PutStageMetadataRequestValidationError is the validation error returned by
// PutStageMetadataRequest.Validate if the designated constraints aren't met.
type PutStageMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutStageMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutStageMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutStageMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutStageMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutStageMetadataRequestValidationError) ErrorName() string {
	return "PutStageMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutStageMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutStageMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutStageMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutStageMetadataRequestValidationError{}

// Validate checks the field values on PutStageMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutStageMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutStageMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutStageMetadataResponseMultiError, or nil if none found.
func (m *PutStageMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutStageMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutStageMetadataResponseMultiError(errors)
	}

	return nil
}

// PutStageMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by PutStageMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type PutStageMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutStageMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutStageMetadataResponseMultiError) AllErrors() []error { return m }

// PutStageMetadataResponseValidationError is the validation error returned by
// PutStageMetadataResponse.Validate if the designated constraints aren't met.
type PutStageMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutStageMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutStageMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutStageMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutStageMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutStageMetadataResponseValidationError) ErrorName() string {
	return "PutStageMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutStageMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutStageMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutStageMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutStageMetadataResponseValidationError{}

// Validate checks the field values on PutStageMetadataMultiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutStageMetadataMultiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutStageMetadataMultiRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutStageMetadataMultiRequestMultiError, or nil if none found.
func (m *PutStageMetadataMultiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutStageMetadataMultiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := PutStageMetadataMultiRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := PutStageMetadataMultiRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return PutStageMetadataMultiRequestMultiError(errors)
	}

	return nil
}

// PutStageMetadataMultiRequestMultiError is an error wrapping multiple
// validation errors returned by PutStageMetadataMultiRequest.ValidateAll() if
// the designated constraints aren't met.
type PutStageMetadataMultiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutStageMetadataMultiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutStageMetadataMultiRequestMultiError) AllErrors() []error { return m }

// PutStageMetadataMultiRequestValidationError is the validation error returned
// by PutStageMetadataMultiRequest.Validate if the designated constraints
// aren't met.
type PutStageMetadataMultiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutStageMetadataMultiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutStageMetadataMultiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutStageMetadataMultiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutStageMetadataMultiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutStageMetadataMultiRequestValidationError) ErrorName() string {
	return "PutStageMetadataMultiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutStageMetadataMultiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutStageMetadataMultiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutStageMetadataMultiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutStageMetadataMultiRequestValidationError{}

// Validate checks the field values on PutStageMetadataMultiResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutStageMetadataMultiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutStageMetadataMultiResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PutStageMetadataMultiResponseMultiError, or nil if none found.
func (m *PutStageMetadataMultiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutStageMetadataMultiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutStageMetadataMultiResponseMultiError(errors)
	}

	return nil
}

// PutStageMetadataMultiResponseMultiError is an error wrapping multiple
// validation errors returned by PutStageMetadataMultiResponse.ValidateAll()
// if the designated constraints aren't met.
type PutStageMetadataMultiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutStageMetadataMultiResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutStageMetadataMultiResponseMultiError) AllErrors() []error { return m }

// PutStageMetadataMultiResponseValidationError is the validation error
// returned by PutStageMetadataMultiResponse.Validate if the designated
// constraints aren't met.
type PutStageMetadataMultiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutStageMetadataMultiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutStageMetadataMultiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutStageMetadataMultiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutStageMetadataMultiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutStageMetadataMultiResponseValidationError) ErrorName() string {
	return "PutStageMetadataMultiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutStageMetadataMultiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutStageMetadataMultiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutStageMetadataMultiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutStageMetadataMultiResponseValidationError{}

// Validate checks the field values on GetDeploymentPluginMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDeploymentPluginMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentPluginMetadataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDeploymentPluginMetadataRequestMultiError, or nil if none found.
func (m *GetDeploymentPluginMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentPluginMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := GetDeploymentPluginMetadataRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PluginName

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := GetDeploymentPluginMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeploymentPluginMetadataRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentPluginMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetDeploymentPluginMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentPluginMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentPluginMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentPluginMetadataRequestMultiError) AllErrors() []error { return m }

// GetDeploymentPluginMetadataRequestValidationError is the validation error
// returned by GetDeploymentPluginMetadataRequest.Validate if the designated
// constraints aren't met.
type GetDeploymentPluginMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentPluginMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentPluginMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentPluginMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentPluginMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentPluginMetadataRequestValidationError) ErrorName() string {
	return "GetDeploymentPluginMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentPluginMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentPluginMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentPluginMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentPluginMetadataRequestValidationError{}

// Validate checks the field values on GetDeploymentPluginMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDeploymentPluginMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentPluginMetadataResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDeploymentPluginMetadataResponseMultiError, or nil if none found.
func (m *GetDeploymentPluginMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentPluginMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Found

	if len(errors) > 0 {
		return GetDeploymentPluginMetadataResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentPluginMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDeploymentPluginMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentPluginMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentPluginMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentPluginMetadataResponseMultiError) AllErrors() []error { return m }

// GetDeploymentPluginMetadataResponseValidationError is the validation error
// returned by GetDeploymentPluginMetadataResponse.Validate if the designated
// constraints aren't met.
type GetDeploymentPluginMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentPluginMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentPluginMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentPluginMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentPluginMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentPluginMetadataResponseValidationError) ErrorName() string {
	return "GetDeploymentPluginMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentPluginMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentPluginMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentPluginMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentPluginMetadataResponseValidationError{}

// Validate checks the field values on PutDeploymentPluginMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PutDeploymentPluginMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutDeploymentPluginMetadataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PutDeploymentPluginMetadataRequestMultiError, or nil if none found.
func (m *PutDeploymentPluginMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutDeploymentPluginMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := PutDeploymentPluginMetadataRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPluginName()) < 1 {
		err := PutDeploymentPluginMetadataRequestValidationError{
			field:  "PluginName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := PutDeploymentPluginMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	if len(errors) > 0 {
		return PutDeploymentPluginMetadataRequestMultiError(errors)
	}

	return nil
}

// PutDeploymentPluginMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by
// PutDeploymentPluginMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type PutDeploymentPluginMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutDeploymentPluginMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutDeploymentPluginMetadataRequestMultiError) AllErrors() []error { return m }

// PutDeploymentPluginMetadataRequestValidationError is the validation error
// returned by PutDeploymentPluginMetadataRequest.Validate if the designated
// constraints aren't met.
type PutDeploymentPluginMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutDeploymentPluginMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutDeploymentPluginMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutDeploymentPluginMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutDeploymentPluginMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutDeploymentPluginMetadataRequestValidationError) ErrorName() string {
	return "PutDeploymentPluginMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutDeploymentPluginMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutDeploymentPluginMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutDeploymentPluginMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutDeploymentPluginMetadataRequestValidationError{}

// Validate checks the field values on PutDeploymentPluginMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PutDeploymentPluginMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutDeploymentPluginMetadataResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PutDeploymentPluginMetadataResponseMultiError, or nil if none found.
func (m *PutDeploymentPluginMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutDeploymentPluginMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutDeploymentPluginMetadataResponseMultiError(errors)
	}

	return nil
}

// PutDeploymentPluginMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by
// PutDeploymentPluginMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type PutDeploymentPluginMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutDeploymentPluginMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutDeploymentPluginMetadataResponseMultiError) AllErrors() []error { return m }

// PutDeploymentPluginMetadataResponseValidationError is the validation error
// returned by PutDeploymentPluginMetadataResponse.Validate if the designated
// constraints aren't met.
type PutDeploymentPluginMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutDeploymentPluginMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutDeploymentPluginMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutDeploymentPluginMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutDeploymentPluginMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutDeploymentPluginMetadataResponseValidationError) ErrorName() string {
	return "PutDeploymentPluginMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutDeploymentPluginMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutDeploymentPluginMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutDeploymentPluginMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutDeploymentPluginMetadataResponseValidationError{}

// Validate checks the field values on PutDeploymentPluginMetadataMultiRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PutDeploymentPluginMetadataMultiRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PutDeploymentPluginMetadataMultiRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// PutDeploymentPluginMetadataMultiRequestMultiError, or nil if none found.
func (m *PutDeploymentPluginMetadataMultiRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutDeploymentPluginMetadataMultiRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := PutDeploymentPluginMetadataMultiRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPluginName()) < 1 {
		err := PutDeploymentPluginMetadataMultiRequestValidationError{
			field:  "PluginName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return PutDeploymentPluginMetadataMultiRequestMultiError(errors)
	}

	return nil
}

// PutDeploymentPluginMetadataMultiRequestMultiError is an error wrapping
// multiple validation errors returned by
// PutDeploymentPluginMetadataMultiRequest.ValidateAll() if the designated
// constraints aren't met.
type PutDeploymentPluginMetadataMultiRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutDeploymentPluginMetadataMultiRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutDeploymentPluginMetadataMultiRequestMultiError) AllErrors() []error { return m }

// PutDeploymentPluginMetadataMultiRequestValidationError is the validation
// error returned by PutDeploymentPluginMetadataMultiRequest.Validate if the
// designated constraints aren't met.
type PutDeploymentPluginMetadataMultiRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutDeploymentPluginMetadataMultiRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutDeploymentPluginMetadataMultiRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutDeploymentPluginMetadataMultiRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutDeploymentPluginMetadataMultiRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutDeploymentPluginMetadataMultiRequestValidationError) ErrorName() string {
	return "PutDeploymentPluginMetadataMultiRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutDeploymentPluginMetadataMultiRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutDeploymentPluginMetadataMultiRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutDeploymentPluginMetadataMultiRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutDeploymentPluginMetadataMultiRequestValidationError{}

// Validate checks the field values on PutDeploymentPluginMetadataMultiResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PutDeploymentPluginMetadataMultiResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// PutDeploymentPluginMetadataMultiResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// PutDeploymentPluginMetadataMultiResponseMultiError, or nil if none found.
func (m *PutDeploymentPluginMetadataMultiResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutDeploymentPluginMetadataMultiResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutDeploymentPluginMetadataMultiResponseMultiError(errors)
	}

	return nil
}

// PutDeploymentPluginMetadataMultiResponseMultiError is an error wrapping
// multiple validation errors returned by
// PutDeploymentPluginMetadataMultiResponse.ValidateAll() if the designated
// constraints aren't met.
type PutDeploymentPluginMetadataMultiResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutDeploymentPluginMetadataMultiResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutDeploymentPluginMetadataMultiResponseMultiError) AllErrors() []error { return m }

// PutDeploymentPluginMetadataMultiResponseValidationError is the validation
// error returned by PutDeploymentPluginMetadataMultiResponse.Validate if the
// designated constraints aren't met.
type PutDeploymentPluginMetadataMultiResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutDeploymentPluginMetadataMultiResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutDeploymentPluginMetadataMultiResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutDeploymentPluginMetadataMultiResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutDeploymentPluginMetadataMultiResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutDeploymentPluginMetadataMultiResponseValidationError) ErrorName() string {
	return "PutDeploymentPluginMetadataMultiResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutDeploymentPluginMetadataMultiResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutDeploymentPluginMetadataMultiResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutDeploymentPluginMetadataMultiResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutDeploymentPluginMetadataMultiResponseValidationError{}

// Validate checks the field values on GetDeploymentSharedMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDeploymentSharedMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentSharedMetadataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDeploymentSharedMetadataRequestMultiError, or nil if none found.
func (m *GetDeploymentSharedMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentSharedMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := GetDeploymentSharedMetadataRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := GetDeploymentSharedMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeploymentSharedMetadataRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentSharedMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetDeploymentSharedMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentSharedMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentSharedMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentSharedMetadataRequestMultiError) AllErrors() []error { return m }

// GetDeploymentSharedMetadataRequestValidationError is the validation error
// returned by GetDeploymentSharedMetadataRequest.Validate if the designated
// constraints aren't met.
type GetDeploymentSharedMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentSharedMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentSharedMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentSharedMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentSharedMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentSharedMetadataRequestValidationError) ErrorName() string {
	return "GetDeploymentSharedMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentSharedMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentSharedMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentSharedMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentSharedMetadataRequestValidationError{}

// Validate checks the field values on GetDeploymentSharedMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDeploymentSharedMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentSharedMetadataResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetDeploymentSharedMetadataResponseMultiError, or nil if none found.
func (m *GetDeploymentSharedMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentSharedMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	// no validation rules for Found

	if len(errors) > 0 {
		return GetDeploymentSharedMetadataResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentSharedMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDeploymentSharedMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentSharedMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentSharedMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentSharedMetadataResponseMultiError) AllErrors() []error { return m }

// GetDeploymentSharedMetadataResponseValidationError is the validation error
// returned by GetDeploymentSharedMetadataResponse.Validate if the designated
// constraints aren't met.
type GetDeploymentSharedMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentSharedMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentSharedMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentSharedMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentSharedMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentSharedMetadataResponseValidationError) ErrorName() string {
	return "GetDeploymentSharedMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentSharedMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentSharedMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentSharedMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentSharedMetadataResponseValidationError{}

// Validate checks the field values on ListStageCommandsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStageCommandsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStageCommandsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStageCommandsRequestMultiError, or nil if none found.
func (m *ListStageCommandsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStageCommandsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ListStageCommandsRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := ListStageCommandsRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStageCommandsRequestMultiError(errors)
	}

	return nil
}

// ListStageCommandsRequestMultiError is an error wrapping multiple validation
// errors returned by ListStageCommandsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStageCommandsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStageCommandsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStageCommandsRequestMultiError) AllErrors() []error { return m }

// ListStageCommandsRequestValidationError is the validation error returned by
// ListStageCommandsRequest.Validate if the designated constraints aren't met.
type ListStageCommandsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStageCommandsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStageCommandsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStageCommandsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStageCommandsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStageCommandsRequestValidationError) ErrorName() string {
	return "ListStageCommandsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStageCommandsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStageCommandsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStageCommandsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStageCommandsRequestValidationError{}

// Validate checks the field values on ListStageCommandsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStageCommandsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStageCommandsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStageCommandsResponseMultiError, or nil if none found.
func (m *ListStageCommandsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStageCommandsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStageCommandsResponseValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStageCommandsResponseValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStageCommandsResponseValidationError{
					field:  fmt.Sprintf("Commands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStageCommandsResponseMultiError(errors)
	}

	return nil
}

// ListStageCommandsResponseMultiError is an error wrapping multiple validation
// errors returned by ListStageCommandsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListStageCommandsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStageCommandsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStageCommandsResponseMultiError) AllErrors() []error { return m }

// ListStageCommandsResponseValidationError is the validation error returned by
// ListStageCommandsResponse.Validate if the designated constraints aren't met.
type ListStageCommandsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStageCommandsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStageCommandsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStageCommandsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStageCommandsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStageCommandsResponseValidationError) ErrorName() string {
	return "ListStageCommandsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStageCommandsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStageCommandsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStageCommandsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStageCommandsResponseValidationError{}
