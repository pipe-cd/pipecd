// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/plugin/pipedservice/service.proto

package pipedservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	// InstallTool installs the given tool.
	// installed binary's filename becomes `name-version`.
	InstallTool(ctx context.Context, in *InstallToolRequest, opts ...grpc.CallOption) (*InstallToolResponse, error)
	// ReportStageLogs is used to save the log of a pipeline stage.
	ReportStageLogs(ctx context.Context, in *ReportStageLogsRequest, opts ...grpc.CallOption) (*ReportStageLogsResponse, error)
	// ReportStageLogsFromLastCheckpoint is used to save the full logs from the most recently saved point.
	ReportStageLogsFromLastCheckpoint(ctx context.Context, in *ReportStageLogsFromLastCheckpointRequest, opts ...grpc.CallOption) (*ReportStageLogsFromLastCheckpointResponse, error)
	// GetStageMetadata gets one metadata value of the given stage.
	GetStageMetadata(ctx context.Context, in *GetStageMetadataRequest, opts ...grpc.CallOption) (*GetStageMetadataResponse, error)
	// PutStageMetadata puts one metadata of the given stage.
	PutStageMetadata(ctx context.Context, in *PutStageMetadataRequest, opts ...grpc.CallOption) (*PutStageMetadataResponse, error)
	// PutStageMetadataMulti puts the metadata pairs of the given stage.
	PutStageMetadataMulti(ctx context.Context, in *PutStageMetadataMultiRequest, opts ...grpc.CallOption) (*PutStageMetadataMultiResponse, error)
	// GetDeploymentMetadata gets one metadata value of the given deployment.
	GetDeploymentPluginMetadata(ctx context.Context, in *GetDeploymentPluginMetadataRequest, opts ...grpc.CallOption) (*GetDeploymentPluginMetadataResponse, error)
	// PutDeploymentMetadata puts one metadata of the given deployment.
	PutDeploymentPluginMetadata(ctx context.Context, in *PutDeploymentPluginMetadataRequest, opts ...grpc.CallOption) (*PutDeploymentPluginMetadataResponse, error)
	// PutDeploymentMetadataMulti puts the metadata pairs of the given deployment.
	PutDeploymentPluginMetadataMulti(ctx context.Context, in *PutDeploymentPluginMetadataMultiRequest, opts ...grpc.CallOption) (*PutDeploymentPluginMetadataMultiResponse, error)
	// GetDeploymentSharedMetadata gets one shared metadata value of the given deployment.
	// The shared metadata is read-only in plugins for safety since it is shared among piped and plugins.
	GetDeploymentSharedMetadata(ctx context.Context, in *GetDeploymentSharedMetadataRequest, opts ...grpc.CallOption) (*GetDeploymentSharedMetadataResponse, error)
	// ListStageCommands lists unhandled commands of the given stage and type.
	ListStageCommands(ctx context.Context, in *ListStageCommandsRequest, opts ...grpc.CallOption) (*ListStageCommandsResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) InstallTool(ctx context.Context, in *InstallToolRequest, opts ...grpc.CallOption) (*InstallToolResponse, error) {
	out := new(InstallToolResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/InstallTool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ReportStageLogs(ctx context.Context, in *ReportStageLogsRequest, opts ...grpc.CallOption) (*ReportStageLogsResponse, error) {
	out := new(ReportStageLogsResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/ReportStageLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ReportStageLogsFromLastCheckpoint(ctx context.Context, in *ReportStageLogsFromLastCheckpointRequest, opts ...grpc.CallOption) (*ReportStageLogsFromLastCheckpointResponse, error) {
	out := new(ReportStageLogsFromLastCheckpointResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/ReportStageLogsFromLastCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetStageMetadata(ctx context.Context, in *GetStageMetadataRequest, opts ...grpc.CallOption) (*GetStageMetadataResponse, error) {
	out := new(GetStageMetadataResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/GetStageMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) PutStageMetadata(ctx context.Context, in *PutStageMetadataRequest, opts ...grpc.CallOption) (*PutStageMetadataResponse, error) {
	out := new(PutStageMetadataResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/PutStageMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) PutStageMetadataMulti(ctx context.Context, in *PutStageMetadataMultiRequest, opts ...grpc.CallOption) (*PutStageMetadataMultiResponse, error) {
	out := new(PutStageMetadataMultiResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/PutStageMetadataMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetDeploymentPluginMetadata(ctx context.Context, in *GetDeploymentPluginMetadataRequest, opts ...grpc.CallOption) (*GetDeploymentPluginMetadataResponse, error) {
	out := new(GetDeploymentPluginMetadataResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/GetDeploymentPluginMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) PutDeploymentPluginMetadata(ctx context.Context, in *PutDeploymentPluginMetadataRequest, opts ...grpc.CallOption) (*PutDeploymentPluginMetadataResponse, error) {
	out := new(PutDeploymentPluginMetadataResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/PutDeploymentPluginMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) PutDeploymentPluginMetadataMulti(ctx context.Context, in *PutDeploymentPluginMetadataMultiRequest, opts ...grpc.CallOption) (*PutDeploymentPluginMetadataMultiResponse, error) {
	out := new(PutDeploymentPluginMetadataMultiResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/PutDeploymentPluginMetadataMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetDeploymentSharedMetadata(ctx context.Context, in *GetDeploymentSharedMetadataRequest, opts ...grpc.CallOption) (*GetDeploymentSharedMetadataResponse, error) {
	out := new(GetDeploymentSharedMetadataResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/GetDeploymentSharedMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ListStageCommands(ctx context.Context, in *ListStageCommandsRequest, opts ...grpc.CallOption) (*ListStageCommandsResponse, error) {
	out := new(ListStageCommandsResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/ListStageCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	// InstallTool installs the given tool.
	// installed binary's filename becomes `name-version`.
	InstallTool(context.Context, *InstallToolRequest) (*InstallToolResponse, error)
	// ReportStageLogs is used to save the log of a pipeline stage.
	ReportStageLogs(context.Context, *ReportStageLogsRequest) (*ReportStageLogsResponse, error)
	// ReportStageLogsFromLastCheckpoint is used to save the full logs from the most recently saved point.
	ReportStageLogsFromLastCheckpoint(context.Context, *ReportStageLogsFromLastCheckpointRequest) (*ReportStageLogsFromLastCheckpointResponse, error)
	// GetStageMetadata gets one metadata value of the given stage.
	GetStageMetadata(context.Context, *GetStageMetadataRequest) (*GetStageMetadataResponse, error)
	// PutStageMetadata puts one metadata of the given stage.
	PutStageMetadata(context.Context, *PutStageMetadataRequest) (*PutStageMetadataResponse, error)
	// PutStageMetadataMulti puts the metadata pairs of the given stage.
	PutStageMetadataMulti(context.Context, *PutStageMetadataMultiRequest) (*PutStageMetadataMultiResponse, error)
	// GetDeploymentMetadata gets one metadata value of the given deployment.
	GetDeploymentPluginMetadata(context.Context, *GetDeploymentPluginMetadataRequest) (*GetDeploymentPluginMetadataResponse, error)
	// PutDeploymentMetadata puts one metadata of the given deployment.
	PutDeploymentPluginMetadata(context.Context, *PutDeploymentPluginMetadataRequest) (*PutDeploymentPluginMetadataResponse, error)
	// PutDeploymentMetadataMulti puts the metadata pairs of the given deployment.
	PutDeploymentPluginMetadataMulti(context.Context, *PutDeploymentPluginMetadataMultiRequest) (*PutDeploymentPluginMetadataMultiResponse, error)
	// GetDeploymentSharedMetadata gets one shared metadata value of the given deployment.
	// The shared metadata is read-only in plugins for safety since it is shared among piped and plugins.
	GetDeploymentSharedMetadata(context.Context, *GetDeploymentSharedMetadataRequest) (*GetDeploymentSharedMetadataResponse, error)
	// ListStageCommands lists unhandled commands of the given stage and type.
	ListStageCommands(context.Context, *ListStageCommandsRequest) (*ListStageCommandsResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) InstallTool(context.Context, *InstallToolRequest) (*InstallToolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallTool not implemented")
}
func (UnimplementedPluginServiceServer) ReportStageLogs(context.Context, *ReportStageLogsRequest) (*ReportStageLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStageLogs not implemented")
}
func (UnimplementedPluginServiceServer) ReportStageLogsFromLastCheckpoint(context.Context, *ReportStageLogsFromLastCheckpointRequest) (*ReportStageLogsFromLastCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportStageLogsFromLastCheckpoint not implemented")
}
func (UnimplementedPluginServiceServer) GetStageMetadata(context.Context, *GetStageMetadataRequest) (*GetStageMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStageMetadata not implemented")
}
func (UnimplementedPluginServiceServer) PutStageMetadata(context.Context, *PutStageMetadataRequest) (*PutStageMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutStageMetadata not implemented")
}
func (UnimplementedPluginServiceServer) PutStageMetadataMulti(context.Context, *PutStageMetadataMultiRequest) (*PutStageMetadataMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutStageMetadataMulti not implemented")
}
func (UnimplementedPluginServiceServer) GetDeploymentPluginMetadata(context.Context, *GetDeploymentPluginMetadataRequest) (*GetDeploymentPluginMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentPluginMetadata not implemented")
}
func (UnimplementedPluginServiceServer) PutDeploymentPluginMetadata(context.Context, *PutDeploymentPluginMetadataRequest) (*PutDeploymentPluginMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDeploymentPluginMetadata not implemented")
}
func (UnimplementedPluginServiceServer) PutDeploymentPluginMetadataMulti(context.Context, *PutDeploymentPluginMetadataMultiRequest) (*PutDeploymentPluginMetadataMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDeploymentPluginMetadataMulti not implemented")
}
func (UnimplementedPluginServiceServer) GetDeploymentSharedMetadata(context.Context, *GetDeploymentSharedMetadataRequest) (*GetDeploymentSharedMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentSharedMetadata not implemented")
}
func (UnimplementedPluginServiceServer) ListStageCommands(context.Context, *ListStageCommandsRequest) (*ListStageCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStageCommands not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_InstallTool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallToolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).InstallTool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/InstallTool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).InstallTool(ctx, req.(*InstallToolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ReportStageLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStageLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ReportStageLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/ReportStageLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ReportStageLogs(ctx, req.(*ReportStageLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ReportStageLogsFromLastCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportStageLogsFromLastCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ReportStageLogsFromLastCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/ReportStageLogsFromLastCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ReportStageLogsFromLastCheckpoint(ctx, req.(*ReportStageLogsFromLastCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetStageMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStageMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetStageMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/GetStageMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetStageMetadata(ctx, req.(*GetStageMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_PutStageMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStageMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).PutStageMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/PutStageMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).PutStageMetadata(ctx, req.(*PutStageMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_PutStageMetadataMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStageMetadataMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).PutStageMetadataMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/PutStageMetadataMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).PutStageMetadataMulti(ctx, req.(*PutStageMetadataMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetDeploymentPluginMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentPluginMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetDeploymentPluginMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/GetDeploymentPluginMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetDeploymentPluginMetadata(ctx, req.(*GetDeploymentPluginMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_PutDeploymentPluginMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDeploymentPluginMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).PutDeploymentPluginMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/PutDeploymentPluginMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).PutDeploymentPluginMetadata(ctx, req.(*PutDeploymentPluginMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_PutDeploymentPluginMetadataMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDeploymentPluginMetadataMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).PutDeploymentPluginMetadataMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/PutDeploymentPluginMetadataMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).PutDeploymentPluginMetadataMulti(ctx, req.(*PutDeploymentPluginMetadataMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetDeploymentSharedMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentSharedMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetDeploymentSharedMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/GetDeploymentSharedMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetDeploymentSharedMetadata(ctx, req.(*GetDeploymentSharedMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ListStageCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStageCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ListStageCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/ListStageCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ListStageCommands(ctx, req.(*ListStageCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.piped.service.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallTool",
			Handler:    _PluginService_InstallTool_Handler,
		},
		{
			MethodName: "ReportStageLogs",
			Handler:    _PluginService_ReportStageLogs_Handler,
		},
		{
			MethodName: "ReportStageLogsFromLastCheckpoint",
			Handler:    _PluginService_ReportStageLogsFromLastCheckpoint_Handler,
		},
		{
			MethodName: "GetStageMetadata",
			Handler:    _PluginService_GetStageMetadata_Handler,
		},
		{
			MethodName: "PutStageMetadata",
			Handler:    _PluginService_PutStageMetadata_Handler,
		},
		{
			MethodName: "PutStageMetadataMulti",
			Handler:    _PluginService_PutStageMetadataMulti_Handler,
		},
		{
			MethodName: "GetDeploymentPluginMetadata",
			Handler:    _PluginService_GetDeploymentPluginMetadata_Handler,
		},
		{
			MethodName: "PutDeploymentPluginMetadata",
			Handler:    _PluginService_PutDeploymentPluginMetadata_Handler,
		},
		{
			MethodName: "PutDeploymentPluginMetadataMulti",
			Handler:    _PluginService_PutDeploymentPluginMetadataMulti_Handler,
		},
		{
			MethodName: "GetDeploymentSharedMetadata",
			Handler:    _PluginService_GetDeploymentSharedMetadata_Handler,
		},
		{
			MethodName: "ListStageCommands",
			Handler:    _PluginService_ListStageCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/plugin/pipedservice/service.proto",
}
