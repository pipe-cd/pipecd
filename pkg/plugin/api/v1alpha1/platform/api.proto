// Copyright 2024 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package grpc.plugin.platformapi.v1alpha1;
option go_package = "github.com/pipe-cd/pipecd/pkg/plugin/api/v1alpha1/platform";

import "validate/validate.proto";
import "pkg/model/common.proto";
import "pkg/model/deployment.proto";

// PlannerService defines the public APIs for remote planners.
service PlannerService {
    // DetermineVersions determines which versions of the artifacts will be used for the given deployment.
    rpc DetermineVersions(DetermineVersionsRequest) returns (DetermineVersionsResponse) {}
    // DetermineStrategy determines which strategy should be used for the given deployment.
    rpc DetermineStrategy(DetermineStrategyRequest) returns (DetermineStrategyResponse) {}
    // QuickSyncPlan builds plan for the given deployment using quick sync strategy.
    rpc QuickSyncPlan(QuickSyncPlanRequest) returns (QuickSyncPlanResponse) {}
    // PipelineSyncPlan builds plan for the given deployment using pipeline sync strategy.
    rpc PipelineSyncPlan(PipelineSyncPlanRequest) returns (PipelineSyncPlanResponse) {}
}

message DetermineVersionsRequest {
    PlanPluginInput input = 1 [(validate.rules).message.required = true];
}

message DetermineVersionsResponse {
    // The determined versions of the artifacts.
    repeated model.ArtifactVersion versions = 1;
}

message DetermineStrategyRequest {
    PlanPluginInput input = 1 [(validate.rules).message.required = true];
}

message DetermineStrategyResponse {
    // The determined sync strategy.
    model.SyncStrategy sync_strategy = 1;
    // Text summary of the determined strategy.
    string summary = 2;
}

message QuickSyncPlanRequest {
    PlanPluginInput input = 1 [(validate.rules).message.required = true];
}

message QuickSyncPlanResponse {
    // Stages of deployment pipeline under quick sync strategy.
    repeated model.PipelineStage stages = 1;
}

message PipelineSyncPlanRequest {
    PlanPluginInput input = 1 [(validate.rules).message.required = true];
}

message PipelineSyncPlanResponse {
    // Stages of deployment pipeline under pipeline sync strategy.
    repeated model.PipelineStage stages = 1;
}

message PlanPluginInput {
    // The deployment to build a plan for.
    model.Deployment deployment = 1 [(validate.rules).message.required = true];
    // The configuration of plugin that handles the deployment.
    bytes plugin_config = 2;
    // The source of the deployment.
    DeploySource deploy_source = 3;
    // The source of the last successful deployment.
    DeploySource last_successful_deploy_source = 4;
}

message DeploySource {
    // The repository directory to deploy for.
    string repo_dir = 1;
    // The applicaiton directory to deploy for.
    string app_dir = 2;
    // The commit hash of the deployment source.
    string revision = 3;
    // The application configuration of the deployment.
    ApplicationConfig config = 4;
}

message ApplicationConfig {
    // The kind of the application.
    string kind = 1 ;
    // The version of the API.
    string api_version = 2;
    // The application specification of the deployment.
    // We store this spec in bytes because we don't want to define the structure of the plugin-specific config.
    // The serialization format is JSON.
    bytes spec = 3;
}

service ExecutorService {
    // Execute executes the given stage of the deployment plan.
    rpc ExecuteStage(ExecuteStageRequest) returns (stream ExecuteStageResponse) {}
}

message ExecuteStageRequest {
    model.PipelineStage stage = 1 [(validate.rules).message.required = true];
    bytes stage_config = 2 [(validate.rules).bytes.min_len = 1];
    bytes piped_config = 3 [(validate.rules).bytes.min_len = 1];
    model.Deployment deployment = 4 [(validate.rules).message.required = true];
}

message ExecuteStageResponse {
    model.StageStatus status = 1;
    string log = 2;
}
