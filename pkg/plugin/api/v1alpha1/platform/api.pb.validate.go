// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/plugin/api/v1alpha1/platform/api.proto

package platform

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	model "github.com/pipe-cd/pipecd/pkg/model"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = model.SyncStrategy(0)
)

// Validate checks the field values on DetermineVersionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetermineVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetermineVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetermineVersionsRequestMultiError, or nil if none found.
func (m *DetermineVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DetermineVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInput() == nil {
		err := DetermineVersionsRequestValidationError{
			field:  "Input",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetermineVersionsRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetermineVersionsRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetermineVersionsRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DetermineVersionsRequestMultiError(errors)
	}

	return nil
}

// DetermineVersionsRequestMultiError is an error wrapping multiple validation
// errors returned by DetermineVersionsRequest.ValidateAll() if the designated
// constraints aren't met.
type DetermineVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetermineVersionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetermineVersionsRequestMultiError) AllErrors() []error { return m }

// DetermineVersionsRequestValidationError is the validation error returned by
// DetermineVersionsRequest.Validate if the designated constraints aren't met.
type DetermineVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetermineVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetermineVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetermineVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetermineVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetermineVersionsRequestValidationError) ErrorName() string {
	return "DetermineVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DetermineVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetermineVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetermineVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetermineVersionsRequestValidationError{}

// Validate checks the field values on DetermineVersionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetermineVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetermineVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetermineVersionsResponseMultiError, or nil if none found.
func (m *DetermineVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DetermineVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DetermineVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DetermineVersionsResponseValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DetermineVersionsResponseValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DetermineVersionsResponseMultiError(errors)
	}

	return nil
}

// DetermineVersionsResponseMultiError is an error wrapping multiple validation
// errors returned by DetermineVersionsResponse.ValidateAll() if the
// designated constraints aren't met.
type DetermineVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetermineVersionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetermineVersionsResponseMultiError) AllErrors() []error { return m }

// DetermineVersionsResponseValidationError is the validation error returned by
// DetermineVersionsResponse.Validate if the designated constraints aren't met.
type DetermineVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetermineVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetermineVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetermineVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetermineVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetermineVersionsResponseValidationError) ErrorName() string {
	return "DetermineVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DetermineVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetermineVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetermineVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetermineVersionsResponseValidationError{}

// Validate checks the field values on DetermineStrategyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetermineStrategyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetermineStrategyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetermineStrategyRequestMultiError, or nil if none found.
func (m *DetermineStrategyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DetermineStrategyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInput() == nil {
		err := DetermineStrategyRequestValidationError{
			field:  "Input",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DetermineStrategyRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DetermineStrategyRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DetermineStrategyRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DetermineStrategyRequestMultiError(errors)
	}

	return nil
}

// DetermineStrategyRequestMultiError is an error wrapping multiple validation
// errors returned by DetermineStrategyRequest.ValidateAll() if the designated
// constraints aren't met.
type DetermineStrategyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetermineStrategyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetermineStrategyRequestMultiError) AllErrors() []error { return m }

// DetermineStrategyRequestValidationError is the validation error returned by
// DetermineStrategyRequest.Validate if the designated constraints aren't met.
type DetermineStrategyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetermineStrategyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetermineStrategyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetermineStrategyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetermineStrategyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetermineStrategyRequestValidationError) ErrorName() string {
	return "DetermineStrategyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DetermineStrategyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetermineStrategyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetermineStrategyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetermineStrategyRequestValidationError{}

// Validate checks the field values on DetermineStrategyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DetermineStrategyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetermineStrategyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DetermineStrategyResponseMultiError, or nil if none found.
func (m *DetermineStrategyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DetermineStrategyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SyncStrategy

	// no validation rules for Summary

	if len(errors) > 0 {
		return DetermineStrategyResponseMultiError(errors)
	}

	return nil
}

// DetermineStrategyResponseMultiError is an error wrapping multiple validation
// errors returned by DetermineStrategyResponse.ValidateAll() if the
// designated constraints aren't met.
type DetermineStrategyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetermineStrategyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetermineStrategyResponseMultiError) AllErrors() []error { return m }

// DetermineStrategyResponseValidationError is the validation error returned by
// DetermineStrategyResponse.Validate if the designated constraints aren't met.
type DetermineStrategyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetermineStrategyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetermineStrategyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetermineStrategyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetermineStrategyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetermineStrategyResponseValidationError) ErrorName() string {
	return "DetermineStrategyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DetermineStrategyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetermineStrategyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetermineStrategyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetermineStrategyResponseValidationError{}

// Validate checks the field values on QuickSyncPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuickSyncPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuickSyncPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuickSyncPlanRequestMultiError, or nil if none found.
func (m *QuickSyncPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuickSyncPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInput() == nil {
		err := QuickSyncPlanRequestValidationError{
			field:  "Input",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuickSyncPlanRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuickSyncPlanRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuickSyncPlanRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuickSyncPlanRequestMultiError(errors)
	}

	return nil
}

// QuickSyncPlanRequestMultiError is an error wrapping multiple validation
// errors returned by QuickSyncPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type QuickSyncPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuickSyncPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuickSyncPlanRequestMultiError) AllErrors() []error { return m }

// QuickSyncPlanRequestValidationError is the validation error returned by
// QuickSyncPlanRequest.Validate if the designated constraints aren't met.
type QuickSyncPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuickSyncPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuickSyncPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuickSyncPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuickSyncPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuickSyncPlanRequestValidationError) ErrorName() string {
	return "QuickSyncPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuickSyncPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuickSyncPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuickSyncPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuickSyncPlanRequestValidationError{}

// Validate checks the field values on QuickSyncPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuickSyncPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuickSyncPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuickSyncPlanResponseMultiError, or nil if none found.
func (m *QuickSyncPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuickSyncPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuickSyncPlanResponseValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuickSyncPlanResponseValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuickSyncPlanResponseValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuickSyncPlanResponseMultiError(errors)
	}

	return nil
}

// QuickSyncPlanResponseMultiError is an error wrapping multiple validation
// errors returned by QuickSyncPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type QuickSyncPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuickSyncPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuickSyncPlanResponseMultiError) AllErrors() []error { return m }

// QuickSyncPlanResponseValidationError is the validation error returned by
// QuickSyncPlanResponse.Validate if the designated constraints aren't met.
type QuickSyncPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuickSyncPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuickSyncPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuickSyncPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuickSyncPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuickSyncPlanResponseValidationError) ErrorName() string {
	return "QuickSyncPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuickSyncPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuickSyncPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuickSyncPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuickSyncPlanResponseValidationError{}

// Validate checks the field values on PipelineSyncPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSyncPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSyncPlanRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSyncPlanRequestMultiError, or nil if none found.
func (m *PipelineSyncPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSyncPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetInput() == nil {
		err := PipelineSyncPlanRequestValidationError{
			field:  "Input",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetInput()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipelineSyncPlanRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipelineSyncPlanRequestValidationError{
					field:  "Input",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipelineSyncPlanRequestValidationError{
				field:  "Input",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PipelineSyncPlanRequestMultiError(errors)
	}

	return nil
}

// PipelineSyncPlanRequestMultiError is an error wrapping multiple validation
// errors returned by PipelineSyncPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type PipelineSyncPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSyncPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSyncPlanRequestMultiError) AllErrors() []error { return m }

// PipelineSyncPlanRequestValidationError is the validation error returned by
// PipelineSyncPlanRequest.Validate if the designated constraints aren't met.
type PipelineSyncPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSyncPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSyncPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSyncPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSyncPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSyncPlanRequestValidationError) ErrorName() string {
	return "PipelineSyncPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSyncPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSyncPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSyncPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSyncPlanRequestValidationError{}

// Validate checks the field values on PipelineSyncPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PipelineSyncPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipelineSyncPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PipelineSyncPlanResponseMultiError, or nil if none found.
func (m *PipelineSyncPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PipelineSyncPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipelineSyncPlanResponseValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipelineSyncPlanResponseValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipelineSyncPlanResponseValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PipelineSyncPlanResponseMultiError(errors)
	}

	return nil
}

// PipelineSyncPlanResponseMultiError is an error wrapping multiple validation
// errors returned by PipelineSyncPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type PipelineSyncPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipelineSyncPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipelineSyncPlanResponseMultiError) AllErrors() []error { return m }

// PipelineSyncPlanResponseValidationError is the validation error returned by
// PipelineSyncPlanResponse.Validate if the designated constraints aren't met.
type PipelineSyncPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipelineSyncPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipelineSyncPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipelineSyncPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipelineSyncPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipelineSyncPlanResponseValidationError) ErrorName() string {
	return "PipelineSyncPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PipelineSyncPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipelineSyncPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipelineSyncPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipelineSyncPlanResponseValidationError{}

// Validate checks the field values on PlanPluginInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PlanPluginInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlanPluginInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlanPluginInputMultiError, or nil if none found.
func (m *PlanPluginInput) ValidateAll() error {
	return m.validate(true)
}

func (m *PlanPluginInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := PlanPluginInputValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PlanPluginInputValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PlanPluginInputValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PlanPluginInputValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSourceRemoteUrl()) < 1 {
		err := PlanPluginInputValidationError{
			field:  "SourceRemoteUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LastSuccessfulCommitHash

	// no validation rules for LastSuccessfulConfigFileName

	// no validation rules for PluginConfig

	if len(errors) > 0 {
		return PlanPluginInputMultiError(errors)
	}

	return nil
}

// PlanPluginInputMultiError is an error wrapping multiple validation errors
// returned by PlanPluginInput.ValidateAll() if the designated constraints
// aren't met.
type PlanPluginInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlanPluginInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlanPluginInputMultiError) AllErrors() []error { return m }

// PlanPluginInputValidationError is the validation error returned by
// PlanPluginInput.Validate if the designated constraints aren't met.
type PlanPluginInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlanPluginInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlanPluginInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlanPluginInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlanPluginInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlanPluginInputValidationError) ErrorName() string { return "PlanPluginInputValidationError" }

// Error satisfies the builtin error interface
func (e PlanPluginInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlanPluginInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlanPluginInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlanPluginInputValidationError{}

// Validate checks the field values on ExecuteStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteStageRequestMultiError, or nil if none found.
func (m *ExecuteStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStage() == nil {
		err := ExecuteStageRequestValidationError{
			field:  "Stage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteStageRequestValidationError{
					field:  "Stage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteStageRequestValidationError{
					field:  "Stage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteStageRequestValidationError{
				field:  "Stage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetStageConfig()) < 1 {
		err := ExecuteStageRequestValidationError{
			field:  "StageConfig",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPipedConfig()) < 1 {
		err := ExecuteStageRequestValidationError{
			field:  "PipedConfig",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeployment() == nil {
		err := ExecuteStageRequestValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteStageRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteStageRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteStageRequestValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecuteStageRequestMultiError(errors)
	}

	return nil
}

// ExecuteStageRequestMultiError is an error wrapping multiple validation
// errors returned by ExecuteStageRequest.ValidateAll() if the designated
// constraints aren't met.
type ExecuteStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteStageRequestMultiError) AllErrors() []error { return m }

// ExecuteStageRequestValidationError is the validation error returned by
// ExecuteStageRequest.Validate if the designated constraints aren't met.
type ExecuteStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteStageRequestValidationError) ErrorName() string {
	return "ExecuteStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteStageRequestValidationError{}

// Validate checks the field values on ExecuteStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteStageResponseMultiError, or nil if none found.
func (m *ExecuteStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Log

	if len(errors) > 0 {
		return ExecuteStageResponseMultiError(errors)
	}

	return nil
}

// ExecuteStageResponseMultiError is an error wrapping multiple validation
// errors returned by ExecuteStageResponse.ValidateAll() if the designated
// constraints aren't met.
type ExecuteStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteStageResponseMultiError) AllErrors() []error { return m }

// ExecuteStageResponseValidationError is the validation error returned by
// ExecuteStageResponse.Validate if the designated constraints aren't met.
type ExecuteStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteStageResponseValidationError) ErrorName() string {
	return "ExecuteStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteStageResponseValidationError{}
