// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/plugin/api/v1alpha1/platform/api.proto

package platform

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	model "github.com/pipe-cd/pipecd/pkg/model"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = model.SyncStrategy(0)
)

// Validate checks the field values on BuildPlanRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BuildPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildPlanRequestMultiError, or nil if none found.
func (m *BuildPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetWorkingDir()) < 1 {
		err := BuildPlanRequestValidationError{
			field:  "WorkingDir",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LastSuccessfulCommitHash

	// no validation rules for LastSuccessfulConfigFileName

	if len(m.GetPipedConfig()) < 1 {
		err := BuildPlanRequestValidationError{
			field:  "PipedConfig",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeployment() == nil {
		err := BuildPlanRequestValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildPlanRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildPlanRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildPlanRequestValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BuildPlanRequestMultiError(errors)
	}

	return nil
}

// BuildPlanRequestMultiError is an error wrapping multiple validation errors
// returned by BuildPlanRequest.ValidateAll() if the designated constraints
// aren't met.
type BuildPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildPlanRequestMultiError) AllErrors() []error { return m }

// BuildPlanRequestValidationError is the validation error returned by
// BuildPlanRequest.Validate if the designated constraints aren't met.
type BuildPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildPlanRequestValidationError) ErrorName() string { return "BuildPlanRequestValidationError" }

// Error satisfies the builtin error interface
func (e BuildPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildPlanRequestValidationError{}

// Validate checks the field values on BuildPlanResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BuildPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildPlanResponseMultiError, or nil if none found.
func (m *BuildPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildPlanResponseValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildPlanResponseValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildPlanResponseValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BuildPlanResponseMultiError(errors)
	}

	return nil
}

// BuildPlanResponseMultiError is an error wrapping multiple validation errors
// returned by BuildPlanResponse.ValidateAll() if the designated constraints
// aren't met.
type BuildPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildPlanResponseMultiError) AllErrors() []error { return m }

// BuildPlanResponseValidationError is the validation error returned by
// BuildPlanResponse.Validate if the designated constraints aren't met.
type BuildPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildPlanResponseValidationError) ErrorName() string {
	return "BuildPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuildPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildPlanResponseValidationError{}

// Validate checks the field values on DeploymentPlan with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeploymentPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeploymentPlan with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeploymentPlanMultiError,
// or nil if none found.
func (m *DeploymentPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *DeploymentPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SyncStrategy

	// no validation rules for Summary

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeploymentPlanValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeploymentPlanValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeploymentPlanValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeploymentPlanValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeploymentPlanValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeploymentPlanValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeploymentPlanMultiError(errors)
	}

	return nil
}

// DeploymentPlanMultiError is an error wrapping multiple validation errors
// returned by DeploymentPlan.ValidateAll() if the designated constraints
// aren't met.
type DeploymentPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentPlanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentPlanMultiError) AllErrors() []error { return m }

// DeploymentPlanValidationError is the validation error returned by
// DeploymentPlan.Validate if the designated constraints aren't met.
type DeploymentPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentPlanValidationError) ErrorName() string { return "DeploymentPlanValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeploymentPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentPlanValidationError{}

// Validate checks the field values on ExecuteStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteStageRequestMultiError, or nil if none found.
func (m *ExecuteStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStage() == nil {
		err := ExecuteStageRequestValidationError{
			field:  "Stage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteStageRequestValidationError{
					field:  "Stage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteStageRequestValidationError{
					field:  "Stage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteStageRequestValidationError{
				field:  "Stage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetStageConfig()) < 1 {
		err := ExecuteStageRequestValidationError{
			field:  "StageConfig",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPipedConfig()) < 1 {
		err := ExecuteStageRequestValidationError{
			field:  "PipedConfig",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeployment() == nil {
		err := ExecuteStageRequestValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecuteStageRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecuteStageRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecuteStageRequestValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecuteStageRequestMultiError(errors)
	}

	return nil
}

// ExecuteStageRequestMultiError is an error wrapping multiple validation
// errors returned by ExecuteStageRequest.ValidateAll() if the designated
// constraints aren't met.
type ExecuteStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteStageRequestMultiError) AllErrors() []error { return m }

// ExecuteStageRequestValidationError is the validation error returned by
// ExecuteStageRequest.Validate if the designated constraints aren't met.
type ExecuteStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteStageRequestValidationError) ErrorName() string {
	return "ExecuteStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteStageRequestValidationError{}

// Validate checks the field values on ExecuteStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteStageResponseMultiError, or nil if none found.
func (m *ExecuteStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Log

	if len(errors) > 0 {
		return ExecuteStageResponseMultiError(errors)
	}

	return nil
}

// ExecuteStageResponseMultiError is an error wrapping multiple validation
// errors returned by ExecuteStageResponse.ValidateAll() if the designated
// constraints aren't met.
type ExecuteStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteStageResponseMultiError) AllErrors() []error { return m }

// ExecuteStageResponseValidationError is the validation error returned by
// ExecuteStageResponse.Validate if the designated constraints aren't met.
type ExecuteStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteStageResponseValidationError) ErrorName() string {
	return "ExecuteStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteStageResponseValidationError{}
