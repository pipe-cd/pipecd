// Copyright 2024 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package grpc.plugin.deploymentapi.v1alpha1;
option go_package = "github.com/pipe-cd/pipecd/pkg/plugin/api/v1alpha1/deployment";

import "validate/validate.proto";
import "pkg/model/common.proto";
import "pkg/model/deployment.proto";

// PlannerService defines the public APIs for remote planners.
service DeploymentService {
    // FetchDefinedStages fetches the defined stages' name which are supported by the plugin.
    rpc FetchDefinedStages(FetchDefinedStagesRequest) returns (FetchDefinedStagesResponse) {}
    // DetermineVersions determines which versions of the artifacts will be used for the given deployment.
    rpc DetermineVersions(DetermineVersionsRequest) returns (DetermineVersionsResponse) {}
    // DetermineStrategy determines which strategy should be used for the given deployment.
    rpc DetermineStrategy(DetermineStrategyRequest) returns (DetermineStrategyResponse) {}
    // BuildPipelineSyncStages builds the deployment pipeline stages.
    rpc BuildPipelineSyncStages(BuildPipelineSyncStagesRequest) returns (BuildPipelineSyncStagesResponse) {}
    // BuildQuickSyncStages builds the deployment quick sync stages.
    rpc BuildQuickSyncStages(BuildQuickSyncStagesRequest) returns (BuildQuickSyncStagesResponse) {}

    // ExecuteStage executes the given stage.
    rpc ExecuteStage(ExecuteStageRequest) returns (ExecuteStageResponse) {}
}

message DetermineVersionsRequest {
    PlanPluginInput input = 1 [(validate.rules).message.required = true];
}

message DetermineVersionsResponse {
    // The determined versions of the artifacts.
    repeated model.ArtifactVersion versions = 1;
}

message DetermineStrategyRequest {
    PlanPluginInput input = 1 [(validate.rules).message.required = true];
}

message DetermineStrategyResponse {
    // The determined sync strategy.
    model.SyncStrategy sync_strategy = 1;
    // Text summary of the determined strategy.
    string summary = 2;
}

message BuildPipelineSyncStagesRequest {
    message StageConfig {
        // The stage identifier.
        // If it's not set, plugin should set it under pattern:
        // `pluginname-stage-index`.
        string id = 1;
        // The stage name.
        string name = 2 [(validate.rules).string.min_len = 1];
        // The stage description.
        string desc = 3;
        // The stage timeout.
        // It should be a duration string (aka. 1m/10s/...).
        string timeout = 4;
        // The stage index from the stage list in configuration.
        int32 index = 5 [(validate.rules).int32.gte = 0];
        // The configuration of the stage.
        bytes config = 6;
    }
    bool rollback = 1;
    repeated StageConfig stages = 2;
}

message BuildPipelineSyncStagesResponse {
    // The built stages of the deployment pipeline.
    repeated model.PipelineStage stages = 1;
}

message BuildQuickSyncStagesRequest {
    bool rollback = 1;
}

message BuildQuickSyncStagesResponse {
    // The built stages of the deployment pipeline.
    repeated model.PipelineStage stages = 1;
}

message FetchDefinedStagesRequest {}

message FetchDefinedStagesResponse {
    // The defined stages supported by the plugin.
    repeated string stages = 1;
}

message ExecuteStageRequest {
    ExecutePluginInput input = 1 [(validate.rules).message.required = true];
}

message ExecuteStageResponse {
    // The result of the stage execution.
    model.StageStatus status = 1;
    // The detailed message of the stage execution.
    string message = 2;
}

message PlanPluginInput {
    // The deployment to build a plan for.
    model.Deployment deployment = 1 [(validate.rules).message.required = true];
    // The configuration of plugin that handles the deployment.
    bytes plugin_config = 2;

    // The running deployment source.
    DeploymentSource running_deployment_source = 3;
    // The target deployment source.
    DeploymentSource target_deployment_source = 4;
}

message ExecutePluginInput {
    // The deployment to execute the stage for.
    model.Deployment deployment = 1 [(validate.rules).message.required = true];
    // The stage to execute.
    model.PipelineStage stage = 2 [(validate.rules).message.required = true];

    // The configuration of plugin that handles the deployment.
    bytes plugin_config = 3;

    // The running deployment source.
    DeploymentSource running_deployment_source = 4;
    // The target deployment source.
    DeploymentSource target_deployment_source = 5;
}

message DeploymentSource {
  // The application directory where the source code is located.
  string application_directory = 1;
  // The git commit revision of the source code.
  string revision = 2;
  // The configuration of the application which is specific for plugins.
  bytes application_config = 3;
  // The filename of the application configuration file.
  // The plugins can use this to avoid mistakenly reading this file as a manifest.
  string application_config_filename = 4;
}
