// Copyright 2024 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package grpc.plugin.deploymentapi.v1alpha1;
option go_package = "github.com/pipe-cd/pipecd/pkg/plugin/api/v1alpha1/deployment";

import "validate/validate.proto";
import "pkg/model/common.proto";
import "pkg/model/deployment.proto";

// PlannerService defines the public APIs for remote planners.
service DeploymentService {
    // FetchDefinedStages fetches the defined stages' name which are supported by the plugin.
    rpc FetchDefinedStages(FetchDefinedStagesRequest) returns (FetchDefinedStagesResponse) {}
    // DetermineVersions determines which versions of the artifacts will be used for the given deployment.
    rpc DetermineVersions(DetermineVersionsRequest) returns (DetermineVersionsResponse) {}
    // DetermineStrategy determines which strategy should be used for the given deployment.
    rpc DetermineStrategy(DetermineStrategyRequest) returns (DetermineStrategyResponse) {}
    // BuildStages builds the deployment pipeline stages.
    rpc BuildStages(BuildStagesRequest) returns (BuildStagesResponse) {}
}

message DetermineVersionsRequest {
    PlanPluginInput input = 1 [(validate.rules).message.required = true];
}

message DetermineVersionsResponse {
    // The determined versions of the artifacts.
    repeated model.ArtifactVersion versions = 1;
}

message DetermineStrategyRequest {
    PlanPluginInput input = 1 [(validate.rules).message.required = true];
}

message DetermineStrategyResponse {
    // The determined sync strategy.
    model.SyncStrategy sync_strategy = 1;
    // Text summary of the determined strategy.
    string summary = 2;
}

message BuildStagesRequest {
    message StageConfig {
        // The stage name.
        string name = 1;
        // The configuration of the stage.
        bytes config = 2;
    }
    repeated StageConfig stages = 1;
}

message BuildStagesResponse {
    // The built stages of the deployment pipeline.
    repeated model.PipelineStage stages = 1;
}

message FetchDefinedStagesRequest {}

message FetchDefinedStagesResponse {
    // The defined stages supported by the plugin.
    repeated string stages = 1;
}

message PlanPluginInput {
    // The deployment to build a plan for.
    model.Deployment deployment = 1 [(validate.rules).message.required = true];
    // The remote URL of the deployment source, where plugin can find the deployments sources (manifests).
    string source_remote_url = 2 [(validate.rules).string.min_len = 1];
    // Last successful commit hash and config file name.
    // Use to build deployment source object for last successful deployment.
    string last_successful_commit_hash = 3;
    string last_successful_config_file_name = 4;
    // The configuration of plugin that handles the deployment.
    bytes plugin_config = 5;
}
