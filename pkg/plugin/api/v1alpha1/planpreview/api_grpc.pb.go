// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/plugin/api/v1alpha1/planpreview/api.proto

package planpreview

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlanPreviewServiceClient is the client API for PlanPreviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanPreviewServiceClient interface {
	// GetPlanPreview gets the plan preview result for the given application.
	// The plugin will compare the target deployment source with the actual states of the deploy targets.
	GetPlanPreview(ctx context.Context, in *GetPlanPreviewRequest, opts ...grpc.CallOption) (*GetPlanPreviewResponse, error)
}

type planPreviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanPreviewServiceClient(cc grpc.ClientConnInterface) PlanPreviewServiceClient {
	return &planPreviewServiceClient{cc}
}

func (c *planPreviewServiceClient) GetPlanPreview(ctx context.Context, in *GetPlanPreviewRequest, opts ...grpc.CallOption) (*GetPlanPreviewResponse, error) {
	out := new(GetPlanPreviewResponse)
	err := c.cc.Invoke(ctx, "/grpc.plugin.planpreviewapi.v1alpha1.PlanPreviewService/GetPlanPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanPreviewServiceServer is the server API for PlanPreviewService service.
// All implementations must embed UnimplementedPlanPreviewServiceServer
// for forward compatibility
type PlanPreviewServiceServer interface {
	// GetPlanPreview gets the plan preview result for the given application.
	// The plugin will compare the target deployment source with the actual states of the deploy targets.
	GetPlanPreview(context.Context, *GetPlanPreviewRequest) (*GetPlanPreviewResponse, error)
	mustEmbedUnimplementedPlanPreviewServiceServer()
}

// UnimplementedPlanPreviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlanPreviewServiceServer struct {
}

func (UnimplementedPlanPreviewServiceServer) GetPlanPreview(context.Context, *GetPlanPreviewRequest) (*GetPlanPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanPreview not implemented")
}
func (UnimplementedPlanPreviewServiceServer) mustEmbedUnimplementedPlanPreviewServiceServer() {}

// UnsafePlanPreviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanPreviewServiceServer will
// result in compilation errors.
type UnsafePlanPreviewServiceServer interface {
	mustEmbedUnimplementedPlanPreviewServiceServer()
}

func RegisterPlanPreviewServiceServer(s grpc.ServiceRegistrar, srv PlanPreviewServiceServer) {
	s.RegisterService(&PlanPreviewService_ServiceDesc, srv)
}

func _PlanPreviewService_GetPlanPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanPreviewServiceServer).GetPlanPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.plugin.planpreviewapi.v1alpha1.PlanPreviewService/GetPlanPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanPreviewServiceServer).GetPlanPreview(ctx, req.(*GetPlanPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanPreviewService_ServiceDesc is the grpc.ServiceDesc for PlanPreviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanPreviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.plugin.planpreviewapi.v1alpha1.PlanPreviewService",
	HandlerType: (*PlanPreviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlanPreview",
			Handler:    _PlanPreviewService_GetPlanPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/plugin/api/v1alpha1/planpreview/api.proto",
}
