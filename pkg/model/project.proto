// Copyright 2020 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package pipe.model;
option go_package = "github.com/pipe-cd/pipe/pkg/model";

import "validate/validate.proto";

// Project contains needed data for a PipeCD project.
// Each project can have multiple pipeds, enviroments, applications.
// And each project can be controlled by a group of admin users.
message Project {
    // The configured unique identifier.
    string id = 1 [(validate.rules).string.min_len = 1];
    // The additional description about the project.
    string desc = 2;

    // Static admin user can be logged in by username and password.
    // When a project is initialized (by using CLI or internal admin web), its static admin user will be created too.
    // After that the project admin should enable the SSO and disable or change the password of the static admin.
    ProjectStaticUser static_admin = 3 [(validate.rules).message.required = true];
    // Whether the static admin is disabled or not.
    bool static_admin_disabled = 4;
    // Single sign-on configuration for this project.
    ProjectSSOConfig sso = 5;
    // RBAC Configuration for this project.
    ProjectRBACConfig rbac = 6;
    // Shared SSO configuration name for this project.
    // It will be enabled when this parameter has no empty value.
    string shared_sso_name = 7;

    // Enable this field will allow users not belonging
    // to any registered teams to log in with Viewer role.
    bool allow_stray_as_viewer = 8;

    // Unix time when the project is created.
    int64 created_at = 14 [(validate.rules).int64.gt = 0];
    // Unix time of the last time when the project is updated.
    int64 updated_at = 15 [(validate.rules).int64.gt = 0];
}

// ProjectStaticUser represents a local user who can logged in to the project by username and password.
message ProjectStaticUser {
    // The name of user.
    string username = 1 [(validate.rules).string.min_len = 1];
    // The hash value of the password.
    string password_hash = 2 [(validate.rules).string.min_len = 6];
}

message ProjectSSOConfig {
    enum Provider {
        GITHUB = 0;
        // This was deprecated.
        // For GitHub Enterprise, use GITHUB provider and specify the baseUrl in the config.
        GITHUB_ENTERPRISE = 1 [deprecated = true];
        GOOGLE = 2;
    }

    message GitHub {
        // The client id string of GitHub oauth app.
        string client_id = 1 [(validate.rules).string.min_len = 1];
        // The client secret string of GitHub oauth app.
        string client_secret = 2 [(validate.rules).string.min_len = 1];
        // The address of GitHub service. Required if enterprise.
        string base_url = 3;
        // The upload url of GitHub service.
        string upload_url = 4;
        // The address of the proxy used while communicating with the GitHub service.
        string proxy_url = 5;
    }

    message Google {
        // The client id string of Google oauth app.
        string client_id = 1 [(validate.rules).string.min_len = 1];
        // The client secret string of Google oauth app.
        string client_secret = 2 [(validate.rules).string.min_len = 1];
    }

    Provider provider = 1 [(validate.rules).enum.defined_only = true];
    GitHub github = 10;
    Google google = 11;
}

message ProjectRBACConfig {
    string admin = 1 [(validate.rules).string.min_len = 1];
    string editor = 2;
    string viewer = 3;
}
