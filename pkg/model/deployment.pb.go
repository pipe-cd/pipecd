// Copyright 2024 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: pkg/model/deployment.proto

package model

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DeploymentStatus represents the current status of a deployment.
type DeploymentStatus int32

const (
	// DEPLOYMENT_PENDING means the deployment has just been triggered but still in the queue.
	// The stages for generated at this time are just temporary and not fixed.
	DeploymentStatus_DEPLOYMENT_PENDING DeploymentStatus = 0
	// DEPLOYMENT_PLANNED means the deployment has just been decided the running pipeline.
	// At this time, the stages are fixed and not changed later.
	DeploymentStatus_DEPLOYMENT_PLANNED DeploymentStatus = 1
	// DEPLOYMENT_RUNNING means the controller is controlling this deployment.
	DeploymentStatus_DEPLOYMENT_RUNNING DeploymentStatus = 2
	// DEPLOYMENT_ROLLING_BACK means the controller is rolling back this deployment.
	DeploymentStatus_DEPLOYMENT_ROLLING_BACK DeploymentStatus = 3
	// DEPLOYMENT_SUCCESS means the deployment was completed successfully.
	DeploymentStatus_DEPLOYMENT_SUCCESS DeploymentStatus = 4
	// DEPLOYMENT_FAILURE means the deployment was completed with a failure.
	DeploymentStatus_DEPLOYMENT_FAILURE DeploymentStatus = 5
	// DEPLOYMENT_CANCELLED means the deployment was cancelled by someone.
	DeploymentStatus_DEPLOYMENT_CANCELLED DeploymentStatus = 6
)

// Enum value maps for DeploymentStatus.
var (
	DeploymentStatus_name = map[int32]string{
		0: "DEPLOYMENT_PENDING",
		1: "DEPLOYMENT_PLANNED",
		2: "DEPLOYMENT_RUNNING",
		3: "DEPLOYMENT_ROLLING_BACK",
		4: "DEPLOYMENT_SUCCESS",
		5: "DEPLOYMENT_FAILURE",
		6: "DEPLOYMENT_CANCELLED",
	}
	DeploymentStatus_value = map[string]int32{
		"DEPLOYMENT_PENDING":      0,
		"DEPLOYMENT_PLANNED":      1,
		"DEPLOYMENT_RUNNING":      2,
		"DEPLOYMENT_ROLLING_BACK": 3,
		"DEPLOYMENT_SUCCESS":      4,
		"DEPLOYMENT_FAILURE":      5,
		"DEPLOYMENT_CANCELLED":    6,
	}
)

func (x DeploymentStatus) Enum() *DeploymentStatus {
	p := new(DeploymentStatus)
	*p = x
	return p
}

func (x DeploymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_model_deployment_proto_enumTypes[0].Descriptor()
}

func (DeploymentStatus) Type() protoreflect.EnumType {
	return &file_pkg_model_deployment_proto_enumTypes[0]
}

func (x DeploymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentStatus.Descriptor instead.
func (DeploymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{0}
}

// StageStatus represents the current status of a stage of a deployment.
type StageStatus int32

const (
	StageStatus_STAGE_NOT_STARTED_YET StageStatus = 0
	StageStatus_STAGE_RUNNING         StageStatus = 1
	StageStatus_STAGE_SUCCESS         StageStatus = 2
	StageStatus_STAGE_FAILURE         StageStatus = 3
	StageStatus_STAGE_CANCELLED       StageStatus = 4
	StageStatus_STAGE_SKIPPED         StageStatus = 5
	StageStatus_STAGE_EXITED          StageStatus = 6
)

// Enum value maps for StageStatus.
var (
	StageStatus_name = map[int32]string{
		0: "STAGE_NOT_STARTED_YET",
		1: "STAGE_RUNNING",
		2: "STAGE_SUCCESS",
		3: "STAGE_FAILURE",
		4: "STAGE_CANCELLED",
		5: "STAGE_SKIPPED",
		6: "STAGE_EXITED",
	}
	StageStatus_value = map[string]int32{
		"STAGE_NOT_STARTED_YET": 0,
		"STAGE_RUNNING":         1,
		"STAGE_SUCCESS":         2,
		"STAGE_FAILURE":         3,
		"STAGE_CANCELLED":       4,
		"STAGE_SKIPPED":         5,
		"STAGE_EXITED":          6,
	}
)

func (x StageStatus) Enum() *StageStatus {
	p := new(StageStatus)
	*p = x
	return p
}

func (x StageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_model_deployment_proto_enumTypes[1].Descriptor()
}

func (StageStatus) Type() protoreflect.EnumType {
	return &file_pkg_model_deployment_proto_enumTypes[1]
}

func (x StageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StageStatus.Descriptor instead.
func (StageStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{1}
}

type TriggerKind int32

const (
	TriggerKind_ON_COMMIT      TriggerKind = 0
	TriggerKind_ON_COMMAND     TriggerKind = 1
	TriggerKind_ON_OUT_OF_SYNC TriggerKind = 2
	TriggerKind_ON_CHAIN       TriggerKind = 3
)

// Enum value maps for TriggerKind.
var (
	TriggerKind_name = map[int32]string{
		0: "ON_COMMIT",
		1: "ON_COMMAND",
		2: "ON_OUT_OF_SYNC",
		3: "ON_CHAIN",
	}
	TriggerKind_value = map[string]int32{
		"ON_COMMIT":      0,
		"ON_COMMAND":     1,
		"ON_OUT_OF_SYNC": 2,
		"ON_CHAIN":       3,
	}
)

func (x TriggerKind) Enum() *TriggerKind {
	p := new(TriggerKind)
	*p = x
	return p
}

func (x TriggerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_model_deployment_proto_enumTypes[2].Descriptor()
}

func (TriggerKind) Type() protoreflect.EnumType {
	return &file_pkg_model_deployment_proto_enumTypes[2]
}

func (x TriggerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerKind.Descriptor instead.
func (TriggerKind) EnumDescriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{2}
}

// ManualOperation represents the manual operation via Web UI for a stage.
type ManualOperation int32

const (
	// The zero value. This should not be used.
	ManualOperation_MANUAL_OPERATION_UNKNOWN ManualOperation = 0
	// Skipping a stage manually.
	ManualOperation_MANUAL_OPERATION_SKIP ManualOperation = 1
	// Approving a stage manually.
	ManualOperation_MANUAL_OPERATION_APPROVE ManualOperation = 2
	// No operation is available.
	ManualOperation_MANUAL_OPERATION_NONE ManualOperation = 3
)

// Enum value maps for ManualOperation.
var (
	ManualOperation_name = map[int32]string{
		0: "MANUAL_OPERATION_UNKNOWN",
		1: "MANUAL_OPERATION_SKIP",
		2: "MANUAL_OPERATION_APPROVE",
		3: "MANUAL_OPERATION_NONE",
	}
	ManualOperation_value = map[string]int32{
		"MANUAL_OPERATION_UNKNOWN": 0,
		"MANUAL_OPERATION_SKIP":    1,
		"MANUAL_OPERATION_APPROVE": 2,
		"MANUAL_OPERATION_NONE":    3,
	}
)

func (x ManualOperation) Enum() *ManualOperation {
	p := new(ManualOperation)
	*p = x
	return p
}

func (x ManualOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManualOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_model_deployment_proto_enumTypes[3].Descriptor()
}

func (ManualOperation) Type() protoreflect.EnumType {
	return &file_pkg_model_deployment_proto_enumTypes[3]
}

func (x ManualOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManualOperation.Descriptor instead.
func (ManualOperation) EnumDescriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{3}
}

// Deployment represents a particular deployment for an application.
// When a new deployment can be created:
// - New commit was added and it mades a change on application configuration.
// - User clicked on Sync button at application web page.
// - Triggered by another deployment.
type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The generated unique identifier.
	Id              string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationId   string              `protobuf:"bytes,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationName string              `protobuf:"bytes,3,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	PipedId         string              `protobuf:"bytes,5,opt,name=piped_id,json=pipedId,proto3" json:"piped_id,omitempty"`
	ProjectId       string              `protobuf:"bytes,6,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Kind            ApplicationKind     `protobuf:"varint,7,opt,name=kind,proto3,enum=model.ApplicationKind" json:"kind,omitempty"`
	GitPath         *ApplicationGitPath `protobuf:"bytes,8,opt,name=git_path,json=gitPath,proto3" json:"git_path,omitempty"`
	// NOTE: Fields `cloud_provider` and `platform_provider` are deprecated.
	// Using `deploy_targets_by_plugin` to specify where to deploy instead.
	// The name of cloud provider where to deploy this application.
	// This must be one of the provider names registered in the piped.
	//
	// Deprecated: Do not use.
	CloudProvider string `protobuf:"bytes,9,opt,name=cloud_provider,json=cloudProvider,proto3" json:"cloud_provider,omitempty"`
	// NOTE: Fields `cloud_provider` and `platform_provider` are deprecated.
	// Using `deploy_targets_by_plugin` to specify where to deploy instead.
	// The name of platform provider where to deploy this application.
	// This must be one of the provider names registered in the piped.
	//
	// Deprecated: Do not use.
	PlatformProvider string `protobuf:"bytes,11,opt,name=platform_provider,json=platformProvider,proto3" json:"platform_provider,omitempty"`
	// The map of plugin:deployTargets used to store all deploy targets which
	// this application would be deploy to.
	// NOTE: plugin as key of this map is not all plugins which should be
	// used to perform deployment for this application, plugins without deploy target (eg. WAIT)
	// are not listed in this map.
	DeployTargetsByPlugin map[string]*DeployTargets `protobuf:"bytes,12,rep,name=deploy_targets_by_plugin,json=deployTargetsByPlugin,proto3" json:"deploy_targets_by_plugin,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Custom attributes to identify applications.
	Labels  map[string]string  `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Trigger *DeploymentTrigger `protobuf:"bytes,20,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// Simple description about what this deployment does.
	// e.g. Scale from 10 to 100 replicas.
	// e.g. Update image from v1.5.0 to v1.6.0.
	Summary string `protobuf:"bytes,22,opt,name=summary,proto3" json:"summary,omitempty"`
	// TODO: Remove version from deployment model.
	Version  string             `protobuf:"bytes,23,opt,name=version,proto3" json:"version,omitempty"`
	Versions []*ArtifactVersion `protobuf:"bytes,24,rep,name=versions,proto3" json:"versions,omitempty"`
	// Hash value of the most recently successfully deployed commit.
	RunningCommitHash     string           `protobuf:"bytes,21,opt,name=running_commit_hash,json=runningCommitHash,proto3" json:"running_commit_hash,omitempty"`
	RunningConfigFilename string           `protobuf:"bytes,60,opt,name=running_config_filename,json=runningConfigFilename,proto3" json:"running_config_filename,omitempty"`
	Status                DeploymentStatus `protobuf:"varint,30,opt,name=status,proto3,enum=model.DeploymentStatus" json:"status,omitempty"`
	// The human-readable description why the deployment is at current status.
	StatusReason string           `protobuf:"bytes,31,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	Stages       []*PipelineStage `protobuf:"bytes,32,rep,name=stages,proto3" json:"stages,omitempty"`
	// Deprecated: Use metadata_v2 instead in pipedv1.
	//
	// Deprecated: Do not use.
	Metadata   map[string]string   `protobuf:"bytes,33,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MetadataV2 *DeploymentMetadata `protobuf:"bytes,34,opt,name=metadata_v2,json=metadataV2,proto3" json:"metadata_v2,omitempty"`
	// Reference to the chain which the deployment belongs to.
	// Empty means the deployment is a standalone deployment.
	DeploymentChainId string `protobuf:"bytes,40,opt,name=deployment_chain_id,json=deploymentChainId,proto3" json:"deployment_chain_id,omitempty"`
	// Index represents the offset of the node which this deployment
	// belongs to.
	DeploymentChainBlockIndex uint32 `protobuf:"varint,41,opt,name=deployment_chain_block_index,json=deploymentChainBlockIndex,proto3" json:"deployment_chain_block_index,omitempty"`
	// The commit hash of the deployment trace, which contains this deployment.
	DeploymentTraceCommitHash string `protobuf:"bytes,50,opt,name=deployment_trace_commit_hash,json=deploymentTraceCommitHash,proto3" json:"deployment_trace_commit_hash,omitempty"`
	CompletedAt               int64  `protobuf:"varint,100,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	CreatedAt                 int64  `protobuf:"varint,101,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                 int64  `protobuf:"varint,102,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{0}
}

func (x *Deployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deployment) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *Deployment) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *Deployment) GetPipedId() string {
	if x != nil {
		return x.PipedId
	}
	return ""
}

func (x *Deployment) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Deployment) GetKind() ApplicationKind {
	if x != nil {
		return x.Kind
	}
	return ApplicationKind_KUBERNETES
}

func (x *Deployment) GetGitPath() *ApplicationGitPath {
	if x != nil {
		return x.GitPath
	}
	return nil
}

// Deprecated: Do not use.
func (x *Deployment) GetCloudProvider() string {
	if x != nil {
		return x.CloudProvider
	}
	return ""
}

// Deprecated: Do not use.
func (x *Deployment) GetPlatformProvider() string {
	if x != nil {
		return x.PlatformProvider
	}
	return ""
}

func (x *Deployment) GetDeployTargetsByPlugin() map[string]*DeployTargets {
	if x != nil {
		return x.DeployTargetsByPlugin
	}
	return nil
}

func (x *Deployment) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Deployment) GetTrigger() *DeploymentTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *Deployment) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Deployment) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Deployment) GetVersions() []*ArtifactVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *Deployment) GetRunningCommitHash() string {
	if x != nil {
		return x.RunningCommitHash
	}
	return ""
}

func (x *Deployment) GetRunningConfigFilename() string {
	if x != nil {
		return x.RunningConfigFilename
	}
	return ""
}

func (x *Deployment) GetStatus() DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentStatus_DEPLOYMENT_PENDING
}

func (x *Deployment) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

func (x *Deployment) GetStages() []*PipelineStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

// Deprecated: Do not use.
func (x *Deployment) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Deployment) GetMetadataV2() *DeploymentMetadata {
	if x != nil {
		return x.MetadataV2
	}
	return nil
}

func (x *Deployment) GetDeploymentChainId() string {
	if x != nil {
		return x.DeploymentChainId
	}
	return ""
}

func (x *Deployment) GetDeploymentChainBlockIndex() uint32 {
	if x != nil {
		return x.DeploymentChainBlockIndex
	}
	return 0
}

func (x *Deployment) GetDeploymentTraceCommitHash() string {
	if x != nil {
		return x.DeploymentTraceCommitHash
	}
	return ""
}

func (x *Deployment) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *Deployment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Deployment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type DeployTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeployTargets []string `protobuf:"bytes,1,rep,name=deploy_targets,json=deployTargets,proto3" json:"deploy_targets,omitempty"`
}

func (x *DeployTargets) Reset() {
	*x = DeployTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployTargets) ProtoMessage() {}

func (x *DeployTargets) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployTargets.ProtoReflect.Descriptor instead.
func (*DeployTargets) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{1}
}

func (x *DeployTargets) GetDeployTargets() []string {
	if x != nil {
		return x.DeployTargets
	}
	return nil
}

type DeploymentTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	// Who triggered this deployment via web page.
	Commander       string       `protobuf:"bytes,2,opt,name=commander,proto3" json:"commander,omitempty"`
	Timestamp       int64        `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SyncStrategy    SyncStrategy `protobuf:"varint,4,opt,name=sync_strategy,json=syncStrategy,proto3,enum=model.SyncStrategy" json:"sync_strategy,omitempty"`
	StrategySummary string       `protobuf:"bytes,5,opt,name=strategy_summary,json=strategySummary,proto3" json:"strategy_summary,omitempty"`
}

func (x *DeploymentTrigger) Reset() {
	*x = DeploymentTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentTrigger) ProtoMessage() {}

func (x *DeploymentTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentTrigger.ProtoReflect.Descriptor instead.
func (*DeploymentTrigger) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{2}
}

func (x *DeploymentTrigger) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

func (x *DeploymentTrigger) GetCommander() string {
	if x != nil {
		return x.Commander
	}
	return ""
}

func (x *DeploymentTrigger) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DeploymentTrigger) GetSyncStrategy() SyncStrategy {
	if x != nil {
		return x.SyncStrategy
	}
	return SyncStrategy_AUTO
}

func (x *DeploymentTrigger) GetStrategySummary() string {
	if x != nil {
		return x.StrategySummary
	}
	return ""
}

type PipelineStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// Stage index from the stage list in configuration.
	Index int32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	// Whether this stage is the predefined one by planner.
	//
	// Deprecated: Do not use.
	Predefined bool     `protobuf:"varint,5,opt,name=predefined,proto3" json:"predefined,omitempty"`
	Requires   []string `protobuf:"bytes,6,rep,name=requires,proto3" json:"requires,omitempty"`
	// Whether this stage should be rendered or not.
	//
	// Deprecated: Do not use.
	Visible bool        `protobuf:"varint,7,opt,name=visible,proto3" json:"visible,omitempty"`
	Status  StageStatus `protobuf:"varint,8,opt,name=status,proto3,enum=model.StageStatus" json:"status,omitempty"`
	// The human-readable description why the stage is at current status.
	StatusReason string            `protobuf:"bytes,9,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,10,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RetriedCount int32             `protobuf:"varint,11,opt,name=retried_count,json=retriedCount,proto3" json:"retried_count,omitempty"`
	Rollback     bool              `protobuf:"varint,12,opt,name=rollback,proto3" json:"rollback,omitempty"`
	CompletedAt  int64             `protobuf:"varint,13,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	CreatedAt    int64             `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64             `protobuf:"varint,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Available manual operation via Web UI for this stage.
	AvailableOperation ManualOperation `protobuf:"varint,16,opt,name=available_operation,json=availableOperation,proto3,enum=model.ManualOperation" json:"available_operation,omitempty"`
}

func (x *PipelineStage) Reset() {
	*x = PipelineStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipelineStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineStage) ProtoMessage() {}

func (x *PipelineStage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineStage.ProtoReflect.Descriptor instead.
func (*PipelineStage) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{3}
}

func (x *PipelineStage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PipelineStage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PipelineStage) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PipelineStage) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Deprecated: Do not use.
func (x *PipelineStage) GetPredefined() bool {
	if x != nil {
		return x.Predefined
	}
	return false
}

func (x *PipelineStage) GetRequires() []string {
	if x != nil {
		return x.Requires
	}
	return nil
}

// Deprecated: Do not use.
func (x *PipelineStage) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *PipelineStage) GetStatus() StageStatus {
	if x != nil {
		return x.Status
	}
	return StageStatus_STAGE_NOT_STARTED_YET
}

func (x *PipelineStage) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

func (x *PipelineStage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PipelineStage) GetRetriedCount() int32 {
	if x != nil {
		return x.RetriedCount
	}
	return 0
}

func (x *PipelineStage) GetRollback() bool {
	if x != nil {
		return x.Rollback
	}
	return false
}

func (x *PipelineStage) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *PipelineStage) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PipelineStage) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PipelineStage) GetAvailableOperation() ManualOperation {
	if x != nil {
		return x.AvailableOperation
	}
	return ManualOperation_MANUAL_OPERATION_UNKNOWN
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Author      string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Branch      string `protobuf:"bytes,4,opt,name=branch,proto3" json:"branch,omitempty"`
	PullRequest int64  `protobuf:"varint,5,opt,name=pull_request,json=pullRequest,proto3" json:"pull_request,omitempty"`
	Url         string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	CreatedAt   int64  `protobuf:"varint,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{4}
}

func (x *Commit) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Commit) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *Commit) GetPullRequest() int64 {
	if x != nil {
		return x.PullRequest
	}
	return 0
}

func (x *Commit) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Commit) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type DeploymentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// shared is metadatas made by piped.
	Shared *DeploymentMetadata_KeyValues `protobuf:"bytes,1,opt,name=shared,proto3" json:"shared,omitempty"`
	// plugins is metadatas made by plugins.
	// The key is used to distinguish which plugin manages the metadata.
	Plugins map[string]*DeploymentMetadata_KeyValues `protobuf:"bytes,2,rep,name=plugins,proto3" json:"plugins,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeploymentMetadata) Reset() {
	*x = DeploymentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentMetadata) ProtoMessage() {}

func (x *DeploymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentMetadata.ProtoReflect.Descriptor instead.
func (*DeploymentMetadata) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{5}
}

func (x *DeploymentMetadata) GetShared() *DeploymentMetadata_KeyValues {
	if x != nil {
		return x.Shared
	}
	return nil
}

func (x *DeploymentMetadata) GetPlugins() map[string]*DeploymentMetadata_KeyValues {
	if x != nil {
		return x.Plugins
	}
	return nil
}

type DeploymentMetadata_KeyValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyValues map[string]string `protobuf:"bytes,1,rep,name=keyValues,proto3" json:"keyValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DeploymentMetadata_KeyValues) Reset() {
	*x = DeploymentMetadata_KeyValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentMetadata_KeyValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentMetadata_KeyValues) ProtoMessage() {}

func (x *DeploymentMetadata_KeyValues) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentMetadata_KeyValues.ProtoReflect.Descriptor instead.
func (*DeploymentMetadata_KeyValues) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_proto_rawDescGZIP(), []int{5, 1}
}

func (x *DeploymentMetadata_KeyValues) GetKeyValues() map[string]string {
	if x != nil {
		return x.KeyValues
	}
	return nil
}

var File_pkg_model_deployment_proto protoreflect.FileDescriptor

var file_pkg_model_deployment_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x6b,
	0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x0e,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x70, 0x69, 0x70,
	0x65, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69,
	0x6e, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x50, 0x61, 0x74, 0x68, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x07, 0x67, 0x69, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a,
	0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x65,
	0x0a, 0x18, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x42, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x42, 0x79, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x32, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x1a, 0x5e, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x42, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x36, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xb5, 0x05, 0x0a, 0x0d, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe7, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20,
	0x00, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x92, 0x03, 0x0a,
	0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x12, 0x40, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x1a, 0x5f, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x9b, 0x01, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x2a, 0xc1, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x9b, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x59, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41,
	0x47, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x45,
	0x44, 0x10, 0x06, 0x2a, 0x4e, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x49,
	0x4e, 0x10, 0x03, 0x2a, 0x83, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x2d, 0x63, 0x64, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x63, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_model_deployment_proto_rawDescOnce sync.Once
	file_pkg_model_deployment_proto_rawDescData = file_pkg_model_deployment_proto_rawDesc
)

func file_pkg_model_deployment_proto_rawDescGZIP() []byte {
	file_pkg_model_deployment_proto_rawDescOnce.Do(func() {
		file_pkg_model_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_model_deployment_proto_rawDescData)
	})
	return file_pkg_model_deployment_proto_rawDescData
}

var file_pkg_model_deployment_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pkg_model_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pkg_model_deployment_proto_goTypes = []interface{}{
	(DeploymentStatus)(0),                // 0: model.DeploymentStatus
	(StageStatus)(0),                     // 1: model.StageStatus
	(TriggerKind)(0),                     // 2: model.TriggerKind
	(ManualOperation)(0),                 // 3: model.ManualOperation
	(*Deployment)(nil),                   // 4: model.Deployment
	(*DeployTargets)(nil),                // 5: model.DeployTargets
	(*DeploymentTrigger)(nil),            // 6: model.DeploymentTrigger
	(*PipelineStage)(nil),                // 7: model.PipelineStage
	(*Commit)(nil),                       // 8: model.Commit
	(*DeploymentMetadata)(nil),           // 9: model.DeploymentMetadata
	nil,                                  // 10: model.Deployment.DeployTargetsByPluginEntry
	nil,                                  // 11: model.Deployment.LabelsEntry
	nil,                                  // 12: model.Deployment.MetadataEntry
	nil,                                  // 13: model.PipelineStage.MetadataEntry
	nil,                                  // 14: model.DeploymentMetadata.PluginsEntry
	(*DeploymentMetadata_KeyValues)(nil), // 15: model.DeploymentMetadata.KeyValues
	nil,                                  // 16: model.DeploymentMetadata.KeyValues.KeyValuesEntry
	(ApplicationKind)(0),                 // 17: model.ApplicationKind
	(*ApplicationGitPath)(nil),           // 18: model.ApplicationGitPath
	(*ArtifactVersion)(nil),              // 19: model.ArtifactVersion
	(SyncStrategy)(0),                    // 20: model.SyncStrategy
}
var file_pkg_model_deployment_proto_depIdxs = []int32{
	17, // 0: model.Deployment.kind:type_name -> model.ApplicationKind
	18, // 1: model.Deployment.git_path:type_name -> model.ApplicationGitPath
	10, // 2: model.Deployment.deploy_targets_by_plugin:type_name -> model.Deployment.DeployTargetsByPluginEntry
	11, // 3: model.Deployment.labels:type_name -> model.Deployment.LabelsEntry
	6,  // 4: model.Deployment.trigger:type_name -> model.DeploymentTrigger
	19, // 5: model.Deployment.versions:type_name -> model.ArtifactVersion
	0,  // 6: model.Deployment.status:type_name -> model.DeploymentStatus
	7,  // 7: model.Deployment.stages:type_name -> model.PipelineStage
	12, // 8: model.Deployment.metadata:type_name -> model.Deployment.MetadataEntry
	9,  // 9: model.Deployment.metadata_v2:type_name -> model.DeploymentMetadata
	8,  // 10: model.DeploymentTrigger.commit:type_name -> model.Commit
	20, // 11: model.DeploymentTrigger.sync_strategy:type_name -> model.SyncStrategy
	1,  // 12: model.PipelineStage.status:type_name -> model.StageStatus
	13, // 13: model.PipelineStage.metadata:type_name -> model.PipelineStage.MetadataEntry
	3,  // 14: model.PipelineStage.available_operation:type_name -> model.ManualOperation
	15, // 15: model.DeploymentMetadata.shared:type_name -> model.DeploymentMetadata.KeyValues
	14, // 16: model.DeploymentMetadata.plugins:type_name -> model.DeploymentMetadata.PluginsEntry
	5,  // 17: model.Deployment.DeployTargetsByPluginEntry.value:type_name -> model.DeployTargets
	15, // 18: model.DeploymentMetadata.PluginsEntry.value:type_name -> model.DeploymentMetadata.KeyValues
	16, // 19: model.DeploymentMetadata.KeyValues.keyValues:type_name -> model.DeploymentMetadata.KeyValues.KeyValuesEntry
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_pkg_model_deployment_proto_init() }
func file_pkg_model_deployment_proto_init() {
	if File_pkg_model_deployment_proto != nil {
		return
	}
	file_pkg_model_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_model_deployment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipelineStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentMetadata_KeyValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_model_deployment_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_model_deployment_proto_goTypes,
		DependencyIndexes: file_pkg_model_deployment_proto_depIdxs,
		EnumInfos:         file_pkg_model_deployment_proto_enumTypes,
		MessageInfos:      file_pkg_model_deployment_proto_msgTypes,
	}.Build()
	File_pkg_model_deployment_proto = out.File
	file_pkg_model_deployment_proto_rawDesc = nil
	file_pkg_model_deployment_proto_goTypes = nil
	file_pkg_model_deployment_proto_depIdxs = nil
}
