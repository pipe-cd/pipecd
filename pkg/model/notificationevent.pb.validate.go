// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/model/notificationevent.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NotificationEventDeploymentTriggered
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationEventDeploymentTriggered) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventDeploymentTriggered
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationEventDeploymentTriggeredMultiError, or nil if none found.
func (m *NotificationEventDeploymentTriggered) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentTriggered) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := NotificationEventDeploymentTriggeredValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentTriggeredValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentTriggeredValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentTriggeredValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationEventDeploymentTriggeredMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentTriggeredMultiError is an error wrapping multiple
// validation errors returned by
// NotificationEventDeploymentTriggered.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentTriggeredMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentTriggeredMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentTriggeredMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentTriggeredValidationError is the validation error
// returned by NotificationEventDeploymentTriggered.Validate if the designated
// constraints aren't met.
type NotificationEventDeploymentTriggeredValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentTriggeredValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentTriggeredValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentTriggeredValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentTriggeredValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentTriggeredValidationError) ErrorName() string {
	return "NotificationEventDeploymentTriggeredValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentTriggeredValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentTriggered.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentTriggeredValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentTriggeredValidationError{}

// Validate checks the field values on NotificationEventDeploymentPlanned with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NotificationEventDeploymentPlanned) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventDeploymentPlanned
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationEventDeploymentPlannedMultiError, or nil if none found.
func (m *NotificationEventDeploymentPlanned) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentPlanned) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := NotificationEventDeploymentPlannedValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentPlannedValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentPlannedValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentPlannedValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Summary

	if len(errors) > 0 {
		return NotificationEventDeploymentPlannedMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentPlannedMultiError is an error wrapping multiple
// validation errors returned by
// NotificationEventDeploymentPlanned.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentPlannedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentPlannedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentPlannedMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentPlannedValidationError is the validation error
// returned by NotificationEventDeploymentPlanned.Validate if the designated
// constraints aren't met.
type NotificationEventDeploymentPlannedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentPlannedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentPlannedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentPlannedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentPlannedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentPlannedValidationError) ErrorName() string {
	return "NotificationEventDeploymentPlannedValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentPlannedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentPlanned.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentPlannedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentPlannedValidationError{}

// Validate checks the field values on NotificationEventDeploymentApproved with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NotificationEventDeploymentApproved) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventDeploymentApproved
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationEventDeploymentApprovedMultiError, or nil if none found.
func (m *NotificationEventDeploymentApproved) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentApproved) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := NotificationEventDeploymentApprovedValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentApprovedValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentApprovedValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentApprovedValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Approver

	if len(errors) > 0 {
		return NotificationEventDeploymentApprovedMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentApprovedMultiError is an error wrapping multiple
// validation errors returned by
// NotificationEventDeploymentApproved.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentApprovedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentApprovedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentApprovedMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentApprovedValidationError is the validation error
// returned by NotificationEventDeploymentApproved.Validate if the designated
// constraints aren't met.
type NotificationEventDeploymentApprovedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentApprovedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentApprovedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentApprovedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentApprovedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentApprovedValidationError) ErrorName() string {
	return "NotificationEventDeploymentApprovedValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentApprovedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentApproved.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentApprovedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentApprovedValidationError{}

// Validate checks the field values on NotificationEventDeploymentRollingBack
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationEventDeploymentRollingBack) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationEventDeploymentRollingBack with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NotificationEventDeploymentRollingBackMultiError, or nil if none found.
func (m *NotificationEventDeploymentRollingBack) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentRollingBack) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := NotificationEventDeploymentRollingBackValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentRollingBackValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentRollingBackValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentRollingBackValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationEventDeploymentRollingBackMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentRollingBackMultiError is an error wrapping
// multiple validation errors returned by
// NotificationEventDeploymentRollingBack.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentRollingBackMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentRollingBackMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentRollingBackMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentRollingBackValidationError is the validation
// error returned by NotificationEventDeploymentRollingBack.Validate if the
// designated constraints aren't met.
type NotificationEventDeploymentRollingBackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentRollingBackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentRollingBackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentRollingBackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentRollingBackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentRollingBackValidationError) ErrorName() string {
	return "NotificationEventDeploymentRollingBackValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentRollingBackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentRollingBack.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentRollingBackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentRollingBackValidationError{}

// Validate checks the field values on NotificationEventDeploymentSucceeded
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationEventDeploymentSucceeded) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventDeploymentSucceeded
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationEventDeploymentSucceededMultiError, or nil if none found.
func (m *NotificationEventDeploymentSucceeded) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentSucceeded) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := NotificationEventDeploymentSucceededValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentSucceededValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentSucceededValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentSucceededValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationEventDeploymentSucceededMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentSucceededMultiError is an error wrapping multiple
// validation errors returned by
// NotificationEventDeploymentSucceeded.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentSucceededMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentSucceededMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentSucceededMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentSucceededValidationError is the validation error
// returned by NotificationEventDeploymentSucceeded.Validate if the designated
// constraints aren't met.
type NotificationEventDeploymentSucceededValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentSucceededValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentSucceededValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentSucceededValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentSucceededValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentSucceededValidationError) ErrorName() string {
	return "NotificationEventDeploymentSucceededValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentSucceededValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentSucceeded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentSucceededValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentSucceededValidationError{}

// Validate checks the field values on NotificationEventDeploymentFailed with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NotificationEventDeploymentFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventDeploymentFailed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationEventDeploymentFailedMultiError, or nil if none found.
func (m *NotificationEventDeploymentFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := NotificationEventDeploymentFailedValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentFailedValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentFailedValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentFailedValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Reason

	if len(errors) > 0 {
		return NotificationEventDeploymentFailedMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentFailedMultiError is an error wrapping multiple
// validation errors returned by
// NotificationEventDeploymentFailed.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentFailedMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentFailedValidationError is the validation error
// returned by NotificationEventDeploymentFailed.Validate if the designated
// constraints aren't met.
type NotificationEventDeploymentFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentFailedValidationError) ErrorName() string {
	return "NotificationEventDeploymentFailedValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentFailedValidationError{}

// Validate checks the field values on NotificationEventDeploymentCancelled
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationEventDeploymentCancelled) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventDeploymentCancelled
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationEventDeploymentCancelledMultiError, or nil if none found.
func (m *NotificationEventDeploymentCancelled) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentCancelled) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := NotificationEventDeploymentCancelledValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentCancelledValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentCancelledValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentCancelledValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Commander

	if len(errors) > 0 {
		return NotificationEventDeploymentCancelledMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentCancelledMultiError is an error wrapping multiple
// validation errors returned by
// NotificationEventDeploymentCancelled.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentCancelledMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentCancelledMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentCancelledMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentCancelledValidationError is the validation error
// returned by NotificationEventDeploymentCancelled.Validate if the designated
// constraints aren't met.
type NotificationEventDeploymentCancelledValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentCancelledValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentCancelledValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentCancelledValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentCancelledValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentCancelledValidationError) ErrorName() string {
	return "NotificationEventDeploymentCancelledValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentCancelledValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentCancelled.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentCancelledValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentCancelledValidationError{}

// Validate checks the field values on NotificationEventDeploymentWaitApproval
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationEventDeploymentWaitApproval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationEventDeploymentWaitApproval with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NotificationEventDeploymentWaitApprovalMultiError, or nil if none found.
func (m *NotificationEventDeploymentWaitApproval) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentWaitApproval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := NotificationEventDeploymentWaitApprovalValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentWaitApprovalValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentWaitApprovalValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentWaitApprovalValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationEventDeploymentWaitApprovalMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentWaitApprovalMultiError is an error wrapping
// multiple validation errors returned by
// NotificationEventDeploymentWaitApproval.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentWaitApprovalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentWaitApprovalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentWaitApprovalMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentWaitApprovalValidationError is the validation
// error returned by NotificationEventDeploymentWaitApproval.Validate if the
// designated constraints aren't met.
type NotificationEventDeploymentWaitApprovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentWaitApprovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentWaitApprovalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentWaitApprovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentWaitApprovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentWaitApprovalValidationError) ErrorName() string {
	return "NotificationEventDeploymentWaitApprovalValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentWaitApprovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentWaitApproval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentWaitApprovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentWaitApprovalValidationError{}

// Validate checks the field values on NotificationEventDeploymentTriggerFailed
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationEventDeploymentTriggerFailed) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationEventDeploymentTriggerFailed with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NotificationEventDeploymentTriggerFailedMultiError, or nil if none found.
func (m *NotificationEventDeploymentTriggerFailed) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventDeploymentTriggerFailed) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetApplication() == nil {
		err := NotificationEventDeploymentTriggerFailedValidationError{
			field:  "Application",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventDeploymentTriggerFailedValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventDeploymentTriggerFailedValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventDeploymentTriggerFailedValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCommitHash()) < 1 {
		err := NotificationEventDeploymentTriggerFailedValidationError{
			field:  "CommitHash",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCommitMessage()) < 1 {
		err := NotificationEventDeploymentTriggerFailedValidationError{
			field:  "CommitMessage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReason()) < 1 {
		err := NotificationEventDeploymentTriggerFailedValidationError{
			field:  "Reason",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NotificationEventDeploymentTriggerFailedMultiError(errors)
	}

	return nil
}

// NotificationEventDeploymentTriggerFailedMultiError is an error wrapping
// multiple validation errors returned by
// NotificationEventDeploymentTriggerFailed.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventDeploymentTriggerFailedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventDeploymentTriggerFailedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventDeploymentTriggerFailedMultiError) AllErrors() []error { return m }

// NotificationEventDeploymentTriggerFailedValidationError is the validation
// error returned by NotificationEventDeploymentTriggerFailed.Validate if the
// designated constraints aren't met.
type NotificationEventDeploymentTriggerFailedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventDeploymentTriggerFailedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventDeploymentTriggerFailedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventDeploymentTriggerFailedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventDeploymentTriggerFailedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventDeploymentTriggerFailedValidationError) ErrorName() string {
	return "NotificationEventDeploymentTriggerFailedValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventDeploymentTriggerFailedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventDeploymentTriggerFailed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventDeploymentTriggerFailedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventDeploymentTriggerFailedValidationError{}

// Validate checks the field values on NotificationEventApplicationSynced with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NotificationEventApplicationSynced) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventApplicationSynced
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationEventApplicationSyncedMultiError, or nil if none found.
func (m *NotificationEventApplicationSynced) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventApplicationSynced) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetApplication() == nil {
		err := NotificationEventApplicationSyncedValidationError{
			field:  "Application",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventApplicationSyncedValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventApplicationSyncedValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventApplicationSyncedValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetState() == nil {
		err := NotificationEventApplicationSyncedValidationError{
			field:  "State",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventApplicationSyncedValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventApplicationSyncedValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventApplicationSyncedValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationEventApplicationSyncedMultiError(errors)
	}

	return nil
}

// NotificationEventApplicationSyncedMultiError is an error wrapping multiple
// validation errors returned by
// NotificationEventApplicationSynced.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventApplicationSyncedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventApplicationSyncedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventApplicationSyncedMultiError) AllErrors() []error { return m }

// NotificationEventApplicationSyncedValidationError is the validation error
// returned by NotificationEventApplicationSynced.Validate if the designated
// constraints aren't met.
type NotificationEventApplicationSyncedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventApplicationSyncedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventApplicationSyncedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventApplicationSyncedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventApplicationSyncedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventApplicationSyncedValidationError) ErrorName() string {
	return "NotificationEventApplicationSyncedValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventApplicationSyncedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventApplicationSynced.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventApplicationSyncedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventApplicationSyncedValidationError{}

// Validate checks the field values on NotificationEventApplicationOutOfSync
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationEventApplicationOutOfSync) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventApplicationOutOfSync
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationEventApplicationOutOfSyncMultiError, or nil if none found.
func (m *NotificationEventApplicationOutOfSync) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventApplicationOutOfSync) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetApplication() == nil {
		err := NotificationEventApplicationOutOfSyncValidationError{
			field:  "Application",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventApplicationOutOfSyncValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventApplicationOutOfSyncValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventApplicationOutOfSyncValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetState() == nil {
		err := NotificationEventApplicationOutOfSyncValidationError{
			field:  "State",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationEventApplicationOutOfSyncValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationEventApplicationOutOfSyncValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationEventApplicationOutOfSyncValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationEventApplicationOutOfSyncMultiError(errors)
	}

	return nil
}

// NotificationEventApplicationOutOfSyncMultiError is an error wrapping
// multiple validation errors returned by
// NotificationEventApplicationOutOfSync.ValidateAll() if the designated
// constraints aren't met.
type NotificationEventApplicationOutOfSyncMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventApplicationOutOfSyncMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventApplicationOutOfSyncMultiError) AllErrors() []error { return m }

// NotificationEventApplicationOutOfSyncValidationError is the validation error
// returned by NotificationEventApplicationOutOfSync.Validate if the
// designated constraints aren't met.
type NotificationEventApplicationOutOfSyncValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventApplicationOutOfSyncValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventApplicationOutOfSyncValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventApplicationOutOfSyncValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventApplicationOutOfSyncValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventApplicationOutOfSyncValidationError) ErrorName() string {
	return "NotificationEventApplicationOutOfSyncValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventApplicationOutOfSyncValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventApplicationOutOfSync.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventApplicationOutOfSyncValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventApplicationOutOfSyncValidationError{}

// Validate checks the field values on NotificationEventPipedStarted with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationEventPipedStarted) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventPipedStarted with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NotificationEventPipedStartedMultiError, or nil if none found.
func (m *NotificationEventPipedStarted) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventPipedStarted) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := NotificationEventPipedStartedValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := NotificationEventPipedStartedValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := NotificationEventPipedStartedValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NotificationEventPipedStartedMultiError(errors)
	}

	return nil
}

// NotificationEventPipedStartedMultiError is an error wrapping multiple
// validation errors returned by NotificationEventPipedStarted.ValidateAll()
// if the designated constraints aren't met.
type NotificationEventPipedStartedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventPipedStartedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventPipedStartedMultiError) AllErrors() []error { return m }

// NotificationEventPipedStartedValidationError is the validation error
// returned by NotificationEventPipedStarted.Validate if the designated
// constraints aren't met.
type NotificationEventPipedStartedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventPipedStartedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventPipedStartedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventPipedStartedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventPipedStartedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventPipedStartedValidationError) ErrorName() string {
	return "NotificationEventPipedStartedValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventPipedStartedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventPipedStarted.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventPipedStartedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventPipedStartedValidationError{}

// Validate checks the field values on NotificationEventPipedStopped with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationEventPipedStopped) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationEventPipedStopped with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// NotificationEventPipedStoppedMultiError, or nil if none found.
func (m *NotificationEventPipedStopped) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationEventPipedStopped) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := NotificationEventPipedStoppedValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := NotificationEventPipedStoppedValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := NotificationEventPipedStoppedValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return NotificationEventPipedStoppedMultiError(errors)
	}

	return nil
}

// NotificationEventPipedStoppedMultiError is an error wrapping multiple
// validation errors returned by NotificationEventPipedStopped.ValidateAll()
// if the designated constraints aren't met.
type NotificationEventPipedStoppedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationEventPipedStoppedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationEventPipedStoppedMultiError) AllErrors() []error { return m }

// NotificationEventPipedStoppedValidationError is the validation error
// returned by NotificationEventPipedStopped.Validate if the designated
// constraints aren't met.
type NotificationEventPipedStoppedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationEventPipedStoppedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationEventPipedStoppedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationEventPipedStoppedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationEventPipedStoppedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationEventPipedStoppedValidationError) ErrorName() string {
	return "NotificationEventPipedStoppedValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationEventPipedStoppedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationEventPipedStopped.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationEventPipedStoppedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationEventPipedStoppedValidationError{}
