// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/model/project.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Project) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProjectMultiError, or nil if none found.
func (m *Project) ValidateAll() error {
	return m.validate(true)
}

func (m *Project) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ProjectValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if m.GetStaticAdmin() == nil {
		err := ProjectValidationError{
			field:  "StaticAdmin",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStaticAdmin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "StaticAdmin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "StaticAdmin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStaticAdmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "StaticAdmin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StaticAdminDisabled

	if all {
		switch v := interface{}(m.GetSso()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "Sso",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "Sso",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSso()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "Sso",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRbac()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "Rbac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "Rbac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRbac()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "Rbac",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SharedSsoName

	// no validation rules for AllowStrayAsViewer

	if m.GetCreatedAt() <= 0 {
		err := ProjectValidationError{
			field:  "CreatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() <= 0 {
		err := ProjectValidationError{
			field:  "UpdatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectMultiError(errors)
	}

	return nil
}

// ProjectMultiError is an error wrapping multiple validation errors returned
// by Project.ValidateAll() if the designated constraints aren't met.
type ProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMultiError) AllErrors() []error { return m }

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on ProjectStaticUser with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProjectStaticUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectStaticUser with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectStaticUserMultiError, or nil if none found.
func (m *ProjectStaticUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectStaticUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := ProjectStaticUserValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPasswordHash()) < 6 {
		err := ProjectStaticUserValidationError{
			field:  "PasswordHash",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectStaticUserMultiError(errors)
	}

	return nil
}

// ProjectStaticUserMultiError is an error wrapping multiple validation errors
// returned by ProjectStaticUser.ValidateAll() if the designated constraints
// aren't met.
type ProjectStaticUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectStaticUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectStaticUserMultiError) AllErrors() []error { return m }

// ProjectStaticUserValidationError is the validation error returned by
// ProjectStaticUser.Validate if the designated constraints aren't met.
type ProjectStaticUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectStaticUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectStaticUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectStaticUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectStaticUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectStaticUserValidationError) ErrorName() string {
	return "ProjectStaticUserValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectStaticUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectStaticUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectStaticUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectStaticUserValidationError{}

// Validate checks the field values on ProjectSSOConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProjectSSOConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectSSOConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectSSOConfigMultiError, or nil if none found.
func (m *ProjectSSOConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectSSOConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := ProjectSSOConfig_Provider_name[int32(m.GetProvider())]; !ok {
		err := ProjectSSOConfigValidationError{
			field:  "Provider",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGithub()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectSSOConfigValidationError{
					field:  "Github",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectSSOConfigValidationError{
					field:  "Github",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGithub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectSSOConfigValidationError{
				field:  "Github",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGoogle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectSSOConfigValidationError{
					field:  "Google",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectSSOConfigValidationError{
					field:  "Google",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGoogle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectSSOConfigValidationError{
				field:  "Google",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectSSOConfigMultiError(errors)
	}

	return nil
}

// ProjectSSOConfigMultiError is an error wrapping multiple validation errors
// returned by ProjectSSOConfig.ValidateAll() if the designated constraints
// aren't met.
type ProjectSSOConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectSSOConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectSSOConfigMultiError) AllErrors() []error { return m }

// ProjectSSOConfigValidationError is the validation error returned by
// ProjectSSOConfig.Validate if the designated constraints aren't met.
type ProjectSSOConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectSSOConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectSSOConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectSSOConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectSSOConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectSSOConfigValidationError) ErrorName() string { return "ProjectSSOConfigValidationError" }

// Error satisfies the builtin error interface
func (e ProjectSSOConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectSSOConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectSSOConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectSSOConfigValidationError{}

// Validate checks the field values on ProjectRBACConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProjectRBACConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectRBACConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectRBACConfigMultiError, or nil if none found.
func (m *ProjectRBACConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectRBACConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAdmin()) < 1 {
		err := ProjectRBACConfigValidationError{
			field:  "Admin",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Editor

	// no validation rules for Viewer

	if len(errors) > 0 {
		return ProjectRBACConfigMultiError(errors)
	}

	return nil
}

// ProjectRBACConfigMultiError is an error wrapping multiple validation errors
// returned by ProjectRBACConfig.ValidateAll() if the designated constraints
// aren't met.
type ProjectRBACConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectRBACConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectRBACConfigMultiError) AllErrors() []error { return m }

// ProjectRBACConfigValidationError is the validation error returned by
// ProjectRBACConfig.Validate if the designated constraints aren't met.
type ProjectRBACConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectRBACConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectRBACConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectRBACConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectRBACConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectRBACConfigValidationError) ErrorName() string {
	return "ProjectRBACConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectRBACConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectRBACConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectRBACConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectRBACConfigValidationError{}

// Validate checks the field values on ProjectSSOConfig_GitHub with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectSSOConfig_GitHub) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectSSOConfig_GitHub with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectSSOConfig_GitHubMultiError, or nil if none found.
func (m *ProjectSSOConfig_GitHub) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectSSOConfig_GitHub) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := ProjectSSOConfig_GitHubValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientSecret()) < 1 {
		err := ProjectSSOConfig_GitHubValidationError{
			field:  "ClientSecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BaseUrl

	// no validation rules for UploadUrl

	// no validation rules for ProxyUrl

	if len(errors) > 0 {
		return ProjectSSOConfig_GitHubMultiError(errors)
	}

	return nil
}

// ProjectSSOConfig_GitHubMultiError is an error wrapping multiple validation
// errors returned by ProjectSSOConfig_GitHub.ValidateAll() if the designated
// constraints aren't met.
type ProjectSSOConfig_GitHubMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectSSOConfig_GitHubMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectSSOConfig_GitHubMultiError) AllErrors() []error { return m }

// ProjectSSOConfig_GitHubValidationError is the validation error returned by
// ProjectSSOConfig_GitHub.Validate if the designated constraints aren't met.
type ProjectSSOConfig_GitHubValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectSSOConfig_GitHubValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectSSOConfig_GitHubValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectSSOConfig_GitHubValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectSSOConfig_GitHubValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectSSOConfig_GitHubValidationError) ErrorName() string {
	return "ProjectSSOConfig_GitHubValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectSSOConfig_GitHubValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectSSOConfig_GitHub.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectSSOConfig_GitHubValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectSSOConfig_GitHubValidationError{}

// Validate checks the field values on ProjectSSOConfig_Google with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectSSOConfig_Google) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectSSOConfig_Google with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectSSOConfig_GoogleMultiError, or nil if none found.
func (m *ProjectSSOConfig_Google) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectSSOConfig_Google) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := ProjectSSOConfig_GoogleValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientSecret()) < 1 {
		err := ProjectSSOConfig_GoogleValidationError{
			field:  "ClientSecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ProjectSSOConfig_GoogleMultiError(errors)
	}

	return nil
}

// ProjectSSOConfig_GoogleMultiError is an error wrapping multiple validation
// errors returned by ProjectSSOConfig_Google.ValidateAll() if the designated
// constraints aren't met.
type ProjectSSOConfig_GoogleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectSSOConfig_GoogleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectSSOConfig_GoogleMultiError) AllErrors() []error { return m }

// ProjectSSOConfig_GoogleValidationError is the validation error returned by
// ProjectSSOConfig_Google.Validate if the designated constraints aren't met.
type ProjectSSOConfig_GoogleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectSSOConfig_GoogleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectSSOConfig_GoogleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectSSOConfig_GoogleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectSSOConfig_GoogleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectSSOConfig_GoogleValidationError) ErrorName() string {
	return "ProjectSSOConfig_GoogleValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectSSOConfig_GoogleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectSSOConfig_Google.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectSSOConfig_GoogleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectSSOConfig_GoogleValidationError{}
