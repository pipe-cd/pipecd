// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/model/piped.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Piped with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Piped) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Piped with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PipedMultiError, or nil if none found.
func (m *Piped) ValidateAll() error {
	return m.validate(true)
}

func (m *Piped) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := PipedValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := PipedValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := PipedValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	// no validation rules for StartedAt

	for idx, item := range m.GetCloudProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipedValidationError{
						field:  fmt.Sprintf("CloudProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipedValidationError{
						field:  fmt.Sprintf("CloudProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipedValidationError{
					field:  fmt.Sprintf("CloudProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRepositories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipedValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipedValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipedValidationError{
					field:  fmt.Sprintf("Repositories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := Piped_ConnectionStatus_name[int32(m.GetStatus())]; !ok {
		err := PipedValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Config

	for idx, item := range m.GetPlatformProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipedValidationError{
						field:  fmt.Sprintf("PlatformProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipedValidationError{
						field:  fmt.Sprintf("PlatformProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipedValidationError{
					field:  fmt.Sprintf("PlatformProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecretEncryption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PipedValidationError{
					field:  "SecretEncryption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PipedValidationError{
					field:  "SecretEncryption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretEncryption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PipedValidationError{
				field:  "SecretEncryption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PipedValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PipedValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PipedValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DesiredVersion

	// no validation rules for Disabled

	if m.GetCreatedAt() <= 0 {
		err := PipedValidationError{
			field:  "CreatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() <= 0 {
		err := PipedValidationError{
			field:  "UpdatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PipedMultiError(errors)
	}

	return nil
}

// PipedMultiError is an error wrapping multiple validation errors returned by
// Piped.ValidateAll() if the designated constraints aren't met.
type PipedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipedMultiError) AllErrors() []error { return m }

// PipedValidationError is the validation error returned by Piped.Validate if
// the designated constraints aren't met.
type PipedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipedValidationError) ErrorName() string { return "PipedValidationError" }

// Error satisfies the builtin error interface
func (e PipedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPiped.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipedValidationError{}

// Validate checks the field values on PipedKey with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PipedKey) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PipedKey with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PipedKeyMultiError, or nil
// if none found.
func (m *PipedKey) ValidateAll() error {
	return m.validate(true)
}

func (m *PipedKey) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetHash()) < 1 {
		err := PipedKeyValidationError{
			field:  "Hash",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		err := PipedKeyValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatedAt() <= 0 {
		err := PipedKeyValidationError{
			field:  "CreatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PipedKeyMultiError(errors)
	}

	return nil
}

// PipedKeyMultiError is an error wrapping multiple validation errors returned
// by PipedKey.ValidateAll() if the designated constraints aren't met.
type PipedKeyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PipedKeyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PipedKeyMultiError) AllErrors() []error { return m }

// PipedKeyValidationError is the validation error returned by
// PipedKey.Validate if the designated constraints aren't met.
type PipedKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PipedKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PipedKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PipedKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PipedKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PipedKeyValidationError) ErrorName() string { return "PipedKeyValidationError" }

// Error satisfies the builtin error interface
func (e PipedKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPipedKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PipedKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PipedKeyValidationError{}

// Validate checks the field values on Piped_CloudProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Piped_CloudProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Piped_CloudProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Piped_CloudProviderMultiError, or nil if none found.
func (m *Piped_CloudProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *Piped_CloudProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := Piped_CloudProviderValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := Piped_CloudProviderValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Piped_CloudProviderMultiError(errors)
	}

	return nil
}

// Piped_CloudProviderMultiError is an error wrapping multiple validation
// errors returned by Piped_CloudProvider.ValidateAll() if the designated
// constraints aren't met.
type Piped_CloudProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Piped_CloudProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Piped_CloudProviderMultiError) AllErrors() []error { return m }

// Piped_CloudProviderValidationError is the validation error returned by
// Piped_CloudProvider.Validate if the designated constraints aren't met.
type Piped_CloudProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Piped_CloudProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Piped_CloudProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Piped_CloudProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Piped_CloudProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Piped_CloudProviderValidationError) ErrorName() string {
	return "Piped_CloudProviderValidationError"
}

// Error satisfies the builtin error interface
func (e Piped_CloudProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPiped_CloudProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Piped_CloudProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Piped_CloudProviderValidationError{}

// Validate checks the field values on Piped_PlatformProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Piped_PlatformProvider) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Piped_PlatformProvider with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Piped_PlatformProviderMultiError, or nil if none found.
func (m *Piped_PlatformProvider) ValidateAll() error {
	return m.validate(true)
}

func (m *Piped_PlatformProvider) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := Piped_PlatformProviderValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) < 1 {
		err := Piped_PlatformProviderValidationError{
			field:  "Type",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Piped_PlatformProviderMultiError(errors)
	}

	return nil
}

// Piped_PlatformProviderMultiError is an error wrapping multiple validation
// errors returned by Piped_PlatformProvider.ValidateAll() if the designated
// constraints aren't met.
type Piped_PlatformProviderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Piped_PlatformProviderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Piped_PlatformProviderMultiError) AllErrors() []error { return m }

// Piped_PlatformProviderValidationError is the validation error returned by
// Piped_PlatformProvider.Validate if the designated constraints aren't met.
type Piped_PlatformProviderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Piped_PlatformProviderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Piped_PlatformProviderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Piped_PlatformProviderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Piped_PlatformProviderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Piped_PlatformProviderValidationError) ErrorName() string {
	return "Piped_PlatformProviderValidationError"
}

// Error satisfies the builtin error interface
func (e Piped_PlatformProviderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPiped_PlatformProvider.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Piped_PlatformProviderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Piped_PlatformProviderValidationError{}

// Validate checks the field values on Piped_SecretEncryption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Piped_SecretEncryption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Piped_SecretEncryption with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Piped_SecretEncryptionMultiError, or nil if none found.
func (m *Piped_SecretEncryption) ValidateAll() error {
	return m.validate(true)
}

func (m *Piped_SecretEncryption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Piped_SecretEncryption_Type_InLookup[m.GetType()]; !ok {
		err := Piped_SecretEncryptionValidationError{
			field:  "Type",
			reason: "value must be in list [KEY_PAIR GCP_KMS AWS_KMS NONE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PublicKey

	// no validation rules for EncryptServiceAccount

	if len(errors) > 0 {
		return Piped_SecretEncryptionMultiError(errors)
	}

	return nil
}

// Piped_SecretEncryptionMultiError is an error wrapping multiple validation
// errors returned by Piped_SecretEncryption.ValidateAll() if the designated
// constraints aren't met.
type Piped_SecretEncryptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Piped_SecretEncryptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Piped_SecretEncryptionMultiError) AllErrors() []error { return m }

// Piped_SecretEncryptionValidationError is the validation error returned by
// Piped_SecretEncryption.Validate if the designated constraints aren't met.
type Piped_SecretEncryptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Piped_SecretEncryptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Piped_SecretEncryptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Piped_SecretEncryptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Piped_SecretEncryptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Piped_SecretEncryptionValidationError) ErrorName() string {
	return "Piped_SecretEncryptionValidationError"
}

// Error satisfies the builtin error interface
func (e Piped_SecretEncryptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPiped_SecretEncryption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Piped_SecretEncryptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Piped_SecretEncryptionValidationError{}

var _Piped_SecretEncryption_Type_InLookup = map[string]struct{}{
	"KEY_PAIR": {},
	"GCP_KMS":  {},
	"AWS_KMS":  {},
	"NONE":     {},
}
