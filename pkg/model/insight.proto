// Copyright 2020 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package model;
option go_package = "github.com/pipe-cd/pipecd/pkg/model";

import "validate/validate.proto";

enum InsightResultType {
  MATRIX = 0;
  VECTOR = 1;
}

message InsightSample {
  map<string,string> labels = 1;
  InsightDataPoint data_point = 2;
}

message InsightSampleStream {
  map<string,string> labels = 1;
  repeated InsightDataPoint data_points = 2;
}

message InsightDataPoint {
  int64 timestamp = 1 [(validate.rules).int64.gt = 0];
  float value = 2 [(validate.rules).float.gt = 0];
}

enum InsightMetricsKind {
  DEPLOYMENT_FREQUENCY = 0;
  CHANGE_FAILURE_RATE = 1;
  MTTR = 2;
  LEAD_TIME = 3;
  APPLICATIONS_COUNT = 4;
}

message InsightApplicationCount {
  map<string,string> labels = 1;
  int32 count = 2;
}

enum InsightApplicationCountLabelKey {
  KIND = 0;
  ACTIVE_STATUS = 1;
}

message InsightDeploymentSubset {
  string id = 1 [(validate.rules).string.min_len = 1];
  int64 created_at = 14 [(validate.rules).int64.gte = 0];
  int64 updated_at = 15 [(validate.rules).int64.gte = 0];
}

message InsightDailyDeployment {
  // `date` must be normalized like xxxx/xx/xx:00:00:00;
  int64 date = 1 [(validate.rules).int64.gte = 0];
  int64 created_at = 14 [(validate.rules).int64.gte = 0];
  int64 updated_at = 15 [(validate.rules).int64.gte = 0];

  // DailyDeploymentSubset sorted by created_at ASC.
  repeated InsightDeploymentSubset daily_deployments = 4;
}

// InsightDeploymentChunk represents a chunk that is used by insight
message InsightDeploymentChunk {
  InsightChunkDateRange date_range = 1;

  // `deployments` sorted by DailyDeployment.date ASC.
  repeated InsightDailyDeployment deployments = 2;
}

message InsightDeploymentChunkMetaData {
  message InsightChunkData {
      InsightChunkDateRange date_range = 1;

      // Unique chunk identifier
      string chunk_key = 2;

      // Chunk size (byte)
      int64 chunk_size = 3;
  }

  // Sorted by InsightChunkData.date_range ASC. date_range does not overlap.
  repeated InsightChunkData data = 1;
}

// `from` and `to` must be normalized like xxxx/xx/xx:00:00:00;
// InsightChunkDateRange means date range [from, to].
// If `from` is 1647820800(2022/03/21:00:00:00) and `to` is 1647907200(2022/03/22:00:00:00),
// this means 2022/03/21:00:00:00 ~ 2022/03/22:23:59:59. (note that 2022/03/22 is included)
message InsightChunkDateRange {
  int64 from = 1 [(validate.rules).int64.gte = 0];
  int64 to = 2 [(validate.rules).int64.gte = 0];
}
