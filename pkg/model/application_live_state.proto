// Copyright 2023 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package model;
option go_package = "github.com/pipe-cd/pipecd/pkg/model";

import "validate/validate.proto";
import "pkg/model/common.proto";

// ApplicationLiveStateSnapshot represents the full live state information of an application
// at a specific timestamp.
message ApplicationLiveStateSnapshot {
    reserved 2;

    enum Status {
        UNKNOWN = 0;
        HEALTHY = 1;
        OTHER = 2;
    }
    string application_id = 1 [(validate.rules).string.min_len = 1];
    string piped_id = 3 [(validate.rules).string.min_len = 1];
    string project_id = 4 [(validate.rules).string.min_len = 1];
    ApplicationKind kind = 5 [(validate.rules).enum.defined_only = true];
    Status health_status = 6;

    KubernetesApplicationLiveState kubernetes = 10;
    TerraformApplicationLiveState terraform = 11;
    CloudRunApplicationLiveState cloudrun = 12;
    LambdaApplicationLiveState lambda = 13;

    ApplicationLiveStateVersion version = 15 [(validate.rules).message.required = true];
}

message ApplicationLiveStateVersion {
    // Timestamp when the snapshot is created.
    int64 timestamp = 1 [(validate.rules).int64.gt = 0];
    // Increment number part for the same timestamp.
    int64 index = 2 [(validate.rules).int64.gte = 0];
}

message KubernetesApplicationLiveState {
    repeated KubernetesResourceState resources = 1;
}

message TerraformApplicationLiveState {
}

message CloudRunApplicationLiveState {
    repeated CloudRunResourceState resources = 1;
}

message LambdaApplicationLiveState {
}

// KubernetesResourceState represents the state of a single kubernetes resource object.
message KubernetesResourceState {
    enum HealthStatus {
        UNKNOWN = 0;
        HEALTHY = 1;
        OTHER = 2;
    }

    // The unique ID across the whole cluster generated by Kubernetes.
    string id = 1 [(validate.rules).string.min_len = 1];
    // The sorted list of unique IDs of the owners that depended by this resource.
    // The owner is another resource that created and managing this resource.
    repeated string owner_ids = 2;
    // The sorted list of unique IDs of the parents.
    repeated string parent_ids = 3;
    // The unique name for the type of resource.
    string name = 4 [(validate.rules).string.min_len = 1];
    // The api version of this resource represented by "group/version".
    string api_version = 5 [(validate.rules).string.min_len = 1];
    // The kind of this resource.
    string kind = 6 [(validate.rules).string.min_len = 1];
    // The namespace this resource belongs to.
    // This can be empty for non-namespaced resources.
    string namespace = 7;

    HealthStatus health_status = 8 [(validate.rules).enum.defined_only = true];
    string health_description = 9;

    // The timestamp when this resource was created.
    int64 created_at = 14 [(validate.rules).int64.gt = 0];
    // The timestamp of the last time when this resource was updated.
    int64 updated_at = 15 [(validate.rules).int64.gt = 0];
}

message KubernetesResourceStateEvent {
    enum Type {
        ADD_OR_UPDATED = 0;
        DELETED = 2;
    }

    // The uniquely generated identifier for this event. 
    string id = 1 [(validate.rules).string.min_len = 1];
    string application_id = 2 [(validate.rules).string.min_len = 1];

    Type type = 3 [(validate.rules).enum.defined_only = true];
    KubernetesResourceState state = 4 [(validate.rules).message.required = true];
    ApplicationLiveStateVersion snapshot_version = 5 [(validate.rules).message.required = true];

    int64 created_at = 15 [(validate.rules).int64.gt = 0];
}

// CloudRunResourceState represents the state of a single CloudRun resource object.
message CloudRunResourceState {
    enum HealthStatus {
        UNKNOWN = 0;
        HEALTHY = 1;
        OTHER = 2;
    }

    // The unique ID across the whole cluster generated by Kubernetes.
    string id = 1 [(validate.rules).string.min_len = 1];
    // The sorted list of unique IDs of the owners that depended by this resource.
    // The owner is another resource that created and managing this resource.
    repeated string owner_ids = 2;
    // The sorted list of unique IDs of the parents.
    repeated string parent_ids = 3;
    // The unique name for the type of resource.
    string name = 4 [(validate.rules).string.min_len = 1];
    // The api version of this resource represented by "group/version".
    string api_version = 5 [(validate.rules).string.min_len = 1];
    // The kind of this resource.
    string kind = 6 [(validate.rules).string.min_len = 1];
    // The namespace this resource belongs to.
    // This can be empty for non-namespaced resources.
    string namespace = 7;

    HealthStatus health_status = 8 [(validate.rules).enum.defined_only = true];
    string health_description = 9;

    // The timestamp when this resource was created.
    int64 created_at = 14 [(validate.rules).int64.gt = 0];
    // The timestamp of the last time when this resource was updated.
    int64 updated_at = 15 [(validate.rules).int64.gt = 0];
}
