// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/model/application_live_state.proto

package model

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ApplicationLiveStateSnapshot with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationLiveStateSnapshot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationLiveStateSnapshot with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationLiveStateSnapshotMultiError, or nil if none found.
func (m *ApplicationLiveStateSnapshot) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationLiveStateSnapshot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := ApplicationLiveStateSnapshotValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := ApplicationLiveStateSnapshotValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := ApplicationLiveStateSnapshotValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ApplicationKind_name[int32(m.GetKind())]; !ok {
		err := ApplicationLiveStateSnapshotValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for HealthStatus

	if all {
		switch v := interface{}(m.GetKubernetes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Kubernetes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Kubernetes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKubernetes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationLiveStateSnapshotValidationError{
				field:  "Kubernetes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTerraform()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Terraform",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Terraform",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTerraform()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationLiveStateSnapshotValidationError{
				field:  "Terraform",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCloudrun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Cloudrun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Cloudrun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCloudrun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationLiveStateSnapshotValidationError{
				field:  "Cloudrun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLambda()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Lambda",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Lambda",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLambda()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationLiveStateSnapshotValidationError{
				field:  "Lambda",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetVersion() == nil {
		err := ApplicationLiveStateSnapshotValidationError{
			field:  "Version",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ApplicationLiveStateSnapshotValidationError{
					field:  "Version",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationLiveStateSnapshotValidationError{
				field:  "Version",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ApplicationLiveStateSnapshotMultiError(errors)
	}

	return nil
}

// ApplicationLiveStateSnapshotMultiError is an error wrapping multiple
// validation errors returned by ApplicationLiveStateSnapshot.ValidateAll() if
// the designated constraints aren't met.
type ApplicationLiveStateSnapshotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationLiveStateSnapshotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationLiveStateSnapshotMultiError) AllErrors() []error { return m }

// ApplicationLiveStateSnapshotValidationError is the validation error returned
// by ApplicationLiveStateSnapshot.Validate if the designated constraints
// aren't met.
type ApplicationLiveStateSnapshotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationLiveStateSnapshotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationLiveStateSnapshotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationLiveStateSnapshotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationLiveStateSnapshotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationLiveStateSnapshotValidationError) ErrorName() string {
	return "ApplicationLiveStateSnapshotValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationLiveStateSnapshotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationLiveStateSnapshot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationLiveStateSnapshotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationLiveStateSnapshotValidationError{}

// Validate checks the field values on ApplicationLiveStateVersion with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplicationLiveStateVersion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplicationLiveStateVersion with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplicationLiveStateVersionMultiError, or nil if none found.
func (m *ApplicationLiveStateVersion) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplicationLiveStateVersion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTimestamp() <= 0 {
		err := ApplicationLiveStateVersionValidationError{
			field:  "Timestamp",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetIndex() < 0 {
		err := ApplicationLiveStateVersionValidationError{
			field:  "Index",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApplicationLiveStateVersionMultiError(errors)
	}

	return nil
}

// ApplicationLiveStateVersionMultiError is an error wrapping multiple
// validation errors returned by ApplicationLiveStateVersion.ValidateAll() if
// the designated constraints aren't met.
type ApplicationLiveStateVersionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplicationLiveStateVersionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplicationLiveStateVersionMultiError) AllErrors() []error { return m }

// ApplicationLiveStateVersionValidationError is the validation error returned
// by ApplicationLiveStateVersion.Validate if the designated constraints
// aren't met.
type ApplicationLiveStateVersionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationLiveStateVersionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationLiveStateVersionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationLiveStateVersionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationLiveStateVersionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationLiveStateVersionValidationError) ErrorName() string {
	return "ApplicationLiveStateVersionValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationLiveStateVersionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationLiveStateVersion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationLiveStateVersionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationLiveStateVersionValidationError{}

// Validate checks the field values on KubernetesApplicationLiveState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubernetesApplicationLiveState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesApplicationLiveState with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// KubernetesApplicationLiveStateMultiError, or nil if none found.
func (m *KubernetesApplicationLiveState) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesApplicationLiveState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, KubernetesApplicationLiveStateValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, KubernetesApplicationLiveStateValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return KubernetesApplicationLiveStateValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return KubernetesApplicationLiveStateMultiError(errors)
	}

	return nil
}

// KubernetesApplicationLiveStateMultiError is an error wrapping multiple
// validation errors returned by KubernetesApplicationLiveState.ValidateAll()
// if the designated constraints aren't met.
type KubernetesApplicationLiveStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesApplicationLiveStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesApplicationLiveStateMultiError) AllErrors() []error { return m }

// KubernetesApplicationLiveStateValidationError is the validation error
// returned by KubernetesApplicationLiveState.Validate if the designated
// constraints aren't met.
type KubernetesApplicationLiveStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesApplicationLiveStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesApplicationLiveStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesApplicationLiveStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesApplicationLiveStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesApplicationLiveStateValidationError) ErrorName() string {
	return "KubernetesApplicationLiveStateValidationError"
}

// Error satisfies the builtin error interface
func (e KubernetesApplicationLiveStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesApplicationLiveState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesApplicationLiveStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesApplicationLiveStateValidationError{}

// Validate checks the field values on TerraformApplicationLiveState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TerraformApplicationLiveState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TerraformApplicationLiveState with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TerraformApplicationLiveStateMultiError, or nil if none found.
func (m *TerraformApplicationLiveState) ValidateAll() error {
	return m.validate(true)
}

func (m *TerraformApplicationLiveState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TerraformApplicationLiveStateMultiError(errors)
	}

	return nil
}

// TerraformApplicationLiveStateMultiError is an error wrapping multiple
// validation errors returned by TerraformApplicationLiveState.ValidateAll()
// if the designated constraints aren't met.
type TerraformApplicationLiveStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TerraformApplicationLiveStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TerraformApplicationLiveStateMultiError) AllErrors() []error { return m }

// TerraformApplicationLiveStateValidationError is the validation error
// returned by TerraformApplicationLiveState.Validate if the designated
// constraints aren't met.
type TerraformApplicationLiveStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TerraformApplicationLiveStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TerraformApplicationLiveStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TerraformApplicationLiveStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TerraformApplicationLiveStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TerraformApplicationLiveStateValidationError) ErrorName() string {
	return "TerraformApplicationLiveStateValidationError"
}

// Error satisfies the builtin error interface
func (e TerraformApplicationLiveStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTerraformApplicationLiveState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TerraformApplicationLiveStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TerraformApplicationLiveStateValidationError{}

// Validate checks the field values on CloudRunApplicationLiveState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudRunApplicationLiveState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudRunApplicationLiveState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudRunApplicationLiveStateMultiError, or nil if none found.
func (m *CloudRunApplicationLiveState) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudRunApplicationLiveState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CloudRunApplicationLiveStateValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CloudRunApplicationLiveStateValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CloudRunApplicationLiveStateValidationError{
					field:  fmt.Sprintf("Resources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CloudRunApplicationLiveStateMultiError(errors)
	}

	return nil
}

// CloudRunApplicationLiveStateMultiError is an error wrapping multiple
// validation errors returned by CloudRunApplicationLiveState.ValidateAll() if
// the designated constraints aren't met.
type CloudRunApplicationLiveStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudRunApplicationLiveStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudRunApplicationLiveStateMultiError) AllErrors() []error { return m }

// CloudRunApplicationLiveStateValidationError is the validation error returned
// by CloudRunApplicationLiveState.Validate if the designated constraints
// aren't met.
type CloudRunApplicationLiveStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudRunApplicationLiveStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudRunApplicationLiveStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudRunApplicationLiveStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudRunApplicationLiveStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudRunApplicationLiveStateValidationError) ErrorName() string {
	return "CloudRunApplicationLiveStateValidationError"
}

// Error satisfies the builtin error interface
func (e CloudRunApplicationLiveStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudRunApplicationLiveState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudRunApplicationLiveStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudRunApplicationLiveStateValidationError{}

// Validate checks the field values on LambdaApplicationLiveState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LambdaApplicationLiveState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LambdaApplicationLiveState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LambdaApplicationLiveStateMultiError, or nil if none found.
func (m *LambdaApplicationLiveState) ValidateAll() error {
	return m.validate(true)
}

func (m *LambdaApplicationLiveState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LambdaApplicationLiveStateMultiError(errors)
	}

	return nil
}

// LambdaApplicationLiveStateMultiError is an error wrapping multiple
// validation errors returned by LambdaApplicationLiveState.ValidateAll() if
// the designated constraints aren't met.
type LambdaApplicationLiveStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LambdaApplicationLiveStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LambdaApplicationLiveStateMultiError) AllErrors() []error { return m }

// LambdaApplicationLiveStateValidationError is the validation error returned
// by LambdaApplicationLiveState.Validate if the designated constraints aren't met.
type LambdaApplicationLiveStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LambdaApplicationLiveStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LambdaApplicationLiveStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LambdaApplicationLiveStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LambdaApplicationLiveStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LambdaApplicationLiveStateValidationError) ErrorName() string {
	return "LambdaApplicationLiveStateValidationError"
}

// Error satisfies the builtin error interface
func (e LambdaApplicationLiveStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLambdaApplicationLiveState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LambdaApplicationLiveStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LambdaApplicationLiveStateValidationError{}

// Validate checks the field values on KubernetesResourceState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubernetesResourceState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesResourceState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesResourceStateMultiError, or nil if none found.
func (m *KubernetesResourceState) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesResourceState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := KubernetesResourceStateValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := KubernetesResourceStateValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiVersion()) < 1 {
		err := KubernetesResourceStateValidationError{
			field:  "ApiVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := KubernetesResourceStateValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	if _, ok := KubernetesResourceState_HealthStatus_name[int32(m.GetHealthStatus())]; !ok {
		err := KubernetesResourceStateValidationError{
			field:  "HealthStatus",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for HealthDescription

	if m.GetCreatedAt() <= 0 {
		err := KubernetesResourceStateValidationError{
			field:  "CreatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() <= 0 {
		err := KubernetesResourceStateValidationError{
			field:  "UpdatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return KubernetesResourceStateMultiError(errors)
	}

	return nil
}

// KubernetesResourceStateMultiError is an error wrapping multiple validation
// errors returned by KubernetesResourceState.ValidateAll() if the designated
// constraints aren't met.
type KubernetesResourceStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesResourceStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesResourceStateMultiError) AllErrors() []error { return m }

// KubernetesResourceStateValidationError is the validation error returned by
// KubernetesResourceState.Validate if the designated constraints aren't met.
type KubernetesResourceStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesResourceStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesResourceStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesResourceStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesResourceStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesResourceStateValidationError) ErrorName() string {
	return "KubernetesResourceStateValidationError"
}

// Error satisfies the builtin error interface
func (e KubernetesResourceStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesResourceState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesResourceStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesResourceStateValidationError{}

// Validate checks the field values on KubernetesResourceStateEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *KubernetesResourceStateEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KubernetesResourceStateEvent with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// KubernetesResourceStateEventMultiError, or nil if none found.
func (m *KubernetesResourceStateEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *KubernetesResourceStateEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := KubernetesResourceStateEventValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := KubernetesResourceStateEventValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := KubernetesResourceStateEvent_Type_name[int32(m.GetType())]; !ok {
		err := KubernetesResourceStateEventValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() == nil {
		err := KubernetesResourceStateEventValidationError{
			field:  "State",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KubernetesResourceStateEventValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KubernetesResourceStateEventValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KubernetesResourceStateEventValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetSnapshotVersion() == nil {
		err := KubernetesResourceStateEventValidationError{
			field:  "SnapshotVersion",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSnapshotVersion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, KubernetesResourceStateEventValidationError{
					field:  "SnapshotVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, KubernetesResourceStateEventValidationError{
					field:  "SnapshotVersion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnapshotVersion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return KubernetesResourceStateEventValidationError{
				field:  "SnapshotVersion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCreatedAt() <= 0 {
		err := KubernetesResourceStateEventValidationError{
			field:  "CreatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return KubernetesResourceStateEventMultiError(errors)
	}

	return nil
}

// KubernetesResourceStateEventMultiError is an error wrapping multiple
// validation errors returned by KubernetesResourceStateEvent.ValidateAll() if
// the designated constraints aren't met.
type KubernetesResourceStateEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KubernetesResourceStateEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KubernetesResourceStateEventMultiError) AllErrors() []error { return m }

// KubernetesResourceStateEventValidationError is the validation error returned
// by KubernetesResourceStateEvent.Validate if the designated constraints
// aren't met.
type KubernetesResourceStateEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KubernetesResourceStateEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KubernetesResourceStateEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KubernetesResourceStateEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KubernetesResourceStateEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KubernetesResourceStateEventValidationError) ErrorName() string {
	return "KubernetesResourceStateEventValidationError"
}

// Error satisfies the builtin error interface
func (e KubernetesResourceStateEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKubernetesResourceStateEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KubernetesResourceStateEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KubernetesResourceStateEventValidationError{}

// Validate checks the field values on CloudRunResourceState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloudRunResourceState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudRunResourceState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloudRunResourceStateMultiError, or nil if none found.
func (m *CloudRunResourceState) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudRunResourceState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := CloudRunResourceStateValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CloudRunResourceStateValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetApiVersion()) < 1 {
		err := CloudRunResourceStateValidationError{
			field:  "ApiVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKind()) < 1 {
		err := CloudRunResourceStateValidationError{
			field:  "Kind",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Namespace

	if _, ok := CloudRunResourceState_HealthStatus_name[int32(m.GetHealthStatus())]; !ok {
		err := CloudRunResourceStateValidationError{
			field:  "HealthStatus",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for HealthDescription

	if m.GetCreatedAt() <= 0 {
		err := CloudRunResourceStateValidationError{
			field:  "CreatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() <= 0 {
		err := CloudRunResourceStateValidationError{
			field:  "UpdatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CloudRunResourceStateMultiError(errors)
	}

	return nil
}

// CloudRunResourceStateMultiError is an error wrapping multiple validation
// errors returned by CloudRunResourceState.ValidateAll() if the designated
// constraints aren't met.
type CloudRunResourceStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudRunResourceStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudRunResourceStateMultiError) AllErrors() []error { return m }

// CloudRunResourceStateValidationError is the validation error returned by
// CloudRunResourceState.Validate if the designated constraints aren't met.
type CloudRunResourceStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudRunResourceStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudRunResourceStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudRunResourceStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudRunResourceStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudRunResourceStateValidationError) ErrorName() string {
	return "CloudRunResourceStateValidationError"
}

// Error satisfies the builtin error interface
func (e CloudRunResourceStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudRunResourceState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudRunResourceStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudRunResourceStateValidationError{}
