// Copyright 2023 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: pkg/model/deployment_chain.proto

package model

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChainStatus represents the current status of deployment chain.
type ChainStatus int32

const (
	// DEPLOYMENT_CHAIN_PENDING means the chain just initialized,
	// all block deployments have not been initialized or still at PENDING.
	ChainStatus_DEPLOYMENT_CHAIN_PENDING ChainStatus = 0
	// DEPLOYMENT_CHAIN_RUNNING means at least one block has node, which has
	// its deploymentRef and that deployment is RUNNING or after that state.
	ChainStatus_DEPLOYMENT_CHAIN_RUNNING ChainStatus = 1
	// DEPLOYMENT_CHAIN_SUCCESS means all blocks in the chain had finished with
	// DEPLOYMENT_BLOCK_SUCCESS status.
	ChainStatus_DEPLOYMENT_CHAIN_SUCCESS ChainStatus = 2
	// DEPLOYMENT_CHAIN_FAILURE means one of the chain's blocks had finished with
	// DEPLOYMENT_BLOCK_FAILURE status.
	ChainStatus_DEPLOYMENT_CHAIN_FAILURE ChainStatus = 3
	// DEPLOYMENT_CHAIN_CANCELLED means one of the chain's blocks had finished with
	// DEPLOYMENT_BLOCK_CANCELLED status.
	ChainStatus_DEPLOYMENT_CHAIN_CANCELLED ChainStatus = 4
)

// Enum value maps for ChainStatus.
var (
	ChainStatus_name = map[int32]string{
		0: "DEPLOYMENT_CHAIN_PENDING",
		1: "DEPLOYMENT_CHAIN_RUNNING",
		2: "DEPLOYMENT_CHAIN_SUCCESS",
		3: "DEPLOYMENT_CHAIN_FAILURE",
		4: "DEPLOYMENT_CHAIN_CANCELLED",
	}
	ChainStatus_value = map[string]int32{
		"DEPLOYMENT_CHAIN_PENDING":   0,
		"DEPLOYMENT_CHAIN_RUNNING":   1,
		"DEPLOYMENT_CHAIN_SUCCESS":   2,
		"DEPLOYMENT_CHAIN_FAILURE":   3,
		"DEPLOYMENT_CHAIN_CANCELLED": 4,
	}
)

func (x ChainStatus) Enum() *ChainStatus {
	p := new(ChainStatus)
	*p = x
	return p
}

func (x ChainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_model_deployment_chain_proto_enumTypes[0].Descriptor()
}

func (ChainStatus) Type() protoreflect.EnumType {
	return &file_pkg_model_deployment_chain_proto_enumTypes[0]
}

func (x ChainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainStatus.Descriptor instead.
func (ChainStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_model_deployment_chain_proto_rawDescGZIP(), []int{0}
}

// ChainBlockStatus represents the current status of a block in deployment chain.
type ChainBlockStatus int32

const (
	// DEPLOYMENT_BLOCK_PENDING means the block's nodes just initialized,
	// all node deployments have not been initialized or still at PENDING.
	ChainBlockStatus_DEPLOYMENT_BLOCK_PENDING ChainBlockStatus = 0
	// DEPLOYMENT_BLOCK_RUNNING means at least one of the block's nodes has
	// its deploymentRef and that deployment is RUNNING or after that state.
	ChainBlockStatus_DEPLOYMENT_BLOCK_RUNNING ChainBlockStatus = 1
	// DEPLOYMENT_BLOCK_SUCCESS means all nodes in the block had finished with
	// DEPLOYMENT_SUCCESS status.
	ChainBlockStatus_DEPLOYMENT_BLOCK_SUCCESS ChainBlockStatus = 2
	// DEPLOYMENT_BLOCK_FAILURE means one of the block's nodes had finished with
	// DEPLOYMENT_FAILURE status.
	ChainBlockStatus_DEPLOYMENT_BLOCK_FAILURE ChainBlockStatus = 3
	// DEPLOYMENT_BLOCK_CANCELLED means one of the block's nodes had finished with
	// DEPLOYMENT_CANCELLED status.
	ChainBlockStatus_DEPLOYMENT_BLOCK_CANCELLED ChainBlockStatus = 4
)

// Enum value maps for ChainBlockStatus.
var (
	ChainBlockStatus_name = map[int32]string{
		0: "DEPLOYMENT_BLOCK_PENDING",
		1: "DEPLOYMENT_BLOCK_RUNNING",
		2: "DEPLOYMENT_BLOCK_SUCCESS",
		3: "DEPLOYMENT_BLOCK_FAILURE",
		4: "DEPLOYMENT_BLOCK_CANCELLED",
	}
	ChainBlockStatus_value = map[string]int32{
		"DEPLOYMENT_BLOCK_PENDING":   0,
		"DEPLOYMENT_BLOCK_RUNNING":   1,
		"DEPLOYMENT_BLOCK_SUCCESS":   2,
		"DEPLOYMENT_BLOCK_FAILURE":   3,
		"DEPLOYMENT_BLOCK_CANCELLED": 4,
	}
)

func (x ChainBlockStatus) Enum() *ChainBlockStatus {
	p := new(ChainBlockStatus)
	*p = x
	return p
}

func (x ChainBlockStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainBlockStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_model_deployment_chain_proto_enumTypes[1].Descriptor()
}

func (ChainBlockStatus) Type() protoreflect.EnumType {
	return &file_pkg_model_deployment_chain_proto_enumTypes[1]
}

func (x ChainBlockStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainBlockStatus.Descriptor instead.
func (ChainBlockStatus) EnumDescriptor() ([]byte, []int) {
	return file_pkg_model_deployment_chain_proto_rawDescGZIP(), []int{1}
}

type DeploymentChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The generated unique identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the project this deployment chain belongs to.
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// Status of this deployment chain.
	Status ChainStatus `protobuf:"varint,3,opt,name=status,proto3,enum=model.ChainStatus" json:"status,omitempty"`
	// List of all deployment block in the chain which contains all
	// configuration required to perform deployment(s).
	Blocks []*ChainBlock `protobuf:"bytes,4,rep,name=blocks,proto3" json:"blocks,omitempty"`
	// Unix time when all the applications in this chain are deployed.
	CompletedAt int64 `protobuf:"varint,100,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	// Unix time when the deployment chain is created.
	CreatedAt int64 `protobuf:"varint,101,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Unix time of the last time when the deployment chain is updated.
	UpdatedAt int64 `protobuf:"varint,102,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DeploymentChain) Reset() {
	*x = DeploymentChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_chain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentChain) ProtoMessage() {}

func (x *DeploymentChain) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_chain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentChain.ProtoReflect.Descriptor instead.
func (*DeploymentChain) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_chain_proto_rawDescGZIP(), []int{0}
}

func (x *DeploymentChain) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeploymentChain) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeploymentChain) GetStatus() ChainStatus {
	if x != nil {
		return x.Status
	}
	return ChainStatus_DEPLOYMENT_CHAIN_PENDING
}

func (x *DeploymentChain) GetBlocks() []*ChainBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *DeploymentChain) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

func (x *DeploymentChain) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DeploymentChain) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ChainApplicationRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId   string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
}

func (x *ChainApplicationRef) Reset() {
	*x = ChainApplicationRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_chain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainApplicationRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainApplicationRef) ProtoMessage() {}

func (x *ChainApplicationRef) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_chain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainApplicationRef.ProtoReflect.Descriptor instead.
func (*ChainApplicationRef) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_chain_proto_rawDescGZIP(), []int{1}
}

func (x *ChainApplicationRef) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ChainApplicationRef) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

type ChainDeploymentRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string           `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Status       DeploymentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=model.DeploymentStatus" json:"status,omitempty"`
	StatusReason string           `protobuf:"bytes,3,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
}

func (x *ChainDeploymentRef) Reset() {
	*x = ChainDeploymentRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_chain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainDeploymentRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainDeploymentRef) ProtoMessage() {}

func (x *ChainDeploymentRef) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_chain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainDeploymentRef.ProtoReflect.Descriptor instead.
func (*ChainDeploymentRef) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_chain_proto_rawDescGZIP(), []int{2}
}

func (x *ChainDeploymentRef) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ChainDeploymentRef) GetStatus() DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return DeploymentStatus_DEPLOYMENT_PENDING
}

func (x *ChainDeploymentRef) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

type ChainNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationRef *ChainApplicationRef `protobuf:"bytes,1,opt,name=application_ref,json=applicationRef,proto3" json:"application_ref,omitempty"`
	DeploymentRef  *ChainDeploymentRef  `protobuf:"bytes,2,opt,name=deployment_ref,json=deploymentRef,proto3" json:"deployment_ref,omitempty"`
}

func (x *ChainNode) Reset() {
	*x = ChainNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_chain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainNode) ProtoMessage() {}

func (x *ChainNode) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_chain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainNode.ProtoReflect.Descriptor instead.
func (*ChainNode) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_chain_proto_rawDescGZIP(), []int{3}
}

func (x *ChainNode) GetApplicationRef() *ChainApplicationRef {
	if x != nil {
		return x.ApplicationRef
	}
	return nil
}

func (x *ChainNode) GetDeploymentRef() *ChainDeploymentRef {
	if x != nil {
		return x.DeploymentRef
	}
	return nil
}

type ChainBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of applications which should be deployed at the same time in chain.
	Nodes []*ChainNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	// Status of this deployment chain block.
	Status ChainBlockStatus `protobuf:"varint,2,opt,name=status,proto3,enum=model.ChainBlockStatus" json:"status,omitempty"`
	// Unix time when the deployment chain node is started.
	StartedAt int64 `protobuf:"varint,100,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Unix time when all the applications in this chain node are deployed.
	CompletedAt int64 `protobuf:"varint,101,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *ChainBlock) Reset() {
	*x = ChainBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_model_deployment_chain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainBlock) ProtoMessage() {}

func (x *ChainBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_model_deployment_chain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainBlock.ProtoReflect.Descriptor instead.
func (*ChainBlock) Descriptor() ([]byte, []int) {
	return file_pkg_model_deployment_chain_proto_rawDescGZIP(), []int{4}
}

func (x *ChainBlock) GetNodes() []*ChainNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ChainBlock) GetStatus() ChainBlockStatus {
	if x != nil {
		return x.Status
	}
	return ChainBlockStatus_DEPLOYMENT_BLOCK_PENDING
}

func (x *ChainBlock) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *ChainBlock) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

var File_pkg_model_deployment_chain_proto protoreflect.FileDescriptor

var file_pkg_model_deployment_chain_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf,
	0x02, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22,
	0x02, 0x28, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x26, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x70, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x2c, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x22, 0xc3, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x28, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0xa5, 0x01, 0x0a,
	0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x52,
	0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x2a, 0xaa, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50,
	0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c, 0x4f,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x04, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x69, 0x70, 0x65, 0x2d, 0x63, 0x64, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x63, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_model_deployment_chain_proto_rawDescOnce sync.Once
	file_pkg_model_deployment_chain_proto_rawDescData = file_pkg_model_deployment_chain_proto_rawDesc
)

func file_pkg_model_deployment_chain_proto_rawDescGZIP() []byte {
	file_pkg_model_deployment_chain_proto_rawDescOnce.Do(func() {
		file_pkg_model_deployment_chain_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_model_deployment_chain_proto_rawDescData)
	})
	return file_pkg_model_deployment_chain_proto_rawDescData
}

var file_pkg_model_deployment_chain_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_model_deployment_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_pkg_model_deployment_chain_proto_goTypes = []interface{}{
	(ChainStatus)(0),            // 0: model.ChainStatus
	(ChainBlockStatus)(0),       // 1: model.ChainBlockStatus
	(*DeploymentChain)(nil),     // 2: model.DeploymentChain
	(*ChainApplicationRef)(nil), // 3: model.ChainApplicationRef
	(*ChainDeploymentRef)(nil),  // 4: model.ChainDeploymentRef
	(*ChainNode)(nil),           // 5: model.ChainNode
	(*ChainBlock)(nil),          // 6: model.ChainBlock
	(DeploymentStatus)(0),       // 7: model.DeploymentStatus
}
var file_pkg_model_deployment_chain_proto_depIdxs = []int32{
	0, // 0: model.DeploymentChain.status:type_name -> model.ChainStatus
	6, // 1: model.DeploymentChain.blocks:type_name -> model.ChainBlock
	7, // 2: model.ChainDeploymentRef.status:type_name -> model.DeploymentStatus
	3, // 3: model.ChainNode.application_ref:type_name -> model.ChainApplicationRef
	4, // 4: model.ChainNode.deployment_ref:type_name -> model.ChainDeploymentRef
	5, // 5: model.ChainBlock.nodes:type_name -> model.ChainNode
	1, // 6: model.ChainBlock.status:type_name -> model.ChainBlockStatus
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pkg_model_deployment_chain_proto_init() }
func file_pkg_model_deployment_chain_proto_init() {
	if File_pkg_model_deployment_chain_proto != nil {
		return
	}
	file_pkg_model_deployment_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_pkg_model_deployment_chain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_chain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainApplicationRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_chain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainDeploymentRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_chain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_model_deployment_chain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_model_deployment_chain_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_model_deployment_chain_proto_goTypes,
		DependencyIndexes: file_pkg_model_deployment_chain_proto_depIdxs,
		EnumInfos:         file_pkg_model_deployment_chain_proto_enumTypes,
		MessageInfos:      file_pkg_model_deployment_chain_proto_msgTypes,
	}.Build()
	File_pkg_model_deployment_chain_proto = out.File
	file_pkg_model_deployment_chain_proto_rawDesc = nil
	file_pkg_model_deployment_chain_proto_goTypes = nil
	file_pkg_model_deployment_chain_proto_depIdxs = nil
}
