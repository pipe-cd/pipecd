// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pipe-cd/pipecd/pkg/insight (interfaces: Store)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod --package=insightstoretest --destination=pkg/insight/insighttest/insight.mock.go github.com/pipe-cd/pipecd/pkg/insight Store
//

// Package insightstoretest is a generated GoMock package.
package insightstoretest

import (
	context "context"
	reflect "reflect"

	insight "github.com/pipe-cd/pipecd/pkg/insight"
	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetApplications mocks base method.
func (m *MockStore) GetApplications(ctx context.Context, projectID string) (*insight.ProjectApplicationData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", ctx, projectID)
	ret0, _ := ret[0].(*insight.ProjectApplicationData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockStoreMockRecorder) GetApplications(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockStore)(nil).GetApplications), ctx, projectID)
}

// GetMilestone mocks base method.
func (m *MockStore) GetMilestone(ctx context.Context) (*insight.Milestone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMilestone", ctx)
	ret0, _ := ret[0].(*insight.Milestone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMilestone indicates an expected call of GetMilestone.
func (mr *MockStoreMockRecorder) GetMilestone(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMilestone", reflect.TypeOf((*MockStore)(nil).GetMilestone), ctx)
}

// ListCompletedDeployments mocks base method.
func (m *MockStore) ListCompletedDeployments(ctx context.Context, projectID string, from, to int64) ([]*insight.DeploymentData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCompletedDeployments", ctx, projectID, from, to)
	ret0, _ := ret[0].([]*insight.DeploymentData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCompletedDeployments indicates an expected call of ListCompletedDeployments.
func (mr *MockStoreMockRecorder) ListCompletedDeployments(ctx, projectID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCompletedDeployments", reflect.TypeOf((*MockStore)(nil).ListCompletedDeployments), ctx, projectID, from, to)
}

// PutApplications mocks base method.
func (m *MockStore) PutApplications(ctx context.Context, projectID string, as *insight.ProjectApplicationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutApplications", ctx, projectID, as)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutApplications indicates an expected call of PutApplications.
func (mr *MockStoreMockRecorder) PutApplications(ctx, projectID, as any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutApplications", reflect.TypeOf((*MockStore)(nil).PutApplications), ctx, projectID, as)
}

// PutCompletedDeployments mocks base method.
func (m *MockStore) PutCompletedDeployments(ctx context.Context, projectID string, ds []*insight.DeploymentData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCompletedDeployments", ctx, projectID, ds)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCompletedDeployments indicates an expected call of PutCompletedDeployments.
func (mr *MockStoreMockRecorder) PutCompletedDeployments(ctx, projectID, ds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCompletedDeployments", reflect.TypeOf((*MockStore)(nil).PutCompletedDeployments), ctx, projectID, ds)
}

// PutMilestone mocks base method.
func (m_2 *MockStore) PutMilestone(ctx context.Context, m *insight.Milestone) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "PutMilestone", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMilestone indicates an expected call of PutMilestone.
func (mr *MockStoreMockRecorder) PutMilestone(ctx, m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMilestone", reflect.TypeOf((*MockStore)(nil).PutMilestone), ctx, m)
}
