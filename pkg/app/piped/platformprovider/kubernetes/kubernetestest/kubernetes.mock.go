// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pipe-cd/pipecd/pkg/app/piped/platformprovider/kubernetes (interfaces: Applier,Loader)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod --package=kubernetestest --destination=pkg/app/piped/platformprovider/kubernetes/kubernetestest/kubernetes.mock.go github.com/pipe-cd/pipecd/pkg/app/piped/platformprovider/kubernetes Applier,Loader
//

// Package kubernetestest is a generated GoMock package.
package kubernetestest

import (
	context "context"
	reflect "reflect"

	kubernetes "github.com/pipe-cd/pipecd/pkg/app/piped/platformprovider/kubernetes"
	gomock "go.uber.org/mock/gomock"
)

// MockApplier is a mock of Applier interface.
type MockApplier struct {
	ctrl     *gomock.Controller
	recorder *MockApplierMockRecorder
	isgomock struct{}
}

// MockApplierMockRecorder is the mock recorder for MockApplier.
type MockApplierMockRecorder struct {
	mock *MockApplier
}

// NewMockApplier creates a new mock instance.
func NewMockApplier(ctrl *gomock.Controller) *MockApplier {
	mock := &MockApplier{ctrl: ctrl}
	mock.recorder = &MockApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplier) EXPECT() *MockApplierMockRecorder {
	return m.recorder
}

// ApplyManifest mocks base method.
func (m *MockApplier) ApplyManifest(ctx context.Context, manifest kubernetes.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyManifest", ctx, manifest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyManifest indicates an expected call of ApplyManifest.
func (mr *MockApplierMockRecorder) ApplyManifest(ctx, manifest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyManifest", reflect.TypeOf((*MockApplier)(nil).ApplyManifest), ctx, manifest)
}

// CreateManifest mocks base method.
func (m *MockApplier) CreateManifest(ctx context.Context, manifest kubernetes.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManifest", ctx, manifest)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateManifest indicates an expected call of CreateManifest.
func (mr *MockApplierMockRecorder) CreateManifest(ctx, manifest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManifest", reflect.TypeOf((*MockApplier)(nil).CreateManifest), ctx, manifest)
}

// Delete mocks base method.
func (m *MockApplier) Delete(ctx context.Context, key kubernetes.ResourceKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockApplierMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplier)(nil).Delete), ctx, key)
}

// ForceReplaceManifest mocks base method.
func (m *MockApplier) ForceReplaceManifest(ctx context.Context, manifest kubernetes.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceReplaceManifest", ctx, manifest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceReplaceManifest indicates an expected call of ForceReplaceManifest.
func (mr *MockApplierMockRecorder) ForceReplaceManifest(ctx, manifest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceReplaceManifest", reflect.TypeOf((*MockApplier)(nil).ForceReplaceManifest), ctx, manifest)
}

// ReplaceManifest mocks base method.
func (m *MockApplier) ReplaceManifest(ctx context.Context, manifest kubernetes.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceManifest", ctx, manifest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceManifest indicates an expected call of ReplaceManifest.
func (mr *MockApplierMockRecorder) ReplaceManifest(ctx, manifest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceManifest", reflect.TypeOf((*MockApplier)(nil).ReplaceManifest), ctx, manifest)
}

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
	isgomock struct{}
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// LoadManifests mocks base method.
func (m *MockLoader) LoadManifests(ctx context.Context) ([]kubernetes.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadManifests", ctx)
	ret0, _ := ret[0].([]kubernetes.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadManifests indicates an expected call of LoadManifests.
func (mr *MockLoaderMockRecorder) LoadManifests(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadManifests", reflect.TypeOf((*MockLoader)(nil).LoadManifests), ctx)
}
