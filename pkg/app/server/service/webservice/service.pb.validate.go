// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/app/server/service/webservice/service.proto

package webservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	model "github.com/pipe-cd/pipecd/pkg/model"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = model.ApplicationKind(0)
)

// Validate checks the field values on RegisterPipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterPipedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterPipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterPipedRequestMultiError, or nil if none found.
func (m *RegisterPipedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterPipedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Desc

	if len(errors) > 0 {
		return RegisterPipedRequestMultiError(errors)
	}

	return nil
}

// RegisterPipedRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterPipedRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterPipedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterPipedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterPipedRequestMultiError) AllErrors() []error { return m }

// RegisterPipedRequestValidationError is the validation error returned by
// RegisterPipedRequest.Validate if the designated constraints aren't met.
type RegisterPipedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterPipedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterPipedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterPipedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterPipedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterPipedRequestValidationError) ErrorName() string {
	return "RegisterPipedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterPipedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterPipedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterPipedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterPipedRequestValidationError{}

// Validate checks the field values on RegisterPipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterPipedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterPipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterPipedResponseMultiError, or nil if none found.
func (m *RegisterPipedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterPipedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Key

	if len(errors) > 0 {
		return RegisterPipedResponseMultiError(errors)
	}

	return nil
}

// RegisterPipedResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterPipedResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterPipedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterPipedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterPipedResponseMultiError) AllErrors() []error { return m }

// RegisterPipedResponseValidationError is the validation error returned by
// RegisterPipedResponse.Validate if the designated constraints aren't met.
type RegisterPipedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterPipedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterPipedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterPipedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterPipedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterPipedResponseValidationError) ErrorName() string {
	return "RegisterPipedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterPipedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterPipedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterPipedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterPipedResponseValidationError{}

// Validate checks the field values on UpdatePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePipedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePipedRequestMultiError, or nil if none found.
func (m *UpdatePipedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePipedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := UpdatePipedRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdatePipedRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	if len(errors) > 0 {
		return UpdatePipedRequestMultiError(errors)
	}

	return nil
}

// UpdatePipedRequestMultiError is an error wrapping multiple validation errors
// returned by UpdatePipedRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdatePipedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePipedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePipedRequestMultiError) AllErrors() []error { return m }

// UpdatePipedRequestValidationError is the validation error returned by
// UpdatePipedRequest.Validate if the designated constraints aren't met.
type UpdatePipedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePipedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePipedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePipedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePipedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePipedRequestValidationError) ErrorName() string {
	return "UpdatePipedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePipedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePipedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePipedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePipedRequestValidationError{}

// Validate checks the field values on UpdatePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePipedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePipedResponseMultiError, or nil if none found.
func (m *UpdatePipedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePipedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePipedResponseMultiError(errors)
	}

	return nil
}

// UpdatePipedResponseMultiError is an error wrapping multiple validation
// errors returned by UpdatePipedResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePipedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePipedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePipedResponseMultiError) AllErrors() []error { return m }

// UpdatePipedResponseValidationError is the validation error returned by
// UpdatePipedResponse.Validate if the designated constraints aren't met.
type UpdatePipedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePipedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePipedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePipedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePipedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePipedResponseValidationError) ErrorName() string {
	return "UpdatePipedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePipedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePipedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePipedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePipedResponseValidationError{}

// Validate checks the field values on RecreatePipedKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecreatePipedKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecreatePipedKeyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecreatePipedKeyRequestMultiError, or nil if none found.
func (m *RecreatePipedKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecreatePipedKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RecreatePipedKeyRequestMultiError(errors)
	}

	return nil
}

// RecreatePipedKeyRequestMultiError is an error wrapping multiple validation
// errors returned by RecreatePipedKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type RecreatePipedKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecreatePipedKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecreatePipedKeyRequestMultiError) AllErrors() []error { return m }

// RecreatePipedKeyRequestValidationError is the validation error returned by
// RecreatePipedKeyRequest.Validate if the designated constraints aren't met.
type RecreatePipedKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecreatePipedKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecreatePipedKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecreatePipedKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecreatePipedKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecreatePipedKeyRequestValidationError) ErrorName() string {
	return "RecreatePipedKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecreatePipedKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecreatePipedKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecreatePipedKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecreatePipedKeyRequestValidationError{}

// Validate checks the field values on RecreatePipedKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecreatePipedKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecreatePipedKeyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecreatePipedKeyResponseMultiError, or nil if none found.
func (m *RecreatePipedKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RecreatePipedKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return RecreatePipedKeyResponseMultiError(errors)
	}

	return nil
}

// RecreatePipedKeyResponseMultiError is an error wrapping multiple validation
// errors returned by RecreatePipedKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type RecreatePipedKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecreatePipedKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecreatePipedKeyResponseMultiError) AllErrors() []error { return m }

// RecreatePipedKeyResponseValidationError is the validation error returned by
// RecreatePipedKeyResponse.Validate if the designated constraints aren't met.
type RecreatePipedKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecreatePipedKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecreatePipedKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecreatePipedKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecreatePipedKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecreatePipedKeyResponseValidationError) ErrorName() string {
	return "RecreatePipedKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecreatePipedKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecreatePipedKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecreatePipedKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecreatePipedKeyResponseValidationError{}

// Validate checks the field values on DeleteOldPipedKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOldPipedKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOldPipedKeysRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOldPipedKeysRequestMultiError, or nil if none found.
func (m *DeleteOldPipedKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOldPipedKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := DeleteOldPipedKeysRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOldPipedKeysRequestMultiError(errors)
	}

	return nil
}

// DeleteOldPipedKeysRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOldPipedKeysRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOldPipedKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOldPipedKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOldPipedKeysRequestMultiError) AllErrors() []error { return m }

// DeleteOldPipedKeysRequestValidationError is the validation error returned by
// DeleteOldPipedKeysRequest.Validate if the designated constraints aren't met.
type DeleteOldPipedKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOldPipedKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOldPipedKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOldPipedKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOldPipedKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOldPipedKeysRequestValidationError) ErrorName() string {
	return "DeleteOldPipedKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOldPipedKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOldPipedKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOldPipedKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOldPipedKeysRequestValidationError{}

// Validate checks the field values on DeleteOldPipedKeysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOldPipedKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOldPipedKeysResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOldPipedKeysResponseMultiError, or nil if none found.
func (m *DeleteOldPipedKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOldPipedKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOldPipedKeysResponseMultiError(errors)
	}

	return nil
}

// DeleteOldPipedKeysResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOldPipedKeysResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOldPipedKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOldPipedKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOldPipedKeysResponseMultiError) AllErrors() []error { return m }

// DeleteOldPipedKeysResponseValidationError is the validation error returned
// by DeleteOldPipedKeysResponse.Validate if the designated constraints aren't met.
type DeleteOldPipedKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOldPipedKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOldPipedKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOldPipedKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOldPipedKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOldPipedKeysResponseValidationError) ErrorName() string {
	return "DeleteOldPipedKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOldPipedKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOldPipedKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOldPipedKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOldPipedKeysResponseValidationError{}

// Validate checks the field values on EnablePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnablePipedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnablePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnablePipedRequestMultiError, or nil if none found.
func (m *EnablePipedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnablePipedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := EnablePipedRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnablePipedRequestMultiError(errors)
	}

	return nil
}

// EnablePipedRequestMultiError is an error wrapping multiple validation errors
// returned by EnablePipedRequest.ValidateAll() if the designated constraints
// aren't met.
type EnablePipedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnablePipedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnablePipedRequestMultiError) AllErrors() []error { return m }

// EnablePipedRequestValidationError is the validation error returned by
// EnablePipedRequest.Validate if the designated constraints aren't met.
type EnablePipedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnablePipedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnablePipedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnablePipedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnablePipedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnablePipedRequestValidationError) ErrorName() string {
	return "EnablePipedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnablePipedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnablePipedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnablePipedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnablePipedRequestValidationError{}

// Validate checks the field values on EnablePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnablePipedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnablePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnablePipedResponseMultiError, or nil if none found.
func (m *EnablePipedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnablePipedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnablePipedResponseMultiError(errors)
	}

	return nil
}

// EnablePipedResponseMultiError is an error wrapping multiple validation
// errors returned by EnablePipedResponse.ValidateAll() if the designated
// constraints aren't met.
type EnablePipedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnablePipedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnablePipedResponseMultiError) AllErrors() []error { return m }

// EnablePipedResponseValidationError is the validation error returned by
// EnablePipedResponse.Validate if the designated constraints aren't met.
type EnablePipedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnablePipedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnablePipedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnablePipedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnablePipedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnablePipedResponseValidationError) ErrorName() string {
	return "EnablePipedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnablePipedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnablePipedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnablePipedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnablePipedResponseValidationError{}

// Validate checks the field values on DisablePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisablePipedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisablePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisablePipedRequestMultiError, or nil if none found.
func (m *DisablePipedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisablePipedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := DisablePipedRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisablePipedRequestMultiError(errors)
	}

	return nil
}

// DisablePipedRequestMultiError is an error wrapping multiple validation
// errors returned by DisablePipedRequest.ValidateAll() if the designated
// constraints aren't met.
type DisablePipedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisablePipedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisablePipedRequestMultiError) AllErrors() []error { return m }

// DisablePipedRequestValidationError is the validation error returned by
// DisablePipedRequest.Validate if the designated constraints aren't met.
type DisablePipedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisablePipedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisablePipedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisablePipedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisablePipedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisablePipedRequestValidationError) ErrorName() string {
	return "DisablePipedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisablePipedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisablePipedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisablePipedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisablePipedRequestValidationError{}

// Validate checks the field values on DisablePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisablePipedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisablePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisablePipedResponseMultiError, or nil if none found.
func (m *DisablePipedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisablePipedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisablePipedResponseMultiError(errors)
	}

	return nil
}

// DisablePipedResponseMultiError is an error wrapping multiple validation
// errors returned by DisablePipedResponse.ValidateAll() if the designated
// constraints aren't met.
type DisablePipedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisablePipedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisablePipedResponseMultiError) AllErrors() []error { return m }

// DisablePipedResponseValidationError is the validation error returned by
// DisablePipedResponse.Validate if the designated constraints aren't met.
type DisablePipedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisablePipedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisablePipedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisablePipedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisablePipedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisablePipedResponseValidationError) ErrorName() string {
	return "DisablePipedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisablePipedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisablePipedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisablePipedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisablePipedResponseValidationError{}

// Validate checks the field values on ListPipedsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPipedsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipedsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipedsRequestMultiError, or nil if none found.
func (m *ListPipedsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipedsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WithStatus

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPipedsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPipedsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPipedsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPipedsRequestMultiError(errors)
	}

	return nil
}

// ListPipedsRequestMultiError is an error wrapping multiple validation errors
// returned by ListPipedsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPipedsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipedsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipedsRequestMultiError) AllErrors() []error { return m }

// ListPipedsRequestValidationError is the validation error returned by
// ListPipedsRequest.Validate if the designated constraints aren't met.
type ListPipedsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipedsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipedsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipedsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipedsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipedsRequestValidationError) ErrorName() string {
	return "ListPipedsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipedsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipedsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipedsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipedsRequestValidationError{}

// Validate checks the field values on ListPipedsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipedsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipedsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipedsResponseMultiError, or nil if none found.
func (m *ListPipedsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipedsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPipeds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPipedsResponseValidationError{
						field:  fmt.Sprintf("Pipeds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPipedsResponseValidationError{
						field:  fmt.Sprintf("Pipeds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPipedsResponseValidationError{
					field:  fmt.Sprintf("Pipeds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPipedsResponseMultiError(errors)
	}

	return nil
}

// ListPipedsResponseMultiError is an error wrapping multiple validation errors
// returned by ListPipedsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPipedsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipedsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipedsResponseMultiError) AllErrors() []error { return m }

// ListPipedsResponseValidationError is the validation error returned by
// ListPipedsResponse.Validate if the designated constraints aren't met.
type ListPipedsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipedsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipedsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipedsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipedsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipedsResponseValidationError) ErrorName() string {
	return "ListPipedsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipedsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipedsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipedsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipedsResponseValidationError{}

// Validate checks the field values on GetPipedRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPipedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPipedRequestMultiError, or nil if none found.
func (m *GetPipedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := GetPipedRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPipedRequestMultiError(errors)
	}

	return nil
}

// GetPipedRequestMultiError is an error wrapping multiple validation errors
// returned by GetPipedRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPipedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipedRequestMultiError) AllErrors() []error { return m }

// GetPipedRequestValidationError is the validation error returned by
// GetPipedRequest.Validate if the designated constraints aren't met.
type GetPipedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipedRequestValidationError) ErrorName() string { return "GetPipedRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPipedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipedRequestValidationError{}

// Validate checks the field values on GetPipedResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPipedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPipedResponseMultiError, or nil if none found.
func (m *GetPipedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPipedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPiped()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPipedResponseValidationError{
					field:  "Piped",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPipedResponseValidationError{
					field:  "Piped",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPiped()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPipedResponseValidationError{
				field:  "Piped",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPipedResponseMultiError(errors)
	}

	return nil
}

// GetPipedResponseMultiError is an error wrapping multiple validation errors
// returned by GetPipedResponse.ValidateAll() if the designated constraints
// aren't met.
type GetPipedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPipedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPipedResponseMultiError) AllErrors() []error { return m }

// GetPipedResponseValidationError is the validation error returned by
// GetPipedResponse.Validate if the designated constraints aren't met.
type GetPipedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPipedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPipedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPipedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPipedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPipedResponseValidationError) ErrorName() string { return "GetPipedResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPipedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPipedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPipedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPipedResponseValidationError{}

// Validate checks the field values on UpdatePipedDesiredVersionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePipedDesiredVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePipedDesiredVersionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePipedDesiredVersionRequestMultiError, or nil if none found.
func (m *UpdatePipedDesiredVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePipedDesiredVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !strings.HasPrefix(m.GetVersion(), "v") {
		err := UpdatePipedDesiredVersionRequestValidationError{
			field:  "Version",
			reason: "value does not have prefix \"v\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPipedIds()) < 1 {
		err := UpdatePipedDesiredVersionRequestValidationError{
			field:  "PipedIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdatePipedDesiredVersionRequestMultiError(errors)
	}

	return nil
}

// UpdatePipedDesiredVersionRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdatePipedDesiredVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePipedDesiredVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePipedDesiredVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePipedDesiredVersionRequestMultiError) AllErrors() []error { return m }

// UpdatePipedDesiredVersionRequestValidationError is the validation error
// returned by UpdatePipedDesiredVersionRequest.Validate if the designated
// constraints aren't met.
type UpdatePipedDesiredVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePipedDesiredVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePipedDesiredVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePipedDesiredVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePipedDesiredVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePipedDesiredVersionRequestValidationError) ErrorName() string {
	return "UpdatePipedDesiredVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePipedDesiredVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePipedDesiredVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePipedDesiredVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePipedDesiredVersionRequestValidationError{}

// Validate checks the field values on UpdatePipedDesiredVersionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdatePipedDesiredVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePipedDesiredVersionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdatePipedDesiredVersionResponseMultiError, or nil if none found.
func (m *UpdatePipedDesiredVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePipedDesiredVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePipedDesiredVersionResponseMultiError(errors)
	}

	return nil
}

// UpdatePipedDesiredVersionResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdatePipedDesiredVersionResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdatePipedDesiredVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePipedDesiredVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePipedDesiredVersionResponseMultiError) AllErrors() []error { return m }

// UpdatePipedDesiredVersionResponseValidationError is the validation error
// returned by UpdatePipedDesiredVersionResponse.Validate if the designated
// constraints aren't met.
type UpdatePipedDesiredVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePipedDesiredVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePipedDesiredVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePipedDesiredVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePipedDesiredVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePipedDesiredVersionResponseValidationError) ErrorName() string {
	return "UpdatePipedDesiredVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePipedDesiredVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePipedDesiredVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePipedDesiredVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePipedDesiredVersionResponseValidationError{}

// Validate checks the field values on RestartPipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartPipedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartPipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartPipedRequestMultiError, or nil if none found.
func (m *RestartPipedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartPipedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := RestartPipedRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RestartPipedRequestMultiError(errors)
	}

	return nil
}

// RestartPipedRequestMultiError is an error wrapping multiple validation
// errors returned by RestartPipedRequest.ValidateAll() if the designated
// constraints aren't met.
type RestartPipedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartPipedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartPipedRequestMultiError) AllErrors() []error { return m }

// RestartPipedRequestValidationError is the validation error returned by
// RestartPipedRequest.Validate if the designated constraints aren't met.
type RestartPipedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartPipedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartPipedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartPipedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartPipedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartPipedRequestValidationError) ErrorName() string {
	return "RestartPipedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RestartPipedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartPipedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartPipedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartPipedRequestValidationError{}

// Validate checks the field values on RestartPipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RestartPipedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RestartPipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RestartPipedResponseMultiError, or nil if none found.
func (m *RestartPipedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RestartPipedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandId

	if len(errors) > 0 {
		return RestartPipedResponseMultiError(errors)
	}

	return nil
}

// RestartPipedResponseMultiError is an error wrapping multiple validation
// errors returned by RestartPipedResponse.ValidateAll() if the designated
// constraints aren't met.
type RestartPipedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RestartPipedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RestartPipedResponseMultiError) AllErrors() []error { return m }

// RestartPipedResponseValidationError is the validation error returned by
// RestartPipedResponse.Validate if the designated constraints aren't met.
type RestartPipedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RestartPipedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RestartPipedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RestartPipedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RestartPipedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RestartPipedResponseValidationError) ErrorName() string {
	return "RestartPipedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RestartPipedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRestartPipedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RestartPipedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RestartPipedResponseValidationError{}

// Validate checks the field values on ListReleasedVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReleasedVersionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReleasedVersionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReleasedVersionsRequestMultiError, or nil if none found.
func (m *ListReleasedVersionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReleasedVersionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListReleasedVersionsRequestMultiError(errors)
	}

	return nil
}

// ListReleasedVersionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListReleasedVersionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListReleasedVersionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReleasedVersionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReleasedVersionsRequestMultiError) AllErrors() []error { return m }

// ListReleasedVersionsRequestValidationError is the validation error returned
// by ListReleasedVersionsRequest.Validate if the designated constraints
// aren't met.
type ListReleasedVersionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReleasedVersionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReleasedVersionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReleasedVersionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReleasedVersionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReleasedVersionsRequestValidationError) ErrorName() string {
	return "ListReleasedVersionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListReleasedVersionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReleasedVersionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReleasedVersionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReleasedVersionsRequestValidationError{}

// Validate checks the field values on ListReleasedVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListReleasedVersionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReleasedVersionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListReleasedVersionsResponseMultiError, or nil if none found.
func (m *ListReleasedVersionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReleasedVersionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListReleasedVersionsResponseMultiError(errors)
	}

	return nil
}

// ListReleasedVersionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListReleasedVersionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListReleasedVersionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReleasedVersionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReleasedVersionsResponseMultiError) AllErrors() []error { return m }

// ListReleasedVersionsResponseValidationError is the validation error returned
// by ListReleasedVersionsResponse.Validate if the designated constraints
// aren't met.
type ListReleasedVersionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReleasedVersionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReleasedVersionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReleasedVersionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReleasedVersionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReleasedVersionsResponseValidationError) ErrorName() string {
	return "ListReleasedVersionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReleasedVersionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReleasedVersionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReleasedVersionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReleasedVersionsResponseValidationError{}

// Validate checks the field values on AddApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddApplicationRequestMultiError, or nil if none found.
func (m *AddApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddApplicationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := AddApplicationRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGitPath() == nil {
		err := AddApplicationRequestValidationError{
			field:  "GitPath",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGitPath()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddApplicationRequestValidationError{
					field:  "GitPath",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddApplicationRequestValidationError{
					field:  "GitPath",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGitPath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddApplicationRequestValidationError{
				field:  "GitPath",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := model.ApplicationKind_name[int32(m.GetKind())]; !ok {
		err := AddApplicationRequestValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformProvider()) < 1 {
		err := AddApplicationRequestValidationError{
			field:  "PlatformProvider",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Labels

	if len(errors) > 0 {
		return AddApplicationRequestMultiError(errors)
	}

	return nil
}

// AddApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by AddApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type AddApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddApplicationRequestMultiError) AllErrors() []error { return m }

// AddApplicationRequestValidationError is the validation error returned by
// AddApplicationRequest.Validate if the designated constraints aren't met.
type AddApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddApplicationRequestValidationError) ErrorName() string {
	return "AddApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddApplicationRequestValidationError{}

// Validate checks the field values on AddApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddApplicationResponseMultiError, or nil if none found.
func (m *AddApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := AddApplicationResponseValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddApplicationResponseMultiError(errors)
	}

	return nil
}

// AddApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by AddApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type AddApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddApplicationResponseMultiError) AllErrors() []error { return m }

// AddApplicationResponseValidationError is the validation error returned by
// AddApplicationResponse.Validate if the designated constraints aren't met.
type AddApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddApplicationResponseValidationError) ErrorName() string {
	return "AddApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddApplicationResponseValidationError{}

// Validate checks the field values on UpdateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApplicationRequestMultiError, or nil if none found.
func (m *UpdateApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := UpdateApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateApplicationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := UpdateApplicationRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.ApplicationKind_name[int32(m.GetKind())]; !ok {
		err := UpdateApplicationRequestValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformProvider()) < 1 {
		err := UpdateApplicationRequestValidationError{
			field:  "PlatformProvider",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ConfigFilename

	if len(errors) > 0 {
		return UpdateApplicationRequestMultiError(errors)
	}

	return nil
}

// UpdateApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationRequestMultiError) AllErrors() []error { return m }

// UpdateApplicationRequestValidationError is the validation error returned by
// UpdateApplicationRequest.Validate if the designated constraints aren't met.
type UpdateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationRequestValidationError) ErrorName() string {
	return "UpdateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationRequestValidationError{}

// Validate checks the field values on UpdateApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateApplicationResponseMultiError, or nil if none found.
func (m *UpdateApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateApplicationResponseMultiError(errors)
	}

	return nil
}

// UpdateApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationResponseMultiError) AllErrors() []error { return m }

// UpdateApplicationResponseValidationError is the validation error returned by
// UpdateApplicationResponse.Validate if the designated constraints aren't met.
type UpdateApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationResponseValidationError) ErrorName() string {
	return "UpdateApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationResponseValidationError{}

// Validate checks the field values on EnableApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableApplicationRequestMultiError, or nil if none found.
func (m *EnableApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := EnableApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnableApplicationRequestMultiError(errors)
	}

	return nil
}

// EnableApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by EnableApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableApplicationRequestMultiError) AllErrors() []error { return m }

// EnableApplicationRequestValidationError is the validation error returned by
// EnableApplicationRequest.Validate if the designated constraints aren't met.
type EnableApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableApplicationRequestValidationError) ErrorName() string {
	return "EnableApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableApplicationRequestValidationError{}

// Validate checks the field values on EnableApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableApplicationResponseMultiError, or nil if none found.
func (m *EnableApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableApplicationResponseMultiError(errors)
	}

	return nil
}

// EnableApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by EnableApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type EnableApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableApplicationResponseMultiError) AllErrors() []error { return m }

// EnableApplicationResponseValidationError is the validation error returned by
// EnableApplicationResponse.Validate if the designated constraints aren't met.
type EnableApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableApplicationResponseValidationError) ErrorName() string {
	return "EnableApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableApplicationResponseValidationError{}

// Validate checks the field values on DisableApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableApplicationRequestMultiError, or nil if none found.
func (m *DisableApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := DisableApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableApplicationRequestMultiError(errors)
	}

	return nil
}

// DisableApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DisableApplicationRequest.ValidateAll() if the
// designated constraints aren't met.
type DisableApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableApplicationRequestMultiError) AllErrors() []error { return m }

// DisableApplicationRequestValidationError is the validation error returned by
// DisableApplicationRequest.Validate if the designated constraints aren't met.
type DisableApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableApplicationRequestValidationError) ErrorName() string {
	return "DisableApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableApplicationRequestValidationError{}

// Validate checks the field values on DisableApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableApplicationResponseMultiError, or nil if none found.
func (m *DisableApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableApplicationResponseMultiError(errors)
	}

	return nil
}

// DisableApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by DisableApplicationResponse.ValidateAll() if
// the designated constraints aren't met.
type DisableApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableApplicationResponseMultiError) AllErrors() []error { return m }

// DisableApplicationResponseValidationError is the validation error returned
// by DisableApplicationResponse.Validate if the designated constraints aren't met.
type DisableApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableApplicationResponseValidationError) ErrorName() string {
	return "DisableApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableApplicationResponseValidationError{}

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationRequestMultiError, or nil if none found.
func (m *DeleteApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := DeleteApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteApplicationRequestMultiError(errors)
	}

	return nil
}

// DeleteApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationRequestMultiError) AllErrors() []error { return m }

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

// Validate checks the field values on DeleteApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationResponseMultiError, or nil if none found.
func (m *DeleteApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteApplicationResponseMultiError(errors)
	}

	return nil
}

// DeleteApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationResponseMultiError) AllErrors() []error { return m }

// DeleteApplicationResponseValidationError is the validation error returned by
// DeleteApplicationResponse.Validate if the designated constraints aren't met.
type DeleteApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationResponseValidationError) ErrorName() string {
	return "DeleteApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationResponseValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsRequestMultiError, or nil if none found.
func (m *ListApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListApplicationsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListApplicationsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListApplicationsRequestMultiError(errors)
	}

	return nil
}

// ListApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRequestMultiError) AllErrors() []error { return m }

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsResponseMultiError, or nil if none found.
func (m *ListApplicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListApplicationsResponseMultiError(errors)
	}

	return nil
}

// ListApplicationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsResponseMultiError) AllErrors() []error { return m }

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on SyncApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncApplicationRequestMultiError, or nil if none found.
func (m *SyncApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := SyncApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SyncStrategy

	if len(errors) > 0 {
		return SyncApplicationRequestMultiError(errors)
	}

	return nil
}

// SyncApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by SyncApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type SyncApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncApplicationRequestMultiError) AllErrors() []error { return m }

// SyncApplicationRequestValidationError is the validation error returned by
// SyncApplicationRequest.Validate if the designated constraints aren't met.
type SyncApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncApplicationRequestValidationError) ErrorName() string {
	return "SyncApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncApplicationRequestValidationError{}

// Validate checks the field values on SyncApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncApplicationResponseMultiError, or nil if none found.
func (m *SyncApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandId

	if len(errors) > 0 {
		return SyncApplicationResponseMultiError(errors)
	}

	return nil
}

// SyncApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by SyncApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type SyncApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncApplicationResponseMultiError) AllErrors() []error { return m }

// SyncApplicationResponseValidationError is the validation error returned by
// SyncApplicationResponse.Validate if the designated constraints aren't met.
type SyncApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncApplicationResponseValidationError) ErrorName() string {
	return "SyncApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncApplicationResponseValidationError{}

// Validate checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationRequestMultiError, or nil if none found.
func (m *GetApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := GetApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicationRequestMultiError(errors)
	}

	return nil
}

// GetApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by GetApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationRequestMultiError) AllErrors() []error { return m }

// GetApplicationRequestValidationError is the validation error returned by
// GetApplicationRequest.Validate if the designated constraints aren't met.
type GetApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationRequestValidationError) ErrorName() string {
	return "GetApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationRequestValidationError{}

// Validate checks the field values on GetApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationResponseMultiError, or nil if none found.
func (m *GetApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationResponseValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationResponseMultiError(errors)
	}

	return nil
}

// GetApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by GetApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationResponseMultiError) AllErrors() []error { return m }

// GetApplicationResponseValidationError is the validation error returned by
// GetApplicationResponse.Validate if the designated constraints aren't met.
type GetApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationResponseValidationError) ErrorName() string {
	return "GetApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationResponseValidationError{}

// Validate checks the field values on GenerateApplicationSealedSecretRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GenerateApplicationSealedSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GenerateApplicationSealedSecretRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GenerateApplicationSealedSecretRequestMultiError, or nil if none found.
func (m *GenerateApplicationSealedSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateApplicationSealedSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := GenerateApplicationSealedSecretRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetData()) < 1 {
		err := GenerateApplicationSealedSecretRequestValidationError{
			field:  "Data",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Base64Encoding

	if len(errors) > 0 {
		return GenerateApplicationSealedSecretRequestMultiError(errors)
	}

	return nil
}

// GenerateApplicationSealedSecretRequestMultiError is an error wrapping
// multiple validation errors returned by
// GenerateApplicationSealedSecretRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateApplicationSealedSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateApplicationSealedSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateApplicationSealedSecretRequestMultiError) AllErrors() []error { return m }

// GenerateApplicationSealedSecretRequestValidationError is the validation
// error returned by GenerateApplicationSealedSecretRequest.Validate if the
// designated constraints aren't met.
type GenerateApplicationSealedSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateApplicationSealedSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateApplicationSealedSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateApplicationSealedSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateApplicationSealedSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateApplicationSealedSecretRequestValidationError) ErrorName() string {
	return "GenerateApplicationSealedSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateApplicationSealedSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateApplicationSealedSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateApplicationSealedSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateApplicationSealedSecretRequestValidationError{}

// Validate checks the field values on GenerateApplicationSealedSecretResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GenerateApplicationSealedSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GenerateApplicationSealedSecretResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GenerateApplicationSealedSecretResponseMultiError, or nil if none found.
func (m *GenerateApplicationSealedSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateApplicationSealedSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetData()) < 1 {
		err := GenerateApplicationSealedSecretResponseValidationError{
			field:  "Data",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateApplicationSealedSecretResponseMultiError(errors)
	}

	return nil
}

// GenerateApplicationSealedSecretResponseMultiError is an error wrapping
// multiple validation errors returned by
// GenerateApplicationSealedSecretResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateApplicationSealedSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateApplicationSealedSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateApplicationSealedSecretResponseMultiError) AllErrors() []error { return m }

// GenerateApplicationSealedSecretResponseValidationError is the validation
// error returned by GenerateApplicationSealedSecretResponse.Validate if the
// designated constraints aren't met.
type GenerateApplicationSealedSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateApplicationSealedSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateApplicationSealedSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateApplicationSealedSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateApplicationSealedSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateApplicationSealedSecretResponseValidationError) ErrorName() string {
	return "GenerateApplicationSealedSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateApplicationSealedSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateApplicationSealedSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateApplicationSealedSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateApplicationSealedSecretResponseValidationError{}

// Validate checks the field values on ListUnregisteredApplicationsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUnregisteredApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnregisteredApplicationsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListUnregisteredApplicationsRequestMultiError, or nil if none found.
func (m *ListUnregisteredApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnregisteredApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUnregisteredApplicationsRequestMultiError(errors)
	}

	return nil
}

// ListUnregisteredApplicationsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListUnregisteredApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUnregisteredApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnregisteredApplicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnregisteredApplicationsRequestMultiError) AllErrors() []error { return m }

// ListUnregisteredApplicationsRequestValidationError is the validation error
// returned by ListUnregisteredApplicationsRequest.Validate if the designated
// constraints aren't met.
type ListUnregisteredApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnregisteredApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnregisteredApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnregisteredApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnregisteredApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnregisteredApplicationsRequestValidationError) ErrorName() string {
	return "ListUnregisteredApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnregisteredApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnregisteredApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnregisteredApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnregisteredApplicationsRequestValidationError{}

// Validate checks the field values on ListUnregisteredApplicationsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListUnregisteredApplicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnregisteredApplicationsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListUnregisteredApplicationsResponseMultiError, or nil if none found.
func (m *ListUnregisteredApplicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnregisteredApplicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUnregisteredApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUnregisteredApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUnregisteredApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUnregisteredApplicationsResponseMultiError(errors)
	}

	return nil
}

// ListUnregisteredApplicationsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListUnregisteredApplicationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUnregisteredApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnregisteredApplicationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnregisteredApplicationsResponseMultiError) AllErrors() []error { return m }

// ListUnregisteredApplicationsResponseValidationError is the validation error
// returned by ListUnregisteredApplicationsResponse.Validate if the designated
// constraints aren't met.
type ListUnregisteredApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnregisteredApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnregisteredApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnregisteredApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnregisteredApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnregisteredApplicationsResponseValidationError) ErrorName() string {
	return "ListUnregisteredApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnregisteredApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnregisteredApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnregisteredApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnregisteredApplicationsResponseValidationError{}

// Validate checks the field values on ListDeploymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentsRequestMultiError, or nil if none found.
func (m *ListDeploymentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDeploymentsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDeploymentsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeploymentsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for Cursor

	// no validation rules for PageMinUpdatedAt

	if len(errors) > 0 {
		return ListDeploymentsRequestMultiError(errors)
	}

	return nil
}

// ListDeploymentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDeploymentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsRequestMultiError) AllErrors() []error { return m }

// ListDeploymentsRequestValidationError is the validation error returned by
// ListDeploymentsRequest.Validate if the designated constraints aren't met.
type ListDeploymentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsRequestValidationError) ErrorName() string {
	return "ListDeploymentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsRequestValidationError{}

// Validate checks the field values on ListDeploymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentsResponseMultiError, or nil if none found.
func (m *ListDeploymentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentsResponseValidationError{
					field:  fmt.Sprintf("Deployments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListDeploymentsResponseMultiError(errors)
	}

	return nil
}

// ListDeploymentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDeploymentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsResponseMultiError) AllErrors() []error { return m }

// ListDeploymentsResponseValidationError is the validation error returned by
// ListDeploymentsResponse.Validate if the designated constraints aren't met.
type ListDeploymentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsResponseValidationError) ErrorName() string {
	return "ListDeploymentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsResponseValidationError{}

// Validate checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentRequestMultiError, or nil if none found.
func (m *GetDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := GetDeploymentRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeploymentRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentRequestMultiError) AllErrors() []error { return m }

// GetDeploymentRequestValidationError is the validation error returned by
// GetDeploymentRequest.Validate if the designated constraints aren't met.
type GetDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentRequestValidationError) ErrorName() string {
	return "GetDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentRequestValidationError{}

// Validate checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentResponseMultiError, or nil if none found.
func (m *GetDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeploymentResponseValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeploymentResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentResponseMultiError) AllErrors() []error { return m }

// GetDeploymentResponseValidationError is the validation error returned by
// GetDeploymentResponse.Validate if the designated constraints aren't met.
type GetDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentResponseValidationError) ErrorName() string {
	return "GetDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentResponseValidationError{}

// Validate checks the field values on GetStageLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStageLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStageLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStageLogRequestMultiError, or nil if none found.
func (m *GetStageLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStageLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := GetStageLogRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := GetStageLogRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RetriedCount

	// no validation rules for OffsetIndex

	if len(errors) > 0 {
		return GetStageLogRequestMultiError(errors)
	}

	return nil
}

// GetStageLogRequestMultiError is an error wrapping multiple validation errors
// returned by GetStageLogRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStageLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStageLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStageLogRequestMultiError) AllErrors() []error { return m }

// GetStageLogRequestValidationError is the validation error returned by
// GetStageLogRequest.Validate if the designated constraints aren't met.
type GetStageLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStageLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStageLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStageLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStageLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStageLogRequestValidationError) ErrorName() string {
	return "GetStageLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStageLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStageLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStageLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStageLogRequestValidationError{}

// Validate checks the field values on GetStageLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStageLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStageLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStageLogResponseMultiError, or nil if none found.
func (m *GetStageLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStageLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStageLogResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStageLogResponseValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStageLogResponseValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Completed

	if len(errors) > 0 {
		return GetStageLogResponseMultiError(errors)
	}

	return nil
}

// GetStageLogResponseMultiError is an error wrapping multiple validation
// errors returned by GetStageLogResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStageLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStageLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStageLogResponseMultiError) AllErrors() []error { return m }

// GetStageLogResponseValidationError is the validation error returned by
// GetStageLogResponse.Validate if the designated constraints aren't met.
type GetStageLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStageLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStageLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStageLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStageLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStageLogResponseValidationError) ErrorName() string {
	return "GetStageLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStageLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStageLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStageLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStageLogResponseValidationError{}

// Validate checks the field values on CancelDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDeploymentRequestMultiError, or nil if none found.
func (m *CancelDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := CancelDeploymentRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ForceRollback

	// no validation rules for ForceNoRollback

	if len(errors) > 0 {
		return CancelDeploymentRequestMultiError(errors)
	}

	return nil
}

// CancelDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by CancelDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDeploymentRequestMultiError) AllErrors() []error { return m }

// CancelDeploymentRequestValidationError is the validation error returned by
// CancelDeploymentRequest.Validate if the designated constraints aren't met.
type CancelDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDeploymentRequestValidationError) ErrorName() string {
	return "CancelDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDeploymentRequestValidationError{}

// Validate checks the field values on CancelDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelDeploymentResponseMultiError, or nil if none found.
func (m *CancelDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandId

	if len(errors) > 0 {
		return CancelDeploymentResponseMultiError(errors)
	}

	return nil
}

// CancelDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by CancelDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelDeploymentResponseMultiError) AllErrors() []error { return m }

// CancelDeploymentResponseValidationError is the validation error returned by
// CancelDeploymentResponse.Validate if the designated constraints aren't met.
type CancelDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelDeploymentResponseValidationError) ErrorName() string {
	return "CancelDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelDeploymentResponseValidationError{}

// Validate checks the field values on SkipStageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkipStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkipStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkipStageRequestMultiError, or nil if none found.
func (m *SkipStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SkipStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := SkipStageRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := SkipStageRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SkipStageRequestMultiError(errors)
	}

	return nil
}

// SkipStageRequestMultiError is an error wrapping multiple validation errors
// returned by SkipStageRequest.ValidateAll() if the designated constraints
// aren't met.
type SkipStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkipStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkipStageRequestMultiError) AllErrors() []error { return m }

// SkipStageRequestValidationError is the validation error returned by
// SkipStageRequest.Validate if the designated constraints aren't met.
type SkipStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkipStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkipStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkipStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkipStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkipStageRequestValidationError) ErrorName() string { return "SkipStageRequestValidationError" }

// Error satisfies the builtin error interface
func (e SkipStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkipStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkipStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkipStageRequestValidationError{}

// Validate checks the field values on SkipStageResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SkipStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SkipStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SkipStageResponseMultiError, or nil if none found.
func (m *SkipStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SkipStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandId

	if len(errors) > 0 {
		return SkipStageResponseMultiError(errors)
	}

	return nil
}

// SkipStageResponseMultiError is an error wrapping multiple validation errors
// returned by SkipStageResponse.ValidateAll() if the designated constraints
// aren't met.
type SkipStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SkipStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SkipStageResponseMultiError) AllErrors() []error { return m }

// SkipStageResponseValidationError is the validation error returned by
// SkipStageResponse.Validate if the designated constraints aren't met.
type SkipStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SkipStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SkipStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SkipStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SkipStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SkipStageResponseValidationError) ErrorName() string {
	return "SkipStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SkipStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSkipStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SkipStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SkipStageResponseValidationError{}

// Validate checks the field values on ApproveStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveStageRequestMultiError, or nil if none found.
func (m *ApproveStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ApproveStageRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := ApproveStageRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ApproveStageRequestMultiError(errors)
	}

	return nil
}

// ApproveStageRequestMultiError is an error wrapping multiple validation
// errors returned by ApproveStageRequest.ValidateAll() if the designated
// constraints aren't met.
type ApproveStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveStageRequestMultiError) AllErrors() []error { return m }

// ApproveStageRequestValidationError is the validation error returned by
// ApproveStageRequest.Validate if the designated constraints aren't met.
type ApproveStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveStageRequestValidationError) ErrorName() string {
	return "ApproveStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveStageRequestValidationError{}

// Validate checks the field values on ApproveStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApproveStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApproveStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApproveStageResponseMultiError, or nil if none found.
func (m *ApproveStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApproveStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandId

	if len(errors) > 0 {
		return ApproveStageResponseMultiError(errors)
	}

	return nil
}

// ApproveStageResponseMultiError is an error wrapping multiple validation
// errors returned by ApproveStageResponse.ValidateAll() if the designated
// constraints aren't met.
type ApproveStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApproveStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApproveStageResponseMultiError) AllErrors() []error { return m }

// ApproveStageResponseValidationError is the validation error returned by
// ApproveStageResponse.Validate if the designated constraints aren't met.
type ApproveStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApproveStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApproveStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApproveStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApproveStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApproveStageResponseValidationError) ErrorName() string {
	return "ApproveStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApproveStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApproveStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApproveStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApproveStageResponseValidationError{}

// Validate checks the field values on GetApplicationLiveStateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationLiveStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationLiveStateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetApplicationLiveStateRequestMultiError, or nil if none found.
func (m *GetApplicationLiveStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationLiveStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := GetApplicationLiveStateRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicationLiveStateRequestMultiError(errors)
	}

	return nil
}

// GetApplicationLiveStateRequestMultiError is an error wrapping multiple
// validation errors returned by GetApplicationLiveStateRequest.ValidateAll()
// if the designated constraints aren't met.
type GetApplicationLiveStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationLiveStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationLiveStateRequestMultiError) AllErrors() []error { return m }

// GetApplicationLiveStateRequestValidationError is the validation error
// returned by GetApplicationLiveStateRequest.Validate if the designated
// constraints aren't met.
type GetApplicationLiveStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationLiveStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationLiveStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationLiveStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationLiveStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationLiveStateRequestValidationError) ErrorName() string {
	return "GetApplicationLiveStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationLiveStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationLiveStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationLiveStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationLiveStateRequestValidationError{}

// Validate checks the field values on GetApplicationLiveStateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationLiveStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationLiveStateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetApplicationLiveStateResponseMultiError, or nil if none found.
func (m *GetApplicationLiveStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationLiveStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationLiveStateResponseValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationLiveStateResponseValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationLiveStateResponseValidationError{
				field:  "Snapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationLiveStateResponseMultiError(errors)
	}

	return nil
}

// GetApplicationLiveStateResponseMultiError is an error wrapping multiple
// validation errors returned by GetApplicationLiveStateResponse.ValidateAll()
// if the designated constraints aren't met.
type GetApplicationLiveStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationLiveStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationLiveStateResponseMultiError) AllErrors() []error { return m }

// GetApplicationLiveStateResponseValidationError is the validation error
// returned by GetApplicationLiveStateResponse.Validate if the designated
// constraints aren't met.
type GetApplicationLiveStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationLiveStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationLiveStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationLiveStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationLiveStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationLiveStateResponseValidationError) ErrorName() string {
	return "GetApplicationLiveStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationLiveStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationLiveStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationLiveStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationLiveStateResponseValidationError{}

// Validate checks the field values on GetProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectRequestMultiError, or nil if none found.
func (m *GetProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetProjectRequestMultiError(errors)
	}

	return nil
}

// GetProjectRequestMultiError is an error wrapping multiple validation errors
// returned by GetProjectRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectRequestMultiError) AllErrors() []error { return m }

// GetProjectRequestValidationError is the validation error returned by
// GetProjectRequest.Validate if the designated constraints aren't met.
type GetProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectRequestValidationError) ErrorName() string {
	return "GetProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectRequestValidationError{}

// Validate checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResponseMultiError, or nil if none found.
func (m *GetProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectResponseMultiError(errors)
	}

	return nil
}

// GetProjectResponseMultiError is an error wrapping multiple validation errors
// returned by GetProjectResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResponseMultiError) AllErrors() []error { return m }

// GetProjectResponseValidationError is the validation error returned by
// GetProjectResponse.Validate if the designated constraints aren't met.
type GetProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResponseValidationError) ErrorName() string {
	return "GetProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectStaticAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectStaticAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectStaticAdminRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectStaticAdminRequestMultiError, or nil if none found.
func (m *UpdateProjectStaticAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectStaticAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := UpdateProjectStaticAdminRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := UpdateProjectStaticAdminRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateProjectStaticAdminRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectStaticAdminRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectStaticAdminRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectStaticAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectStaticAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectStaticAdminRequestMultiError) AllErrors() []error { return m }

// UpdateProjectStaticAdminRequestValidationError is the validation error
// returned by UpdateProjectStaticAdminRequest.Validate if the designated
// constraints aren't met.
type UpdateProjectStaticAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectStaticAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectStaticAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectStaticAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectStaticAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectStaticAdminRequestValidationError) ErrorName() string {
	return "UpdateProjectStaticAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectStaticAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectStaticAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectStaticAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectStaticAdminRequestValidationError{}

// Validate checks the field values on UpdateProjectStaticAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateProjectStaticAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectStaticAdminResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectStaticAdminResponseMultiError, or nil if none found.
func (m *UpdateProjectStaticAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectStaticAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectStaticAdminResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectStaticAdminResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProjectStaticAdminResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectStaticAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectStaticAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectStaticAdminResponseMultiError) AllErrors() []error { return m }

// UpdateProjectStaticAdminResponseValidationError is the validation error
// returned by UpdateProjectStaticAdminResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectStaticAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectStaticAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectStaticAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectStaticAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectStaticAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectStaticAdminResponseValidationError) ErrorName() string {
	return "UpdateProjectStaticAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectStaticAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectStaticAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectStaticAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectStaticAdminResponseValidationError{}

// Validate checks the field values on UpdateProjectSSOConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectSSOConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectSSOConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectSSOConfigRequestMultiError, or nil if none found.
func (m *UpdateProjectSSOConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectSSOConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSso() == nil {
		err := UpdateProjectSSOConfigRequestValidationError{
			field:  "Sso",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSso()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectSSOConfigRequestValidationError{
					field:  "Sso",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectSSOConfigRequestValidationError{
					field:  "Sso",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSso()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectSSOConfigRequestValidationError{
				field:  "Sso",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectSSOConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectSSOConfigRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectSSOConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectSSOConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectSSOConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectSSOConfigRequestMultiError) AllErrors() []error { return m }

// UpdateProjectSSOConfigRequestValidationError is the validation error
// returned by UpdateProjectSSOConfigRequest.Validate if the designated
// constraints aren't met.
type UpdateProjectSSOConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectSSOConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectSSOConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectSSOConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectSSOConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectSSOConfigRequestValidationError) ErrorName() string {
	return "UpdateProjectSSOConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectSSOConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectSSOConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectSSOConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectSSOConfigRequestValidationError{}

// Validate checks the field values on UpdateProjectSSOConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectSSOConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectSSOConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectSSOConfigResponseMultiError, or nil if none found.
func (m *UpdateProjectSSOConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectSSOConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectSSOConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectSSOConfigResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectSSOConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectSSOConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectSSOConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectSSOConfigResponseMultiError) AllErrors() []error { return m }

// UpdateProjectSSOConfigResponseValidationError is the validation error
// returned by UpdateProjectSSOConfigResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectSSOConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectSSOConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectSSOConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectSSOConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectSSOConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectSSOConfigResponseValidationError) ErrorName() string {
	return "UpdateProjectSSOConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectSSOConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectSSOConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectSSOConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectSSOConfigResponseValidationError{}

// Validate checks the field values on UpdateProjectRBACConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRBACConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRBACConfigRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectRBACConfigRequestMultiError, or nil if none found.
func (m *UpdateProjectRBACConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRBACConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRbac() == nil {
		err := UpdateProjectRBACConfigRequestValidationError{
			field:  "Rbac",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRbac()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectRBACConfigRequestValidationError{
					field:  "Rbac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectRBACConfigRequestValidationError{
					field:  "Rbac",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRbac()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectRBACConfigRequestValidationError{
				field:  "Rbac",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectRBACConfigRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectRBACConfigRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectRBACConfigRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectRBACConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRBACConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRBACConfigRequestMultiError) AllErrors() []error { return m }

// UpdateProjectRBACConfigRequestValidationError is the validation error
// returned by UpdateProjectRBACConfigRequest.Validate if the designated
// constraints aren't met.
type UpdateProjectRBACConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRBACConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRBACConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRBACConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRBACConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRBACConfigRequestValidationError) ErrorName() string {
	return "UpdateProjectRBACConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRBACConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRBACConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRBACConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRBACConfigRequestValidationError{}

// Validate checks the field values on UpdateProjectRBACConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRBACConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRBACConfigResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectRBACConfigResponseMultiError, or nil if none found.
func (m *UpdateProjectRBACConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRBACConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectRBACConfigResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectRBACConfigResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectRBACConfigResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectRBACConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRBACConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRBACConfigResponseMultiError) AllErrors() []error { return m }

// UpdateProjectRBACConfigResponseValidationError is the validation error
// returned by UpdateProjectRBACConfigResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectRBACConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRBACConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRBACConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRBACConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRBACConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRBACConfigResponseValidationError) ErrorName() string {
	return "UpdateProjectRBACConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRBACConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRBACConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRBACConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRBACConfigResponseValidationError{}

// Validate checks the field values on EnableStaticAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableStaticAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableStaticAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableStaticAdminRequestMultiError, or nil if none found.
func (m *EnableStaticAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableStaticAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableStaticAdminRequestMultiError(errors)
	}

	return nil
}

// EnableStaticAdminRequestMultiError is an error wrapping multiple validation
// errors returned by EnableStaticAdminRequest.ValidateAll() if the designated
// constraints aren't met.
type EnableStaticAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableStaticAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableStaticAdminRequestMultiError) AllErrors() []error { return m }

// EnableStaticAdminRequestValidationError is the validation error returned by
// EnableStaticAdminRequest.Validate if the designated constraints aren't met.
type EnableStaticAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableStaticAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableStaticAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableStaticAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableStaticAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableStaticAdminRequestValidationError) ErrorName() string {
	return "EnableStaticAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnableStaticAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableStaticAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableStaticAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableStaticAdminRequestValidationError{}

// Validate checks the field values on EnableStaticAdminResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnableStaticAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnableStaticAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnableStaticAdminResponseMultiError, or nil if none found.
func (m *EnableStaticAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnableStaticAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnableStaticAdminResponseMultiError(errors)
	}

	return nil
}

// EnableStaticAdminResponseMultiError is an error wrapping multiple validation
// errors returned by EnableStaticAdminResponse.ValidateAll() if the
// designated constraints aren't met.
type EnableStaticAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnableStaticAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnableStaticAdminResponseMultiError) AllErrors() []error { return m }

// EnableStaticAdminResponseValidationError is the validation error returned by
// EnableStaticAdminResponse.Validate if the designated constraints aren't met.
type EnableStaticAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnableStaticAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnableStaticAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnableStaticAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnableStaticAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnableStaticAdminResponseValidationError) ErrorName() string {
	return "EnableStaticAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnableStaticAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnableStaticAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnableStaticAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnableStaticAdminResponseValidationError{}

// Validate checks the field values on DisableStaticAdminRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableStaticAdminRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableStaticAdminRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableStaticAdminRequestMultiError, or nil if none found.
func (m *DisableStaticAdminRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableStaticAdminRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableStaticAdminRequestMultiError(errors)
	}

	return nil
}

// DisableStaticAdminRequestMultiError is an error wrapping multiple validation
// errors returned by DisableStaticAdminRequest.ValidateAll() if the
// designated constraints aren't met.
type DisableStaticAdminRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableStaticAdminRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableStaticAdminRequestMultiError) AllErrors() []error { return m }

// DisableStaticAdminRequestValidationError is the validation error returned by
// DisableStaticAdminRequest.Validate if the designated constraints aren't met.
type DisableStaticAdminRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableStaticAdminRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableStaticAdminRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableStaticAdminRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableStaticAdminRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableStaticAdminRequestValidationError) ErrorName() string {
	return "DisableStaticAdminRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableStaticAdminRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableStaticAdminRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableStaticAdminRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableStaticAdminRequestValidationError{}

// Validate checks the field values on DisableStaticAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableStaticAdminResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableStaticAdminResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableStaticAdminResponseMultiError, or nil if none found.
func (m *DisableStaticAdminResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableStaticAdminResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableStaticAdminResponseMultiError(errors)
	}

	return nil
}

// DisableStaticAdminResponseMultiError is an error wrapping multiple
// validation errors returned by DisableStaticAdminResponse.ValidateAll() if
// the designated constraints aren't met.
type DisableStaticAdminResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableStaticAdminResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableStaticAdminResponseMultiError) AllErrors() []error { return m }

// DisableStaticAdminResponseValidationError is the validation error returned
// by DisableStaticAdminResponse.Validate if the designated constraints aren't met.
type DisableStaticAdminResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableStaticAdminResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableStaticAdminResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableStaticAdminResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableStaticAdminResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableStaticAdminResponseValidationError) ErrorName() string {
	return "DisableStaticAdminResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableStaticAdminResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableStaticAdminResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableStaticAdminResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableStaticAdminResponseValidationError{}

// Validate checks the field values on GetMeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeRequestMultiError, or
// nil if none found.
func (m *GetMeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMeRequestMultiError(errors)
	}

	return nil
}

// GetMeRequestMultiError is an error wrapping multiple validation errors
// returned by GetMeRequest.ValidateAll() if the designated constraints aren't met.
type GetMeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeRequestMultiError) AllErrors() []error { return m }

// GetMeRequestValidationError is the validation error returned by
// GetMeRequest.Validate if the designated constraints aren't met.
type GetMeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeRequestValidationError) ErrorName() string { return "GetMeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeRequestValidationError{}

// Validate checks the field values on GetMeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMeResponseMultiError, or
// nil if none found.
func (m *GetMeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for AvatarUrl

	// no validation rules for ProjectId

	if len(errors) > 0 {
		return GetMeResponseMultiError(errors)
	}

	return nil
}

// GetMeResponseMultiError is an error wrapping multiple validation errors
// returned by GetMeResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMeResponseMultiError) AllErrors() []error { return m }

// GetMeResponseValidationError is the validation error returned by
// GetMeResponse.Validate if the designated constraints aren't met.
type GetMeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMeResponseValidationError) ErrorName() string { return "GetMeResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetMeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMeResponseValidationError{}

// Validate checks the field values on AddProjectRBACRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectRBACRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectRBACRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectRBACRoleRequestMultiError, or nil if none found.
func (m *AddProjectRBACRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectRBACRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddProjectRBACRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPolicies()) < 1 {
		err := AddProjectRBACRoleRequestValidationError{
			field:  "Policies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddProjectRBACRoleRequestValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddProjectRBACRoleRequestValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddProjectRBACRoleRequestValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddProjectRBACRoleRequestMultiError(errors)
	}

	return nil
}

// AddProjectRBACRoleRequestMultiError is an error wrapping multiple validation
// errors returned by AddProjectRBACRoleRequest.ValidateAll() if the
// designated constraints aren't met.
type AddProjectRBACRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectRBACRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectRBACRoleRequestMultiError) AllErrors() []error { return m }

// AddProjectRBACRoleRequestValidationError is the validation error returned by
// AddProjectRBACRoleRequest.Validate if the designated constraints aren't met.
type AddProjectRBACRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectRBACRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectRBACRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectRBACRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectRBACRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectRBACRoleRequestValidationError) ErrorName() string {
	return "AddProjectRBACRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectRBACRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectRBACRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectRBACRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectRBACRoleRequestValidationError{}

// Validate checks the field values on AddProjectRBACRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectRBACRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectRBACRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectRBACRoleResponseMultiError, or nil if none found.
func (m *AddProjectRBACRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectRBACRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProjectRBACRoleResponseMultiError(errors)
	}

	return nil
}

// AddProjectRBACRoleResponseMultiError is an error wrapping multiple
// validation errors returned by AddProjectRBACRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type AddProjectRBACRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectRBACRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectRBACRoleResponseMultiError) AllErrors() []error { return m }

// AddProjectRBACRoleResponseValidationError is the validation error returned
// by AddProjectRBACRoleResponse.Validate if the designated constraints aren't met.
type AddProjectRBACRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectRBACRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectRBACRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectRBACRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectRBACRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectRBACRoleResponseValidationError) ErrorName() string {
	return "AddProjectRBACRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectRBACRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectRBACRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectRBACRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectRBACRoleResponseValidationError{}

// Validate checks the field values on UpdateProjectRBACRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRBACRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRBACRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectRBACRoleRequestMultiError, or nil if none found.
func (m *UpdateProjectRBACRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRBACRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateProjectRBACRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPolicies()) < 1 {
		err := UpdateProjectRBACRoleRequestValidationError{
			field:  "Policies",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPolicies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateProjectRBACRoleRequestValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateProjectRBACRoleRequestValidationError{
						field:  fmt.Sprintf("Policies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateProjectRBACRoleRequestValidationError{
					field:  fmt.Sprintf("Policies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateProjectRBACRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectRBACRoleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectRBACRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProjectRBACRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRBACRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRBACRoleRequestMultiError) AllErrors() []error { return m }

// UpdateProjectRBACRoleRequestValidationError is the validation error returned
// by UpdateProjectRBACRoleRequest.Validate if the designated constraints
// aren't met.
type UpdateProjectRBACRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRBACRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRBACRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRBACRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRBACRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRBACRoleRequestValidationError) ErrorName() string {
	return "UpdateProjectRBACRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRBACRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRBACRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRBACRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRBACRoleRequestValidationError{}

// Validate checks the field values on UpdateProjectRBACRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRBACRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRBACRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectRBACRoleResponseMultiError, or nil if none found.
func (m *UpdateProjectRBACRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRBACRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProjectRBACRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectRBACRoleResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectRBACRoleResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectRBACRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRBACRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRBACRoleResponseMultiError) AllErrors() []error { return m }

// UpdateProjectRBACRoleResponseValidationError is the validation error
// returned by UpdateProjectRBACRoleResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectRBACRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRBACRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRBACRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRBACRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRBACRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRBACRoleResponseValidationError) ErrorName() string {
	return "UpdateProjectRBACRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRBACRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRBACRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRBACRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRBACRoleResponseValidationError{}

// Validate checks the field values on DeleteProjectRBACRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectRBACRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectRBACRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectRBACRoleRequestMultiError, or nil if none found.
func (m *DeleteProjectRBACRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectRBACRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := DeleteProjectRBACRoleRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProjectRBACRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectRBACRoleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectRBACRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProjectRBACRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectRBACRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectRBACRoleRequestMultiError) AllErrors() []error { return m }

// DeleteProjectRBACRoleRequestValidationError is the validation error returned
// by DeleteProjectRBACRoleRequest.Validate if the designated constraints
// aren't met.
type DeleteProjectRBACRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRBACRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRBACRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRBACRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRBACRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRBACRoleRequestValidationError) ErrorName() string {
	return "DeleteProjectRBACRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRBACRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRBACRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRBACRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRBACRoleRequestValidationError{}

// Validate checks the field values on DeleteProjectRBACRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectRBACRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectRBACRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProjectRBACRoleResponseMultiError, or nil if none found.
func (m *DeleteProjectRBACRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectRBACRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectRBACRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectRBACRoleResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectRBACRoleResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteProjectRBACRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectRBACRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectRBACRoleResponseMultiError) AllErrors() []error { return m }

// DeleteProjectRBACRoleResponseValidationError is the validation error
// returned by DeleteProjectRBACRoleResponse.Validate if the designated
// constraints aren't met.
type DeleteProjectRBACRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRBACRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRBACRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRBACRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRBACRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRBACRoleResponseValidationError) ErrorName() string {
	return "DeleteProjectRBACRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRBACRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRBACRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRBACRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRBACRoleResponseValidationError{}

// Validate checks the field values on AddProjectUserGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectUserGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectUserGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectUserGroupRequestMultiError, or nil if none found.
func (m *AddProjectUserGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectUserGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSsoGroup()) < 1 {
		err := AddProjectUserGroupRequestValidationError{
			field:  "SsoGroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := AddProjectUserGroupRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProjectUserGroupRequestMultiError(errors)
	}

	return nil
}

// AddProjectUserGroupRequestMultiError is an error wrapping multiple
// validation errors returned by AddProjectUserGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type AddProjectUserGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectUserGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectUserGroupRequestMultiError) AllErrors() []error { return m }

// AddProjectUserGroupRequestValidationError is the validation error returned
// by AddProjectUserGroupRequest.Validate if the designated constraints aren't met.
type AddProjectUserGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectUserGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectUserGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectUserGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectUserGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectUserGroupRequestValidationError) ErrorName() string {
	return "AddProjectUserGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectUserGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectUserGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectUserGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectUserGroupRequestValidationError{}

// Validate checks the field values on AddProjectUserGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectUserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectUserGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectUserGroupResponseMultiError, or nil if none found.
func (m *AddProjectUserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectUserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProjectUserGroupResponseMultiError(errors)
	}

	return nil
}

// AddProjectUserGroupResponseMultiError is an error wrapping multiple
// validation errors returned by AddProjectUserGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type AddProjectUserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectUserGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectUserGroupResponseMultiError) AllErrors() []error { return m }

// AddProjectUserGroupResponseValidationError is the validation error returned
// by AddProjectUserGroupResponse.Validate if the designated constraints
// aren't met.
type AddProjectUserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectUserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectUserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectUserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectUserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectUserGroupResponseValidationError) ErrorName() string {
	return "AddProjectUserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectUserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectUserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectUserGroupResponseValidationError{}

// Validate checks the field values on DeleteProjectUserGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectUserGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectUserGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProjectUserGroupRequestMultiError, or nil if none found.
func (m *DeleteProjectUserGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectUserGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSsoGroup()) < 1 {
		err := DeleteProjectUserGroupRequestValidationError{
			field:  "SsoGroup",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProjectUserGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectUserGroupRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectUserGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteProjectUserGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectUserGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectUserGroupRequestMultiError) AllErrors() []error { return m }

// DeleteProjectUserGroupRequestValidationError is the validation error
// returned by DeleteProjectUserGroupRequest.Validate if the designated
// constraints aren't met.
type DeleteProjectUserGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectUserGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectUserGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectUserGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectUserGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectUserGroupRequestValidationError) ErrorName() string {
	return "DeleteProjectUserGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectUserGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectUserGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectUserGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectUserGroupRequestValidationError{}

// Validate checks the field values on DeleteProjectUserGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectUserGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectUserGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProjectUserGroupResponseMultiError, or nil if none found.
func (m *DeleteProjectUserGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectUserGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectUserGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectUserGroupResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProjectUserGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteProjectUserGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectUserGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectUserGroupResponseMultiError) AllErrors() []error { return m }

// DeleteProjectUserGroupResponseValidationError is the validation error
// returned by DeleteProjectUserGroupResponse.Validate if the designated
// constraints aren't met.
type DeleteProjectUserGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectUserGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectUserGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectUserGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectUserGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectUserGroupResponseValidationError) ErrorName() string {
	return "DeleteProjectUserGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectUserGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectUserGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectUserGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectUserGroupResponseValidationError{}

// Validate checks the field values on GetCommandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommandRequestMultiError, or nil if none found.
func (m *GetCommandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCommandId()) < 1 {
		err := GetCommandRequestValidationError{
			field:  "CommandId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommandRequestMultiError(errors)
	}

	return nil
}

// GetCommandRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommandRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommandRequestMultiError) AllErrors() []error { return m }

// GetCommandRequestValidationError is the validation error returned by
// GetCommandRequest.Validate if the designated constraints aren't met.
type GetCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommandRequestValidationError) ErrorName() string {
	return "GetCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommandRequestValidationError{}

// Validate checks the field values on GetCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommandResponseMultiError, or nil if none found.
func (m *GetCommandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommandResponseValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommandResponseValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommandResponseValidationError{
				field:  "Command",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommandResponseMultiError(errors)
	}

	return nil
}

// GetCommandResponseMultiError is an error wrapping multiple validation errors
// returned by GetCommandResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCommandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommandResponseMultiError) AllErrors() []error { return m }

// GetCommandResponseValidationError is the validation error returned by
// GetCommandResponse.Validate if the designated constraints aren't met.
type GetCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommandResponseValidationError) ErrorName() string {
	return "GetCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommandResponseValidationError{}

// Validate checks the field values on GenerateAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAPIKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAPIKeyRequestMultiError, or nil if none found.
func (m *GenerateAPIKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAPIKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GenerateAPIKeyRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.APIKey_Role_name[int32(m.GetRole())]; !ok {
		err := GenerateAPIKeyRequestValidationError{
			field:  "Role",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateAPIKeyRequestMultiError(errors)
	}

	return nil
}

// GenerateAPIKeyRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateAPIKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type GenerateAPIKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAPIKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAPIKeyRequestMultiError) AllErrors() []error { return m }

// GenerateAPIKeyRequestValidationError is the validation error returned by
// GenerateAPIKeyRequest.Validate if the designated constraints aren't met.
type GenerateAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAPIKeyRequestValidationError) ErrorName() string {
	return "GenerateAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAPIKeyRequestValidationError{}

// Validate checks the field values on GenerateAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateAPIKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateAPIKeyResponseMultiError, or nil if none found.
func (m *GenerateAPIKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateAPIKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return GenerateAPIKeyResponseMultiError(errors)
	}

	return nil
}

// GenerateAPIKeyResponseMultiError is an error wrapping multiple validation
// errors returned by GenerateAPIKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type GenerateAPIKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateAPIKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateAPIKeyResponseMultiError) AllErrors() []error { return m }

// GenerateAPIKeyResponseValidationError is the validation error returned by
// GenerateAPIKeyResponse.Validate if the designated constraints aren't met.
type GenerateAPIKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateAPIKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateAPIKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateAPIKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateAPIKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateAPIKeyResponseValidationError) ErrorName() string {
	return "GenerateAPIKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateAPIKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateAPIKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateAPIKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateAPIKeyResponseValidationError{}

// Validate checks the field values on DisableAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableAPIKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableAPIKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableAPIKeyRequestMultiError, or nil if none found.
func (m *DisableAPIKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableAPIKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DisableAPIKeyRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableAPIKeyRequestMultiError(errors)
	}

	return nil
}

// DisableAPIKeyRequestMultiError is an error wrapping multiple validation
// errors returned by DisableAPIKeyRequest.ValidateAll() if the designated
// constraints aren't met.
type DisableAPIKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableAPIKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableAPIKeyRequestMultiError) AllErrors() []error { return m }

// DisableAPIKeyRequestValidationError is the validation error returned by
// DisableAPIKeyRequest.Validate if the designated constraints aren't met.
type DisableAPIKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableAPIKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableAPIKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableAPIKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableAPIKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableAPIKeyRequestValidationError) ErrorName() string {
	return "DisableAPIKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableAPIKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableAPIKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableAPIKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableAPIKeyRequestValidationError{}

// Validate checks the field values on DisableAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableAPIKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableAPIKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableAPIKeyResponseMultiError, or nil if none found.
func (m *DisableAPIKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableAPIKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisableAPIKeyResponseMultiError(errors)
	}

	return nil
}

// DisableAPIKeyResponseMultiError is an error wrapping multiple validation
// errors returned by DisableAPIKeyResponse.ValidateAll() if the designated
// constraints aren't met.
type DisableAPIKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableAPIKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableAPIKeyResponseMultiError) AllErrors() []error { return m }

// DisableAPIKeyResponseValidationError is the validation error returned by
// DisableAPIKeyResponse.Validate if the designated constraints aren't met.
type DisableAPIKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableAPIKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableAPIKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableAPIKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableAPIKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableAPIKeyResponseValidationError) ErrorName() string {
	return "DisableAPIKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableAPIKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableAPIKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableAPIKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableAPIKeyResponseValidationError{}

// Validate checks the field values on ListAPIKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAPIKeysRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAPIKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAPIKeysRequestMultiError, or nil if none found.
func (m *ListAPIKeysRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAPIKeysRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAPIKeysRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAPIKeysRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAPIKeysRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAPIKeysRequestMultiError(errors)
	}

	return nil
}

// ListAPIKeysRequestMultiError is an error wrapping multiple validation errors
// returned by ListAPIKeysRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAPIKeysRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAPIKeysRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAPIKeysRequestMultiError) AllErrors() []error { return m }

// ListAPIKeysRequestValidationError is the validation error returned by
// ListAPIKeysRequest.Validate if the designated constraints aren't met.
type ListAPIKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAPIKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAPIKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAPIKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAPIKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAPIKeysRequestValidationError) ErrorName() string {
	return "ListAPIKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAPIKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAPIKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAPIKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAPIKeysRequestValidationError{}

// Validate checks the field values on ListAPIKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAPIKeysResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAPIKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAPIKeysResponseMultiError, or nil if none found.
func (m *ListAPIKeysResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAPIKeysResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAPIKeysResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAPIKeysResponseValidationError{
						field:  fmt.Sprintf("Keys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAPIKeysResponseValidationError{
					field:  fmt.Sprintf("Keys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAPIKeysResponseMultiError(errors)
	}

	return nil
}

// ListAPIKeysResponseMultiError is an error wrapping multiple validation
// errors returned by ListAPIKeysResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAPIKeysResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAPIKeysResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAPIKeysResponseMultiError) AllErrors() []error { return m }

// ListAPIKeysResponseValidationError is the validation error returned by
// ListAPIKeysResponse.Validate if the designated constraints aren't met.
type ListAPIKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAPIKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAPIKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAPIKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAPIKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAPIKeysResponseValidationError) ErrorName() string {
	return "ListAPIKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAPIKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAPIKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAPIKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAPIKeysResponseValidationError{}

// Validate checks the field values on GetInsightDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInsightDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInsightDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInsightDataRequestMultiError, or nil if none found.
func (m *GetInsightDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInsightDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := model.InsightMetricsKind_name[int32(m.GetMetricsKind())]; !ok {
		err := GetInsightDataRequestValidationError{
			field:  "MetricsKind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRangeFrom() <= 0 {
		err := GetInsightDataRequestValidationError{
			field:  "RangeFrom",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRangeTo() <= 0 {
		err := GetInsightDataRequestValidationError{
			field:  "RangeTo",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.InsightResolution_name[int32(m.GetResolution())]; !ok {
		err := GetInsightDataRequestValidationError{
			field:  "Resolution",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ApplicationId

	// no validation rules for Labels

	if len(errors) > 0 {
		return GetInsightDataRequestMultiError(errors)
	}

	return nil
}

// GetInsightDataRequestMultiError is an error wrapping multiple validation
// errors returned by GetInsightDataRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInsightDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInsightDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInsightDataRequestMultiError) AllErrors() []error { return m }

// GetInsightDataRequestValidationError is the validation error returned by
// GetInsightDataRequest.Validate if the designated constraints aren't met.
type GetInsightDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInsightDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInsightDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInsightDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInsightDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInsightDataRequestValidationError) ErrorName() string {
	return "GetInsightDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInsightDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInsightDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInsightDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInsightDataRequestValidationError{}

// Validate checks the field values on GetInsightDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInsightDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInsightDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInsightDataResponseMultiError, or nil if none found.
func (m *GetInsightDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInsightDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UpdatedAt

	// no validation rules for Type

	for idx, item := range m.GetVector() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetInsightDataResponseValidationError{
						field:  fmt.Sprintf("Vector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetInsightDataResponseValidationError{
						field:  fmt.Sprintf("Vector[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInsightDataResponseValidationError{
					field:  fmt.Sprintf("Vector[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMatrix() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetInsightDataResponseValidationError{
						field:  fmt.Sprintf("Matrix[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetInsightDataResponseValidationError{
						field:  fmt.Sprintf("Matrix[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInsightDataResponseValidationError{
					field:  fmt.Sprintf("Matrix[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetInsightDataResponseMultiError(errors)
	}

	return nil
}

// GetInsightDataResponseMultiError is an error wrapping multiple validation
// errors returned by GetInsightDataResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInsightDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInsightDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInsightDataResponseMultiError) AllErrors() []error { return m }

// GetInsightDataResponseValidationError is the validation error returned by
// GetInsightDataResponse.Validate if the designated constraints aren't met.
type GetInsightDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInsightDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInsightDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInsightDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInsightDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInsightDataResponseValidationError) ErrorName() string {
	return "GetInsightDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInsightDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInsightDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInsightDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInsightDataResponseValidationError{}

// Validate checks the field values on GetInsightApplicationCountRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetInsightApplicationCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInsightApplicationCountRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetInsightApplicationCountRequestMultiError, or nil if none found.
func (m *GetInsightApplicationCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInsightApplicationCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetInsightApplicationCountRequestMultiError(errors)
	}

	return nil
}

// GetInsightApplicationCountRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetInsightApplicationCountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInsightApplicationCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInsightApplicationCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInsightApplicationCountRequestMultiError) AllErrors() []error { return m }

// GetInsightApplicationCountRequestValidationError is the validation error
// returned by GetInsightApplicationCountRequest.Validate if the designated
// constraints aren't met.
type GetInsightApplicationCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInsightApplicationCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInsightApplicationCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInsightApplicationCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInsightApplicationCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInsightApplicationCountRequestValidationError) ErrorName() string {
	return "GetInsightApplicationCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInsightApplicationCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInsightApplicationCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInsightApplicationCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInsightApplicationCountRequestValidationError{}

// Validate checks the field values on GetInsightApplicationCountResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetInsightApplicationCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInsightApplicationCountResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetInsightApplicationCountResponseMultiError, or nil if none found.
func (m *GetInsightApplicationCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInsightApplicationCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UpdatedAt

	for idx, item := range m.GetCounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetInsightApplicationCountResponseValidationError{
						field:  fmt.Sprintf("Counts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetInsightApplicationCountResponseValidationError{
						field:  fmt.Sprintf("Counts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetInsightApplicationCountResponseValidationError{
					field:  fmt.Sprintf("Counts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetInsightApplicationCountResponseMultiError(errors)
	}

	return nil
}

// GetInsightApplicationCountResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetInsightApplicationCountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInsightApplicationCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInsightApplicationCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInsightApplicationCountResponseMultiError) AllErrors() []error { return m }

// GetInsightApplicationCountResponseValidationError is the validation error
// returned by GetInsightApplicationCountResponse.Validate if the designated
// constraints aren't met.
type GetInsightApplicationCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInsightApplicationCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInsightApplicationCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInsightApplicationCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInsightApplicationCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInsightApplicationCountResponseValidationError) ErrorName() string {
	return "GetInsightApplicationCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInsightApplicationCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInsightApplicationCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInsightApplicationCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInsightApplicationCountResponseValidationError{}

// Validate checks the field values on ListDeploymentChainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentChainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentChainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentChainsRequestMultiError, or nil if none found.
func (m *ListDeploymentChainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentChainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDeploymentChainsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDeploymentChainsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDeploymentChainsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for Cursor

	// no validation rules for PageMinUpdatedAt

	if len(errors) > 0 {
		return ListDeploymentChainsRequestMultiError(errors)
	}

	return nil
}

// ListDeploymentChainsRequestMultiError is an error wrapping multiple
// validation errors returned by ListDeploymentChainsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDeploymentChainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentChainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentChainsRequestMultiError) AllErrors() []error { return m }

// ListDeploymentChainsRequestValidationError is the validation error returned
// by ListDeploymentChainsRequest.Validate if the designated constraints
// aren't met.
type ListDeploymentChainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentChainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentChainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentChainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentChainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentChainsRequestValidationError) ErrorName() string {
	return "ListDeploymentChainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentChainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentChainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentChainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentChainsRequestValidationError{}

// Validate checks the field values on ListDeploymentChainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentChainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentChainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentChainsResponseMultiError, or nil if none found.
func (m *ListDeploymentChainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentChainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeploymentChains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeploymentChainsResponseValidationError{
						field:  fmt.Sprintf("DeploymentChains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeploymentChainsResponseValidationError{
						field:  fmt.Sprintf("DeploymentChains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentChainsResponseValidationError{
					field:  fmt.Sprintf("DeploymentChains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListDeploymentChainsResponseMultiError(errors)
	}

	return nil
}

// ListDeploymentChainsResponseMultiError is an error wrapping multiple
// validation errors returned by ListDeploymentChainsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListDeploymentChainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentChainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentChainsResponseMultiError) AllErrors() []error { return m }

// ListDeploymentChainsResponseValidationError is the validation error returned
// by ListDeploymentChainsResponse.Validate if the designated constraints
// aren't met.
type ListDeploymentChainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentChainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentChainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentChainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentChainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentChainsResponseValidationError) ErrorName() string {
	return "ListDeploymentChainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentChainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentChainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentChainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentChainsResponseValidationError{}

// Validate checks the field values on GetDeploymentChainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentChainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentChainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentChainRequestMultiError, or nil if none found.
func (m *GetDeploymentChainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentChainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentChainId()) < 1 {
		err := GetDeploymentChainRequestValidationError{
			field:  "DeploymentChainId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeploymentChainRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentChainRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentChainRequest.ValidateAll() if the
// designated constraints aren't met.
type GetDeploymentChainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentChainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentChainRequestMultiError) AllErrors() []error { return m }

// GetDeploymentChainRequestValidationError is the validation error returned by
// GetDeploymentChainRequest.Validate if the designated constraints aren't met.
type GetDeploymentChainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentChainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentChainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentChainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentChainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentChainRequestValidationError) ErrorName() string {
	return "GetDeploymentChainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentChainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentChainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentChainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentChainRequestValidationError{}

// Validate checks the field values on GetDeploymentChainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentChainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentChainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentChainResponseMultiError, or nil if none found.
func (m *GetDeploymentChainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentChainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeploymentChain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeploymentChainResponseValidationError{
					field:  "DeploymentChain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeploymentChainResponseValidationError{
					field:  "DeploymentChain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeploymentChain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeploymentChainResponseValidationError{
				field:  "DeploymentChain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeploymentChainResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentChainResponseMultiError is an error wrapping multiple
// validation errors returned by GetDeploymentChainResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDeploymentChainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentChainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentChainResponseMultiError) AllErrors() []error { return m }

// GetDeploymentChainResponseValidationError is the validation error returned
// by GetDeploymentChainResponse.Validate if the designated constraints aren't met.
type GetDeploymentChainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentChainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentChainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentChainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentChainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentChainResponseValidationError) ErrorName() string {
	return "GetDeploymentChainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentChainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentChainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentChainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentChainResponseValidationError{}

// Validate checks the field values on ListEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsRequestMultiError, or nil if none found.
func (m *ListEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEventsRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PageSize

	// no validation rules for Cursor

	// no validation rules for PageMinUpdatedAt

	if len(errors) > 0 {
		return ListEventsRequestMultiError(errors)
	}

	return nil
}

// ListEventsRequestMultiError is an error wrapping multiple validation errors
// returned by ListEventsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsRequestMultiError) AllErrors() []error { return m }

// ListEventsRequestValidationError is the validation error returned by
// ListEventsRequest.Validate if the designated constraints aren't met.
type ListEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsRequestValidationError) ErrorName() string {
	return "ListEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsRequestValidationError{}

// Validate checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsResponseMultiError, or nil if none found.
func (m *ListEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListEventsResponseMultiError(errors)
	}

	return nil
}

// ListEventsResponseMultiError is an error wrapping multiple validation errors
// returned by ListEventsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsResponseMultiError) AllErrors() []error { return m }

// ListEventsResponseValidationError is the validation error returned by
// ListEventsResponse.Validate if the designated constraints aren't met.
type ListEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsResponseValidationError) ErrorName() string {
	return "ListEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsResponseValidationError{}

// Validate checks the field values on ListPipedsRequest_Options with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPipedsRequest_Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPipedsRequest_Options with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPipedsRequest_OptionsMultiError, or nil if none found.
func (m *ListPipedsRequest_Options) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPipedsRequest_Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnabled()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPipedsRequest_OptionsValidationError{
					field:  "Enabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPipedsRequest_OptionsValidationError{
					field:  "Enabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnabled()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPipedsRequest_OptionsValidationError{
				field:  "Enabled",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPipedsRequest_OptionsMultiError(errors)
	}

	return nil
}

// ListPipedsRequest_OptionsMultiError is an error wrapping multiple validation
// errors returned by ListPipedsRequest_Options.ValidateAll() if the
// designated constraints aren't met.
type ListPipedsRequest_OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPipedsRequest_OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPipedsRequest_OptionsMultiError) AllErrors() []error { return m }

// ListPipedsRequest_OptionsValidationError is the validation error returned by
// ListPipedsRequest_Options.Validate if the designated constraints aren't met.
type ListPipedsRequest_OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPipedsRequest_OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPipedsRequest_OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPipedsRequest_OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPipedsRequest_OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPipedsRequest_OptionsValidationError) ErrorName() string {
	return "ListPipedsRequest_OptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ListPipedsRequest_OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPipedsRequest_Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPipedsRequest_OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPipedsRequest_OptionsValidationError{}

// Validate checks the field values on ListApplicationsRequest_Options with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsRequest_Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsRequest_Options with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListApplicationsRequest_OptionsMultiError, or nil if none found.
func (m *ListApplicationsRequest_Options) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsRequest_Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnabled()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListApplicationsRequest_OptionsValidationError{
					field:  "Enabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListApplicationsRequest_OptionsValidationError{
					field:  "Enabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnabled()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListApplicationsRequest_OptionsValidationError{
				field:  "Enabled",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Labels

	// no validation rules for PipedId

	if len(errors) > 0 {
		return ListApplicationsRequest_OptionsMultiError(errors)
	}

	return nil
}

// ListApplicationsRequest_OptionsMultiError is an error wrapping multiple
// validation errors returned by ListApplicationsRequest_Options.ValidateAll()
// if the designated constraints aren't met.
type ListApplicationsRequest_OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRequest_OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRequest_OptionsMultiError) AllErrors() []error { return m }

// ListApplicationsRequest_OptionsValidationError is the validation error
// returned by ListApplicationsRequest_Options.Validate if the designated
// constraints aren't met.
type ListApplicationsRequest_OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequest_OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequest_OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequest_OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequest_OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequest_OptionsValidationError) ErrorName() string {
	return "ListApplicationsRequest_OptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequest_OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest_Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequest_OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequest_OptionsValidationError{}

// Validate checks the field values on ListDeploymentsRequest_Options with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentsRequest_Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsRequest_Options with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDeploymentsRequest_OptionsMultiError, or nil if none found.
func (m *ListDeploymentsRequest_Options) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsRequest_Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	// no validation rules for Labels

	if len(errors) > 0 {
		return ListDeploymentsRequest_OptionsMultiError(errors)
	}

	return nil
}

// ListDeploymentsRequest_OptionsMultiError is an error wrapping multiple
// validation errors returned by ListDeploymentsRequest_Options.ValidateAll()
// if the designated constraints aren't met.
type ListDeploymentsRequest_OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsRequest_OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsRequest_OptionsMultiError) AllErrors() []error { return m }

// ListDeploymentsRequest_OptionsValidationError is the validation error
// returned by ListDeploymentsRequest_Options.Validate if the designated
// constraints aren't met.
type ListDeploymentsRequest_OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsRequest_OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsRequest_OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsRequest_OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsRequest_OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsRequest_OptionsValidationError) ErrorName() string {
	return "ListDeploymentsRequest_OptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsRequest_OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsRequest_Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsRequest_OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsRequest_OptionsValidationError{}

// Validate checks the field values on ListAPIKeysRequest_Options with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAPIKeysRequest_Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAPIKeysRequest_Options with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAPIKeysRequest_OptionsMultiError, or nil if none found.
func (m *ListAPIKeysRequest_Options) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAPIKeysRequest_Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEnabled()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAPIKeysRequest_OptionsValidationError{
					field:  "Enabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAPIKeysRequest_OptionsValidationError{
					field:  "Enabled",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnabled()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAPIKeysRequest_OptionsValidationError{
				field:  "Enabled",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAPIKeysRequest_OptionsMultiError(errors)
	}

	return nil
}

// ListAPIKeysRequest_OptionsMultiError is an error wrapping multiple
// validation errors returned by ListAPIKeysRequest_Options.ValidateAll() if
// the designated constraints aren't met.
type ListAPIKeysRequest_OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAPIKeysRequest_OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAPIKeysRequest_OptionsMultiError) AllErrors() []error { return m }

// ListAPIKeysRequest_OptionsValidationError is the validation error returned
// by ListAPIKeysRequest_Options.Validate if the designated constraints aren't met.
type ListAPIKeysRequest_OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAPIKeysRequest_OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAPIKeysRequest_OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAPIKeysRequest_OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAPIKeysRequest_OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAPIKeysRequest_OptionsValidationError) ErrorName() string {
	return "ListAPIKeysRequest_OptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAPIKeysRequest_OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAPIKeysRequest_Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAPIKeysRequest_OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAPIKeysRequest_OptionsValidationError{}

// Validate checks the field values on ListDeploymentChainsRequest_Options with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDeploymentChainsRequest_Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentChainsRequest_Options
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDeploymentChainsRequest_OptionsMultiError, or nil if none found.
func (m *ListDeploymentChainsRequest_Options) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentChainsRequest_Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDeploymentChainsRequest_OptionsMultiError(errors)
	}

	return nil
}

// ListDeploymentChainsRequest_OptionsMultiError is an error wrapping multiple
// validation errors returned by
// ListDeploymentChainsRequest_Options.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentChainsRequest_OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentChainsRequest_OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentChainsRequest_OptionsMultiError) AllErrors() []error { return m }

// ListDeploymentChainsRequest_OptionsValidationError is the validation error
// returned by ListDeploymentChainsRequest_Options.Validate if the designated
// constraints aren't met.
type ListDeploymentChainsRequest_OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentChainsRequest_OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentChainsRequest_OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentChainsRequest_OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentChainsRequest_OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentChainsRequest_OptionsValidationError) ErrorName() string {
	return "ListDeploymentChainsRequest_OptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentChainsRequest_OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentChainsRequest_Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentChainsRequest_OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentChainsRequest_OptionsValidationError{}

// Validate checks the field values on ListEventsRequest_Options with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEventsRequest_Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsRequest_Options with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsRequest_OptionsMultiError, or nil if none found.
func (m *ListEventsRequest_Options) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsRequest_Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Labels

	if len(errors) > 0 {
		return ListEventsRequest_OptionsMultiError(errors)
	}

	return nil
}

// ListEventsRequest_OptionsMultiError is an error wrapping multiple validation
// errors returned by ListEventsRequest_Options.ValidateAll() if the
// designated constraints aren't met.
type ListEventsRequest_OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsRequest_OptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsRequest_OptionsMultiError) AllErrors() []error { return m }

// ListEventsRequest_OptionsValidationError is the validation error returned by
// ListEventsRequest_Options.Validate if the designated constraints aren't met.
type ListEventsRequest_OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsRequest_OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsRequest_OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsRequest_OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsRequest_OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsRequest_OptionsValidationError) ErrorName() string {
	return "ListEventsRequest_OptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsRequest_OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsRequest_Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsRequest_OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsRequest_OptionsValidationError{}
