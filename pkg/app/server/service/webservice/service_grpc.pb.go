// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: pkg/app/server/service/webservice/service.proto

package webservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebServiceClient is the client API for WebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebServiceClient interface {
	// Piped
	RegisterPiped(ctx context.Context, in *RegisterPipedRequest, opts ...grpc.CallOption) (*RegisterPipedResponse, error)
	UpdatePiped(ctx context.Context, in *UpdatePipedRequest, opts ...grpc.CallOption) (*UpdatePipedResponse, error)
	RecreatePipedKey(ctx context.Context, in *RecreatePipedKeyRequest, opts ...grpc.CallOption) (*RecreatePipedKeyResponse, error)
	DeleteOldPipedKeys(ctx context.Context, in *DeleteOldPipedKeysRequest, opts ...grpc.CallOption) (*DeleteOldPipedKeysResponse, error)
	EnablePiped(ctx context.Context, in *EnablePipedRequest, opts ...grpc.CallOption) (*EnablePipedResponse, error)
	DisablePiped(ctx context.Context, in *DisablePipedRequest, opts ...grpc.CallOption) (*DisablePipedResponse, error)
	ListPipeds(ctx context.Context, in *ListPipedsRequest, opts ...grpc.CallOption) (*ListPipedsResponse, error)
	GetPiped(ctx context.Context, in *GetPipedRequest, opts ...grpc.CallOption) (*GetPipedResponse, error)
	UpdatePipedDesiredVersion(ctx context.Context, in *UpdatePipedDesiredVersionRequest, opts ...grpc.CallOption) (*UpdatePipedDesiredVersionResponse, error)
	RestartPiped(ctx context.Context, in *RestartPipedRequest, opts ...grpc.CallOption) (*RestartPipedResponse, error)
	ListReleasedVersions(ctx context.Context, in *ListReleasedVersionsRequest, opts ...grpc.CallOption) (*ListReleasedVersionsResponse, error)
	// Application
	AddApplication(ctx context.Context, in *AddApplicationRequest, opts ...grpc.CallOption) (*AddApplicationResponse, error)
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	EnableApplication(ctx context.Context, in *EnableApplicationRequest, opts ...grpc.CallOption) (*EnableApplicationResponse, error)
	DisableApplication(ctx context.Context, in *DisableApplicationRequest, opts ...grpc.CallOption) (*DisableApplicationResponse, error)
	DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
	SyncApplication(ctx context.Context, in *SyncApplicationRequest, opts ...grpc.CallOption) (*SyncApplicationResponse, error)
	GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	GenerateApplicationSealedSecret(ctx context.Context, in *GenerateApplicationSealedSecretRequest, opts ...grpc.CallOption) (*GenerateApplicationSealedSecretResponse, error)
	ListUnregisteredApplications(ctx context.Context, in *ListUnregisteredApplicationsRequest, opts ...grpc.CallOption) (*ListUnregisteredApplicationsResponse, error)
	// Deployment
	ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
	GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error)
	GetStageLog(ctx context.Context, in *GetStageLogRequest, opts ...grpc.CallOption) (*GetStageLogResponse, error)
	CancelDeployment(ctx context.Context, in *CancelDeploymentRequest, opts ...grpc.CallOption) (*CancelDeploymentResponse, error)
	SkipStage(ctx context.Context, in *SkipStageRequest, opts ...grpc.CallOption) (*SkipStageResponse, error)
	ApproveStage(ctx context.Context, in *ApproveStageRequest, opts ...grpc.CallOption) (*ApproveStageResponse, error)
	// ApplicationLiveState
	GetApplicationLiveState(ctx context.Context, in *GetApplicationLiveStateRequest, opts ...grpc.CallOption) (*GetApplicationLiveStateResponse, error)
	// Account
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	UpdateProjectStaticAdmin(ctx context.Context, in *UpdateProjectStaticAdminRequest, opts ...grpc.CallOption) (*UpdateProjectStaticAdminResponse, error)
	EnableStaticAdmin(ctx context.Context, in *EnableStaticAdminRequest, opts ...grpc.CallOption) (*EnableStaticAdminResponse, error)
	DisableStaticAdmin(ctx context.Context, in *DisableStaticAdminRequest, opts ...grpc.CallOption) (*DisableStaticAdminResponse, error)
	UpdateProjectSSOConfig(ctx context.Context, in *UpdateProjectSSOConfigRequest, opts ...grpc.CallOption) (*UpdateProjectSSOConfigResponse, error)
	UpdateProjectRBACConfig(ctx context.Context, in *UpdateProjectRBACConfigRequest, opts ...grpc.CallOption) (*UpdateProjectRBACConfigResponse, error)
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error)
	AddProjectRBACRole(ctx context.Context, in *AddProjectRBACRoleRequest, opts ...grpc.CallOption) (*AddProjectRBACRoleResponse, error)
	UpdateProjectRBACRole(ctx context.Context, in *UpdateProjectRBACRoleRequest, opts ...grpc.CallOption) (*UpdateProjectRBACRoleResponse, error)
	DeleteProjectRBACRole(ctx context.Context, in *DeleteProjectRBACRoleRequest, opts ...grpc.CallOption) (*DeleteProjectRBACRoleResponse, error)
	AddProjectUserGroup(ctx context.Context, in *AddProjectUserGroupRequest, opts ...grpc.CallOption) (*AddProjectUserGroupResponse, error)
	DeleteProjectUserGroup(ctx context.Context, in *DeleteProjectUserGroupRequest, opts ...grpc.CallOption) (*DeleteProjectUserGroupResponse, error)
	// Command
	GetCommand(ctx context.Context, in *GetCommandRequest, opts ...grpc.CallOption) (*GetCommandResponse, error)
	// API Key
	GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...grpc.CallOption) (*GenerateAPIKeyResponse, error)
	DisableAPIKey(ctx context.Context, in *DisableAPIKeyRequest, opts ...grpc.CallOption) (*DisableAPIKeyResponse, error)
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error)
	// Insights
	GetInsightData(ctx context.Context, in *GetInsightDataRequest, opts ...grpc.CallOption) (*GetInsightDataResponse, error)
	GetInsightApplicationCount(ctx context.Context, in *GetInsightApplicationCountRequest, opts ...grpc.CallOption) (*GetInsightApplicationCountResponse, error)
	// DeploymentChain
	ListDeploymentChains(ctx context.Context, in *ListDeploymentChainsRequest, opts ...grpc.CallOption) (*ListDeploymentChainsResponse, error)
	GetDeploymentChain(ctx context.Context, in *GetDeploymentChainRequest, opts ...grpc.CallOption) (*GetDeploymentChainResponse, error)
	// Events
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
}

type webServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebServiceClient(cc grpc.ClientConnInterface) WebServiceClient {
	return &webServiceClient{cc}
}

func (c *webServiceClient) RegisterPiped(ctx context.Context, in *RegisterPipedRequest, opts ...grpc.CallOption) (*RegisterPipedResponse, error) {
	out := new(RegisterPipedResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/RegisterPiped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdatePiped(ctx context.Context, in *UpdatePipedRequest, opts ...grpc.CallOption) (*UpdatePipedResponse, error) {
	out := new(UpdatePipedResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/UpdatePiped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) RecreatePipedKey(ctx context.Context, in *RecreatePipedKeyRequest, opts ...grpc.CallOption) (*RecreatePipedKeyResponse, error) {
	out := new(RecreatePipedKeyResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/RecreatePipedKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DeleteOldPipedKeys(ctx context.Context, in *DeleteOldPipedKeysRequest, opts ...grpc.CallOption) (*DeleteOldPipedKeysResponse, error) {
	out := new(DeleteOldPipedKeysResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/DeleteOldPipedKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) EnablePiped(ctx context.Context, in *EnablePipedRequest, opts ...grpc.CallOption) (*EnablePipedResponse, error) {
	out := new(EnablePipedResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/EnablePiped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DisablePiped(ctx context.Context, in *DisablePipedRequest, opts ...grpc.CallOption) (*DisablePipedResponse, error) {
	out := new(DisablePipedResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/DisablePiped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListPipeds(ctx context.Context, in *ListPipedsRequest, opts ...grpc.CallOption) (*ListPipedsResponse, error) {
	out := new(ListPipedsResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ListPipeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetPiped(ctx context.Context, in *GetPipedRequest, opts ...grpc.CallOption) (*GetPipedResponse, error) {
	out := new(GetPipedResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetPiped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdatePipedDesiredVersion(ctx context.Context, in *UpdatePipedDesiredVersionRequest, opts ...grpc.CallOption) (*UpdatePipedDesiredVersionResponse, error) {
	out := new(UpdatePipedDesiredVersionResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/UpdatePipedDesiredVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) RestartPiped(ctx context.Context, in *RestartPipedRequest, opts ...grpc.CallOption) (*RestartPipedResponse, error) {
	out := new(RestartPipedResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/RestartPiped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListReleasedVersions(ctx context.Context, in *ListReleasedVersionsRequest, opts ...grpc.CallOption) (*ListReleasedVersionsResponse, error) {
	out := new(ListReleasedVersionsResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ListReleasedVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) AddApplication(ctx context.Context, in *AddApplicationRequest, opts ...grpc.CallOption) (*AddApplicationResponse, error) {
	out := new(AddApplicationResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/AddApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	out := new(UpdateApplicationResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) EnableApplication(ctx context.Context, in *EnableApplicationRequest, opts ...grpc.CallOption) (*EnableApplicationResponse, error) {
	out := new(EnableApplicationResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/EnableApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DisableApplication(ctx context.Context, in *DisableApplicationRequest, opts ...grpc.CallOption) (*DisableApplicationResponse, error) {
	out := new(DisableApplicationResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/DisableApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DeleteApplication(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	out := new(DeleteApplicationResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/DeleteApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) SyncApplication(ctx context.Context, in *SyncApplicationRequest, opts ...grpc.CallOption) (*SyncApplicationResponse, error) {
	out := new(SyncApplicationResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/SyncApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetApplication(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GenerateApplicationSealedSecret(ctx context.Context, in *GenerateApplicationSealedSecretRequest, opts ...grpc.CallOption) (*GenerateApplicationSealedSecretResponse, error) {
	out := new(GenerateApplicationSealedSecretResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GenerateApplicationSealedSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListUnregisteredApplications(ctx context.Context, in *ListUnregisteredApplicationsRequest, opts ...grpc.CallOption) (*ListUnregisteredApplicationsResponse, error) {
	out := new(ListUnregisteredApplicationsResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ListUnregisteredApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListDeployments(ctx context.Context, in *ListDeploymentsRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ListDeployments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetDeployment(ctx context.Context, in *GetDeploymentRequest, opts ...grpc.CallOption) (*GetDeploymentResponse, error) {
	out := new(GetDeploymentResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetStageLog(ctx context.Context, in *GetStageLogRequest, opts ...grpc.CallOption) (*GetStageLogResponse, error) {
	out := new(GetStageLogResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetStageLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) CancelDeployment(ctx context.Context, in *CancelDeploymentRequest, opts ...grpc.CallOption) (*CancelDeploymentResponse, error) {
	out := new(CancelDeploymentResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/CancelDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) SkipStage(ctx context.Context, in *SkipStageRequest, opts ...grpc.CallOption) (*SkipStageResponse, error) {
	out := new(SkipStageResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/SkipStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ApproveStage(ctx context.Context, in *ApproveStageRequest, opts ...grpc.CallOption) (*ApproveStageResponse, error) {
	out := new(ApproveStageResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ApproveStage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetApplicationLiveState(ctx context.Context, in *GetApplicationLiveStateRequest, opts ...grpc.CallOption) (*GetApplicationLiveStateResponse, error) {
	out := new(GetApplicationLiveStateResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetApplicationLiveState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateProjectStaticAdmin(ctx context.Context, in *UpdateProjectStaticAdminRequest, opts ...grpc.CallOption) (*UpdateProjectStaticAdminResponse, error) {
	out := new(UpdateProjectStaticAdminResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/UpdateProjectStaticAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) EnableStaticAdmin(ctx context.Context, in *EnableStaticAdminRequest, opts ...grpc.CallOption) (*EnableStaticAdminResponse, error) {
	out := new(EnableStaticAdminResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/EnableStaticAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DisableStaticAdmin(ctx context.Context, in *DisableStaticAdminRequest, opts ...grpc.CallOption) (*DisableStaticAdminResponse, error) {
	out := new(DisableStaticAdminResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/DisableStaticAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateProjectSSOConfig(ctx context.Context, in *UpdateProjectSSOConfigRequest, opts ...grpc.CallOption) (*UpdateProjectSSOConfigResponse, error) {
	out := new(UpdateProjectSSOConfigResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/UpdateProjectSSOConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateProjectRBACConfig(ctx context.Context, in *UpdateProjectRBACConfigRequest, opts ...grpc.CallOption) (*UpdateProjectRBACConfigResponse, error) {
	out := new(UpdateProjectRBACConfigResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/UpdateProjectRBACConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error) {
	out := new(GetMeResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) AddProjectRBACRole(ctx context.Context, in *AddProjectRBACRoleRequest, opts ...grpc.CallOption) (*AddProjectRBACRoleResponse, error) {
	out := new(AddProjectRBACRoleResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/AddProjectRBACRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) UpdateProjectRBACRole(ctx context.Context, in *UpdateProjectRBACRoleRequest, opts ...grpc.CallOption) (*UpdateProjectRBACRoleResponse, error) {
	out := new(UpdateProjectRBACRoleResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/UpdateProjectRBACRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DeleteProjectRBACRole(ctx context.Context, in *DeleteProjectRBACRoleRequest, opts ...grpc.CallOption) (*DeleteProjectRBACRoleResponse, error) {
	out := new(DeleteProjectRBACRoleResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/DeleteProjectRBACRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) AddProjectUserGroup(ctx context.Context, in *AddProjectUserGroupRequest, opts ...grpc.CallOption) (*AddProjectUserGroupResponse, error) {
	out := new(AddProjectUserGroupResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/AddProjectUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DeleteProjectUserGroup(ctx context.Context, in *DeleteProjectUserGroupRequest, opts ...grpc.CallOption) (*DeleteProjectUserGroupResponse, error) {
	out := new(DeleteProjectUserGroupResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/DeleteProjectUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetCommand(ctx context.Context, in *GetCommandRequest, opts ...grpc.CallOption) (*GetCommandResponse, error) {
	out := new(GetCommandResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GenerateAPIKey(ctx context.Context, in *GenerateAPIKeyRequest, opts ...grpc.CallOption) (*GenerateAPIKeyResponse, error) {
	out := new(GenerateAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GenerateAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) DisableAPIKey(ctx context.Context, in *DisableAPIKeyRequest, opts ...grpc.CallOption) (*DisableAPIKeyResponse, error) {
	out := new(DisableAPIKeyResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/DisableAPIKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error) {
	out := new(ListAPIKeysResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ListAPIKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetInsightData(ctx context.Context, in *GetInsightDataRequest, opts ...grpc.CallOption) (*GetInsightDataResponse, error) {
	out := new(GetInsightDataResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetInsightData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetInsightApplicationCount(ctx context.Context, in *GetInsightApplicationCountRequest, opts ...grpc.CallOption) (*GetInsightApplicationCountResponse, error) {
	out := new(GetInsightApplicationCountResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetInsightApplicationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListDeploymentChains(ctx context.Context, in *ListDeploymentChainsRequest, opts ...grpc.CallOption) (*ListDeploymentChainsResponse, error) {
	out := new(ListDeploymentChainsResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ListDeploymentChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) GetDeploymentChain(ctx context.Context, in *GetDeploymentChainRequest, opts ...grpc.CallOption) (*GetDeploymentChainResponse, error) {
	out := new(GetDeploymentChainResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/GetDeploymentChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/grpc.service.webservice.WebService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServiceServer is the server API for WebService service.
// All implementations must embed UnimplementedWebServiceServer
// for forward compatibility
type WebServiceServer interface {
	// Piped
	RegisterPiped(context.Context, *RegisterPipedRequest) (*RegisterPipedResponse, error)
	UpdatePiped(context.Context, *UpdatePipedRequest) (*UpdatePipedResponse, error)
	RecreatePipedKey(context.Context, *RecreatePipedKeyRequest) (*RecreatePipedKeyResponse, error)
	DeleteOldPipedKeys(context.Context, *DeleteOldPipedKeysRequest) (*DeleteOldPipedKeysResponse, error)
	EnablePiped(context.Context, *EnablePipedRequest) (*EnablePipedResponse, error)
	DisablePiped(context.Context, *DisablePipedRequest) (*DisablePipedResponse, error)
	ListPipeds(context.Context, *ListPipedsRequest) (*ListPipedsResponse, error)
	GetPiped(context.Context, *GetPipedRequest) (*GetPipedResponse, error)
	UpdatePipedDesiredVersion(context.Context, *UpdatePipedDesiredVersionRequest) (*UpdatePipedDesiredVersionResponse, error)
	RestartPiped(context.Context, *RestartPipedRequest) (*RestartPipedResponse, error)
	ListReleasedVersions(context.Context, *ListReleasedVersionsRequest) (*ListReleasedVersionsResponse, error)
	// Application
	AddApplication(context.Context, *AddApplicationRequest) (*AddApplicationResponse, error)
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	EnableApplication(context.Context, *EnableApplicationRequest) (*EnableApplicationResponse, error)
	DisableApplication(context.Context, *DisableApplicationRequest) (*DisableApplicationResponse, error)
	DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error)
	SyncApplication(context.Context, *SyncApplicationRequest) (*SyncApplicationResponse, error)
	GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	GenerateApplicationSealedSecret(context.Context, *GenerateApplicationSealedSecretRequest) (*GenerateApplicationSealedSecretResponse, error)
	ListUnregisteredApplications(context.Context, *ListUnregisteredApplicationsRequest) (*ListUnregisteredApplicationsResponse, error)
	// Deployment
	ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error)
	GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error)
	GetStageLog(context.Context, *GetStageLogRequest) (*GetStageLogResponse, error)
	CancelDeployment(context.Context, *CancelDeploymentRequest) (*CancelDeploymentResponse, error)
	SkipStage(context.Context, *SkipStageRequest) (*SkipStageResponse, error)
	ApproveStage(context.Context, *ApproveStageRequest) (*ApproveStageResponse, error)
	// ApplicationLiveState
	GetApplicationLiveState(context.Context, *GetApplicationLiveStateRequest) (*GetApplicationLiveStateResponse, error)
	// Account
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	UpdateProjectStaticAdmin(context.Context, *UpdateProjectStaticAdminRequest) (*UpdateProjectStaticAdminResponse, error)
	EnableStaticAdmin(context.Context, *EnableStaticAdminRequest) (*EnableStaticAdminResponse, error)
	DisableStaticAdmin(context.Context, *DisableStaticAdminRequest) (*DisableStaticAdminResponse, error)
	UpdateProjectSSOConfig(context.Context, *UpdateProjectSSOConfigRequest) (*UpdateProjectSSOConfigResponse, error)
	UpdateProjectRBACConfig(context.Context, *UpdateProjectRBACConfigRequest) (*UpdateProjectRBACConfigResponse, error)
	GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error)
	AddProjectRBACRole(context.Context, *AddProjectRBACRoleRequest) (*AddProjectRBACRoleResponse, error)
	UpdateProjectRBACRole(context.Context, *UpdateProjectRBACRoleRequest) (*UpdateProjectRBACRoleResponse, error)
	DeleteProjectRBACRole(context.Context, *DeleteProjectRBACRoleRequest) (*DeleteProjectRBACRoleResponse, error)
	AddProjectUserGroup(context.Context, *AddProjectUserGroupRequest) (*AddProjectUserGroupResponse, error)
	DeleteProjectUserGroup(context.Context, *DeleteProjectUserGroupRequest) (*DeleteProjectUserGroupResponse, error)
	// Command
	GetCommand(context.Context, *GetCommandRequest) (*GetCommandResponse, error)
	// API Key
	GenerateAPIKey(context.Context, *GenerateAPIKeyRequest) (*GenerateAPIKeyResponse, error)
	DisableAPIKey(context.Context, *DisableAPIKeyRequest) (*DisableAPIKeyResponse, error)
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error)
	// Insights
	GetInsightData(context.Context, *GetInsightDataRequest) (*GetInsightDataResponse, error)
	GetInsightApplicationCount(context.Context, *GetInsightApplicationCountRequest) (*GetInsightApplicationCountResponse, error)
	// DeploymentChain
	ListDeploymentChains(context.Context, *ListDeploymentChainsRequest) (*ListDeploymentChainsResponse, error)
	GetDeploymentChain(context.Context, *GetDeploymentChainRequest) (*GetDeploymentChainResponse, error)
	// Events
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	mustEmbedUnimplementedWebServiceServer()
}

// UnimplementedWebServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebServiceServer struct {
}

func (UnimplementedWebServiceServer) RegisterPiped(context.Context, *RegisterPipedRequest) (*RegisterPipedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPiped not implemented")
}
func (UnimplementedWebServiceServer) UpdatePiped(context.Context, *UpdatePipedRequest) (*UpdatePipedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePiped not implemented")
}
func (UnimplementedWebServiceServer) RecreatePipedKey(context.Context, *RecreatePipedKeyRequest) (*RecreatePipedKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecreatePipedKey not implemented")
}
func (UnimplementedWebServiceServer) DeleteOldPipedKeys(context.Context, *DeleteOldPipedKeysRequest) (*DeleteOldPipedKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOldPipedKeys not implemented")
}
func (UnimplementedWebServiceServer) EnablePiped(context.Context, *EnablePipedRequest) (*EnablePipedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePiped not implemented")
}
func (UnimplementedWebServiceServer) DisablePiped(context.Context, *DisablePipedRequest) (*DisablePipedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePiped not implemented")
}
func (UnimplementedWebServiceServer) ListPipeds(context.Context, *ListPipedsRequest) (*ListPipedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPipeds not implemented")
}
func (UnimplementedWebServiceServer) GetPiped(context.Context, *GetPipedRequest) (*GetPipedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPiped not implemented")
}
func (UnimplementedWebServiceServer) UpdatePipedDesiredVersion(context.Context, *UpdatePipedDesiredVersionRequest) (*UpdatePipedDesiredVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePipedDesiredVersion not implemented")
}
func (UnimplementedWebServiceServer) RestartPiped(context.Context, *RestartPipedRequest) (*RestartPipedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartPiped not implemented")
}
func (UnimplementedWebServiceServer) ListReleasedVersions(context.Context, *ListReleasedVersionsRequest) (*ListReleasedVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReleasedVersions not implemented")
}
func (UnimplementedWebServiceServer) AddApplication(context.Context, *AddApplicationRequest) (*AddApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApplication not implemented")
}
func (UnimplementedWebServiceServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedWebServiceServer) EnableApplication(context.Context, *EnableApplicationRequest) (*EnableApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableApplication not implemented")
}
func (UnimplementedWebServiceServer) DisableApplication(context.Context, *DisableApplicationRequest) (*DisableApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableApplication not implemented")
}
func (UnimplementedWebServiceServer) DeleteApplication(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedWebServiceServer) ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (UnimplementedWebServiceServer) SyncApplication(context.Context, *SyncApplicationRequest) (*SyncApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncApplication not implemented")
}
func (UnimplementedWebServiceServer) GetApplication(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedWebServiceServer) GenerateApplicationSealedSecret(context.Context, *GenerateApplicationSealedSecretRequest) (*GenerateApplicationSealedSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateApplicationSealedSecret not implemented")
}
func (UnimplementedWebServiceServer) ListUnregisteredApplications(context.Context, *ListUnregisteredApplicationsRequest) (*ListUnregisteredApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnregisteredApplications not implemented")
}
func (UnimplementedWebServiceServer) ListDeployments(context.Context, *ListDeploymentsRequest) (*ListDeploymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeployments not implemented")
}
func (UnimplementedWebServiceServer) GetDeployment(context.Context, *GetDeploymentRequest) (*GetDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployment not implemented")
}
func (UnimplementedWebServiceServer) GetStageLog(context.Context, *GetStageLogRequest) (*GetStageLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStageLog not implemented")
}
func (UnimplementedWebServiceServer) CancelDeployment(context.Context, *CancelDeploymentRequest) (*CancelDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelDeployment not implemented")
}
func (UnimplementedWebServiceServer) SkipStage(context.Context, *SkipStageRequest) (*SkipStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SkipStage not implemented")
}
func (UnimplementedWebServiceServer) ApproveStage(context.Context, *ApproveStageRequest) (*ApproveStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveStage not implemented")
}
func (UnimplementedWebServiceServer) GetApplicationLiveState(context.Context, *GetApplicationLiveStateRequest) (*GetApplicationLiveStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationLiveState not implemented")
}
func (UnimplementedWebServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedWebServiceServer) UpdateProjectStaticAdmin(context.Context, *UpdateProjectStaticAdminRequest) (*UpdateProjectStaticAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectStaticAdmin not implemented")
}
func (UnimplementedWebServiceServer) EnableStaticAdmin(context.Context, *EnableStaticAdminRequest) (*EnableStaticAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableStaticAdmin not implemented")
}
func (UnimplementedWebServiceServer) DisableStaticAdmin(context.Context, *DisableStaticAdminRequest) (*DisableStaticAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableStaticAdmin not implemented")
}
func (UnimplementedWebServiceServer) UpdateProjectSSOConfig(context.Context, *UpdateProjectSSOConfigRequest) (*UpdateProjectSSOConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectSSOConfig not implemented")
}
func (UnimplementedWebServiceServer) UpdateProjectRBACConfig(context.Context, *UpdateProjectRBACConfigRequest) (*UpdateProjectRBACConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectRBACConfig not implemented")
}
func (UnimplementedWebServiceServer) GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedWebServiceServer) AddProjectRBACRole(context.Context, *AddProjectRBACRoleRequest) (*AddProjectRBACRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectRBACRole not implemented")
}
func (UnimplementedWebServiceServer) UpdateProjectRBACRole(context.Context, *UpdateProjectRBACRoleRequest) (*UpdateProjectRBACRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectRBACRole not implemented")
}
func (UnimplementedWebServiceServer) DeleteProjectRBACRole(context.Context, *DeleteProjectRBACRoleRequest) (*DeleteProjectRBACRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectRBACRole not implemented")
}
func (UnimplementedWebServiceServer) AddProjectUserGroup(context.Context, *AddProjectUserGroupRequest) (*AddProjectUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectUserGroup not implemented")
}
func (UnimplementedWebServiceServer) DeleteProjectUserGroup(context.Context, *DeleteProjectUserGroupRequest) (*DeleteProjectUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectUserGroup not implemented")
}
func (UnimplementedWebServiceServer) GetCommand(context.Context, *GetCommandRequest) (*GetCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommand not implemented")
}
func (UnimplementedWebServiceServer) GenerateAPIKey(context.Context, *GenerateAPIKeyRequest) (*GenerateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAPIKey not implemented")
}
func (UnimplementedWebServiceServer) DisableAPIKey(context.Context, *DisableAPIKeyRequest) (*DisableAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAPIKey not implemented")
}
func (UnimplementedWebServiceServer) ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedWebServiceServer) GetInsightData(context.Context, *GetInsightDataRequest) (*GetInsightDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsightData not implemented")
}
func (UnimplementedWebServiceServer) GetInsightApplicationCount(context.Context, *GetInsightApplicationCountRequest) (*GetInsightApplicationCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsightApplicationCount not implemented")
}
func (UnimplementedWebServiceServer) ListDeploymentChains(context.Context, *ListDeploymentChainsRequest) (*ListDeploymentChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeploymentChains not implemented")
}
func (UnimplementedWebServiceServer) GetDeploymentChain(context.Context, *GetDeploymentChainRequest) (*GetDeploymentChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentChain not implemented")
}
func (UnimplementedWebServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedWebServiceServer) mustEmbedUnimplementedWebServiceServer() {}

// UnsafeWebServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServiceServer will
// result in compilation errors.
type UnsafeWebServiceServer interface {
	mustEmbedUnimplementedWebServiceServer()
}

func RegisterWebServiceServer(s grpc.ServiceRegistrar, srv WebServiceServer) {
	s.RegisterService(&WebService_ServiceDesc, srv)
}

func _WebService_RegisterPiped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPipedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).RegisterPiped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/RegisterPiped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).RegisterPiped(ctx, req.(*RegisterPipedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdatePiped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdatePiped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/UpdatePiped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdatePiped(ctx, req.(*UpdatePipedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_RecreatePipedKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecreatePipedKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).RecreatePipedKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/RecreatePipedKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).RecreatePipedKey(ctx, req.(*RecreatePipedKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DeleteOldPipedKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOldPipedKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DeleteOldPipedKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/DeleteOldPipedKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DeleteOldPipedKeys(ctx, req.(*DeleteOldPipedKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_EnablePiped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePipedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).EnablePiped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/EnablePiped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).EnablePiped(ctx, req.(*EnablePipedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DisablePiped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePipedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DisablePiped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/DisablePiped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DisablePiped(ctx, req.(*DisablePipedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListPipeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPipedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListPipeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ListPipeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListPipeds(ctx, req.(*ListPipedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetPiped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPipedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetPiped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetPiped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetPiped(ctx, req.(*GetPipedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdatePipedDesiredVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePipedDesiredVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdatePipedDesiredVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/UpdatePipedDesiredVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdatePipedDesiredVersion(ctx, req.(*UpdatePipedDesiredVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_RestartPiped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartPipedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).RestartPiped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/RestartPiped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).RestartPiped(ctx, req.(*RestartPipedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListReleasedVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleasedVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListReleasedVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ListReleasedVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListReleasedVersions(ctx, req.(*ListReleasedVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_AddApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).AddApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/AddApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).AddApplication(ctx, req.(*AddApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_EnableApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).EnableApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/EnableApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).EnableApplication(ctx, req.(*EnableApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DisableApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DisableApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/DisableApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DisableApplication(ctx, req.(*DisableApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DeleteApplication(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListApplications(ctx, req.(*ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_SyncApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).SyncApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/SyncApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).SyncApplication(ctx, req.(*SyncApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetApplication(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GenerateApplicationSealedSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateApplicationSealedSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GenerateApplicationSealedSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GenerateApplicationSealedSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GenerateApplicationSealedSecret(ctx, req.(*GenerateApplicationSealedSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListUnregisteredApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnregisteredApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListUnregisteredApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ListUnregisteredApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListUnregisteredApplications(ctx, req.(*ListUnregisteredApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListDeployments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListDeployments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ListDeployments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListDeployments(ctx, req.(*ListDeploymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetDeployment(ctx, req.(*GetDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetStageLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStageLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetStageLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetStageLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetStageLog(ctx, req.(*GetStageLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_CancelDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).CancelDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/CancelDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).CancelDeployment(ctx, req.(*CancelDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_SkipStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkipStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).SkipStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/SkipStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).SkipStage(ctx, req.(*SkipStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ApproveStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ApproveStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ApproveStage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ApproveStage(ctx, req.(*ApproveStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetApplicationLiveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationLiveStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetApplicationLiveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetApplicationLiveState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetApplicationLiveState(ctx, req.(*GetApplicationLiveStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateProjectStaticAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectStaticAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateProjectStaticAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/UpdateProjectStaticAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateProjectStaticAdmin(ctx, req.(*UpdateProjectStaticAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_EnableStaticAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableStaticAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).EnableStaticAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/EnableStaticAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).EnableStaticAdmin(ctx, req.(*EnableStaticAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DisableStaticAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableStaticAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DisableStaticAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/DisableStaticAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DisableStaticAdmin(ctx, req.(*DisableStaticAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateProjectSSOConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectSSOConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateProjectSSOConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/UpdateProjectSSOConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateProjectSSOConfig(ctx, req.(*UpdateProjectSSOConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateProjectRBACConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRBACConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateProjectRBACConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/UpdateProjectRBACConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateProjectRBACConfig(ctx, req.(*UpdateProjectRBACConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_AddProjectRBACRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectRBACRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).AddProjectRBACRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/AddProjectRBACRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).AddProjectRBACRole(ctx, req.(*AddProjectRBACRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_UpdateProjectRBACRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRBACRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).UpdateProjectRBACRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/UpdateProjectRBACRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).UpdateProjectRBACRole(ctx, req.(*UpdateProjectRBACRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DeleteProjectRBACRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRBACRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DeleteProjectRBACRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/DeleteProjectRBACRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DeleteProjectRBACRole(ctx, req.(*DeleteProjectRBACRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_AddProjectUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).AddProjectUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/AddProjectUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).AddProjectUserGroup(ctx, req.(*AddProjectUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DeleteProjectUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DeleteProjectUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/DeleteProjectUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DeleteProjectUserGroup(ctx, req.(*DeleteProjectUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetCommand(ctx, req.(*GetCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GenerateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GenerateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GenerateAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GenerateAPIKey(ctx, req.(*GenerateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_DisableAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).DisableAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/DisableAPIKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).DisableAPIKey(ctx, req.(*DisableAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ListAPIKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetInsightData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInsightDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetInsightData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetInsightData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetInsightData(ctx, req.(*GetInsightDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetInsightApplicationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInsightApplicationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetInsightApplicationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetInsightApplicationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetInsightApplicationCount(ctx, req.(*GetInsightApplicationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListDeploymentChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListDeploymentChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ListDeploymentChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListDeploymentChains(ctx, req.(*ListDeploymentChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_GetDeploymentChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).GetDeploymentChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/GetDeploymentChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).GetDeploymentChain(ctx, req.(*GetDeploymentChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.service.webservice.WebService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebService_ServiceDesc is the grpc.ServiceDesc for WebService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.service.webservice.WebService",
	HandlerType: (*WebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPiped",
			Handler:    _WebService_RegisterPiped_Handler,
		},
		{
			MethodName: "UpdatePiped",
			Handler:    _WebService_UpdatePiped_Handler,
		},
		{
			MethodName: "RecreatePipedKey",
			Handler:    _WebService_RecreatePipedKey_Handler,
		},
		{
			MethodName: "DeleteOldPipedKeys",
			Handler:    _WebService_DeleteOldPipedKeys_Handler,
		},
		{
			MethodName: "EnablePiped",
			Handler:    _WebService_EnablePiped_Handler,
		},
		{
			MethodName: "DisablePiped",
			Handler:    _WebService_DisablePiped_Handler,
		},
		{
			MethodName: "ListPipeds",
			Handler:    _WebService_ListPipeds_Handler,
		},
		{
			MethodName: "GetPiped",
			Handler:    _WebService_GetPiped_Handler,
		},
		{
			MethodName: "UpdatePipedDesiredVersion",
			Handler:    _WebService_UpdatePipedDesiredVersion_Handler,
		},
		{
			MethodName: "RestartPiped",
			Handler:    _WebService_RestartPiped_Handler,
		},
		{
			MethodName: "ListReleasedVersions",
			Handler:    _WebService_ListReleasedVersions_Handler,
		},
		{
			MethodName: "AddApplication",
			Handler:    _WebService_AddApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _WebService_UpdateApplication_Handler,
		},
		{
			MethodName: "EnableApplication",
			Handler:    _WebService_EnableApplication_Handler,
		},
		{
			MethodName: "DisableApplication",
			Handler:    _WebService_DisableApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _WebService_DeleteApplication_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _WebService_ListApplications_Handler,
		},
		{
			MethodName: "SyncApplication",
			Handler:    _WebService_SyncApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _WebService_GetApplication_Handler,
		},
		{
			MethodName: "GenerateApplicationSealedSecret",
			Handler:    _WebService_GenerateApplicationSealedSecret_Handler,
		},
		{
			MethodName: "ListUnregisteredApplications",
			Handler:    _WebService_ListUnregisteredApplications_Handler,
		},
		{
			MethodName: "ListDeployments",
			Handler:    _WebService_ListDeployments_Handler,
		},
		{
			MethodName: "GetDeployment",
			Handler:    _WebService_GetDeployment_Handler,
		},
		{
			MethodName: "GetStageLog",
			Handler:    _WebService_GetStageLog_Handler,
		},
		{
			MethodName: "CancelDeployment",
			Handler:    _WebService_CancelDeployment_Handler,
		},
		{
			MethodName: "SkipStage",
			Handler:    _WebService_SkipStage_Handler,
		},
		{
			MethodName: "ApproveStage",
			Handler:    _WebService_ApproveStage_Handler,
		},
		{
			MethodName: "GetApplicationLiveState",
			Handler:    _WebService_GetApplicationLiveState_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _WebService_GetProject_Handler,
		},
		{
			MethodName: "UpdateProjectStaticAdmin",
			Handler:    _WebService_UpdateProjectStaticAdmin_Handler,
		},
		{
			MethodName: "EnableStaticAdmin",
			Handler:    _WebService_EnableStaticAdmin_Handler,
		},
		{
			MethodName: "DisableStaticAdmin",
			Handler:    _WebService_DisableStaticAdmin_Handler,
		},
		{
			MethodName: "UpdateProjectSSOConfig",
			Handler:    _WebService_UpdateProjectSSOConfig_Handler,
		},
		{
			MethodName: "UpdateProjectRBACConfig",
			Handler:    _WebService_UpdateProjectRBACConfig_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _WebService_GetMe_Handler,
		},
		{
			MethodName: "AddProjectRBACRole",
			Handler:    _WebService_AddProjectRBACRole_Handler,
		},
		{
			MethodName: "UpdateProjectRBACRole",
			Handler:    _WebService_UpdateProjectRBACRole_Handler,
		},
		{
			MethodName: "DeleteProjectRBACRole",
			Handler:    _WebService_DeleteProjectRBACRole_Handler,
		},
		{
			MethodName: "AddProjectUserGroup",
			Handler:    _WebService_AddProjectUserGroup_Handler,
		},
		{
			MethodName: "DeleteProjectUserGroup",
			Handler:    _WebService_DeleteProjectUserGroup_Handler,
		},
		{
			MethodName: "GetCommand",
			Handler:    _WebService_GetCommand_Handler,
		},
		{
			MethodName: "GenerateAPIKey",
			Handler:    _WebService_GenerateAPIKey_Handler,
		},
		{
			MethodName: "DisableAPIKey",
			Handler:    _WebService_DisableAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _WebService_ListAPIKeys_Handler,
		},
		{
			MethodName: "GetInsightData",
			Handler:    _WebService_GetInsightData_Handler,
		},
		{
			MethodName: "GetInsightApplicationCount",
			Handler:    _WebService_GetInsightApplicationCount_Handler,
		},
		{
			MethodName: "ListDeploymentChains",
			Handler:    _WebService_ListDeploymentChains_Handler,
		},
		{
			MethodName: "GetDeploymentChain",
			Handler:    _WebService_GetDeploymentChain_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _WebService_ListEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/app/server/service/webservice/service.proto",
}
