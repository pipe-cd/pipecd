// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/app/server/service/apiservice/service.proto

package apiservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	model "github.com/pipe-cd/pipecd/pkg/model"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = model.ApplicationKind(0)
)

// Validate checks the field values on AddApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddApplicationRequestMultiError, or nil if none found.
func (m *AddApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := AddApplicationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := AddApplicationRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGitPath() == nil {
		err := AddApplicationRequestValidationError{
			field:  "GitPath",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetGitPath()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddApplicationRequestValidationError{
					field:  "GitPath",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddApplicationRequestValidationError{
					field:  "GitPath",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGitPath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddApplicationRequestValidationError{
				field:  "GitPath",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := model.ApplicationKind_name[int32(m.GetKind())]; !ok {
		err := AddApplicationRequestValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlatformProvider()) < 1 {
		err := AddApplicationRequestValidationError{
			field:  "PlatformProvider",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return AddApplicationRequestMultiError(errors)
	}

	return nil
}

// AddApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by AddApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type AddApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddApplicationRequestMultiError) AllErrors() []error { return m }

// AddApplicationRequestValidationError is the validation error returned by
// AddApplicationRequest.Validate if the designated constraints aren't met.
type AddApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddApplicationRequestValidationError) ErrorName() string {
	return "AddApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddApplicationRequestValidationError{}

// Validate checks the field values on AddApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddApplicationResponseMultiError, or nil if none found.
func (m *AddApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := AddApplicationResponseValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddApplicationResponseMultiError(errors)
	}

	return nil
}

// AddApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by AddApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type AddApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddApplicationResponseMultiError) AllErrors() []error { return m }

// AddApplicationResponseValidationError is the validation error returned by
// AddApplicationResponse.Validate if the designated constraints aren't met.
type AddApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddApplicationResponseValidationError) ErrorName() string {
	return "AddApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddApplicationResponseValidationError{}

// Validate checks the field values on SyncApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncApplicationRequestMultiError, or nil if none found.
func (m *SyncApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := SyncApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SyncApplicationRequestMultiError(errors)
	}

	return nil
}

// SyncApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by SyncApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type SyncApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncApplicationRequestMultiError) AllErrors() []error { return m }

// SyncApplicationRequestValidationError is the validation error returned by
// SyncApplicationRequest.Validate if the designated constraints aren't met.
type SyncApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncApplicationRequestValidationError) ErrorName() string {
	return "SyncApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SyncApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncApplicationRequestValidationError{}

// Validate checks the field values on SyncApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SyncApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SyncApplicationResponseMultiError, or nil if none found.
func (m *SyncApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandId

	if len(errors) > 0 {
		return SyncApplicationResponseMultiError(errors)
	}

	return nil
}

// SyncApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by SyncApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type SyncApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncApplicationResponseMultiError) AllErrors() []error { return m }

// SyncApplicationResponseValidationError is the validation error returned by
// SyncApplicationResponse.Validate if the designated constraints aren't met.
type SyncApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncApplicationResponseValidationError) ErrorName() string {
	return "SyncApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SyncApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncApplicationResponseValidationError{}

// Validate checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationRequestMultiError, or nil if none found.
func (m *GetApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := GetApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicationRequestMultiError(errors)
	}

	return nil
}

// GetApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by GetApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationRequestMultiError) AllErrors() []error { return m }

// GetApplicationRequestValidationError is the validation error returned by
// GetApplicationRequest.Validate if the designated constraints aren't met.
type GetApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationRequestValidationError) ErrorName() string {
	return "GetApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationRequestValidationError{}

// Validate checks the field values on GetApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetApplicationResponseMultiError, or nil if none found.
func (m *GetApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApplication()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationResponseValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationResponseValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationResponseMultiError(errors)
	}

	return nil
}

// GetApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by GetApplicationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationResponseMultiError) AllErrors() []error { return m }

// GetApplicationResponseValidationError is the validation error returned by
// GetApplicationResponse.Validate if the designated constraints aren't met.
type GetApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationResponseValidationError) ErrorName() string {
	return "GetApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationResponseValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsRequestMultiError, or nil if none found.
func (m *ListApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Kind

	// no validation rules for Disabled

	// no validation rules for Labels

	// no validation rules for Limit

	// no validation rules for PipedId

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListApplicationsRequestMultiError(errors)
	}

	return nil
}

// ListApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRequestMultiError) AllErrors() []error { return m }

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsResponseMultiError, or nil if none found.
func (m *ListApplicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListApplicationsResponseMultiError(errors)
	}

	return nil
}

// ListApplicationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsResponseMultiError) AllErrors() []error { return m }

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on DisableApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableApplicationRequestMultiError, or nil if none found.
func (m *DisableApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := DisableApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableApplicationRequestMultiError(errors)
	}

	return nil
}

// DisableApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DisableApplicationRequest.ValidateAll() if the
// designated constraints aren't met.
type DisableApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableApplicationRequestMultiError) AllErrors() []error { return m }

// DisableApplicationRequestValidationError is the validation error returned by
// DisableApplicationRequest.Validate if the designated constraints aren't met.
type DisableApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableApplicationRequestValidationError) ErrorName() string {
	return "DisableApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisableApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableApplicationRequestValidationError{}

// Validate checks the field values on DisableApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisableApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisableApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisableApplicationResponseMultiError, or nil if none found.
func (m *DisableApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisableApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := DisableApplicationResponseValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisableApplicationResponseMultiError(errors)
	}

	return nil
}

// DisableApplicationResponseMultiError is an error wrapping multiple
// validation errors returned by DisableApplicationResponse.ValidateAll() if
// the designated constraints aren't met.
type DisableApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisableApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisableApplicationResponseMultiError) AllErrors() []error { return m }

// DisableApplicationResponseValidationError is the validation error returned
// by DisableApplicationResponse.Validate if the designated constraints aren't met.
type DisableApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisableApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisableApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisableApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisableApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisableApplicationResponseValidationError) ErrorName() string {
	return "DisableApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisableApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisableApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisableApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisableApplicationResponseValidationError{}

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationRequestMultiError, or nil if none found.
func (m *DeleteApplicationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := DeleteApplicationRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteApplicationRequestMultiError(errors)
	}

	return nil
}

// DeleteApplicationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteApplicationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationRequestMultiError) AllErrors() []error { return m }

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

// Validate checks the field values on DeleteApplicationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteApplicationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteApplicationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteApplicationResponseMultiError, or nil if none found.
func (m *DeleteApplicationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteApplicationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := DeleteApplicationResponseValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteApplicationResponseMultiError(errors)
	}

	return nil
}

// DeleteApplicationResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteApplicationResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteApplicationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteApplicationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteApplicationResponseMultiError) AllErrors() []error { return m }

// DeleteApplicationResponseValidationError is the validation error returned by
// DeleteApplicationResponse.Validate if the designated constraints aren't met.
type DeleteApplicationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationResponseValidationError) ErrorName() string {
	return "DeleteApplicationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationResponseValidationError{}

// Validate checks the field values on RenameApplicationConfigFileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenameApplicationConfigFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameApplicationConfigFileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RenameApplicationConfigFileRequestMultiError, or nil if none found.
func (m *RenameApplicationConfigFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameApplicationConfigFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetApplicationIds()); l < 1 || l > 50 {
		err := RenameApplicationConfigFileRequestValidationError{
			field:  "ApplicationIds",
			reason: "value must contain between 1 and 50 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNewFilename()) < 1 {
		err := RenameApplicationConfigFileRequestValidationError{
			field:  "NewFilename",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RenameApplicationConfigFileRequestMultiError(errors)
	}

	return nil
}

// RenameApplicationConfigFileRequestMultiError is an error wrapping multiple
// validation errors returned by
// RenameApplicationConfigFileRequest.ValidateAll() if the designated
// constraints aren't met.
type RenameApplicationConfigFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameApplicationConfigFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameApplicationConfigFileRequestMultiError) AllErrors() []error { return m }

// RenameApplicationConfigFileRequestValidationError is the validation error
// returned by RenameApplicationConfigFileRequest.Validate if the designated
// constraints aren't met.
type RenameApplicationConfigFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameApplicationConfigFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameApplicationConfigFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameApplicationConfigFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameApplicationConfigFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameApplicationConfigFileRequestValidationError) ErrorName() string {
	return "RenameApplicationConfigFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameApplicationConfigFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameApplicationConfigFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameApplicationConfigFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameApplicationConfigFileRequestValidationError{}

// Validate checks the field values on RenameApplicationConfigFileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RenameApplicationConfigFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameApplicationConfigFileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RenameApplicationConfigFileResponseMultiError, or nil if none found.
func (m *RenameApplicationConfigFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameApplicationConfigFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RenameApplicationConfigFileResponseMultiError(errors)
	}

	return nil
}

// RenameApplicationConfigFileResponseMultiError is an error wrapping multiple
// validation errors returned by
// RenameApplicationConfigFileResponse.ValidateAll() if the designated
// constraints aren't met.
type RenameApplicationConfigFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameApplicationConfigFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameApplicationConfigFileResponseMultiError) AllErrors() []error { return m }

// RenameApplicationConfigFileResponseValidationError is the validation error
// returned by RenameApplicationConfigFileResponse.Validate if the designated
// constraints aren't met.
type RenameApplicationConfigFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameApplicationConfigFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameApplicationConfigFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameApplicationConfigFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameApplicationConfigFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameApplicationConfigFileResponseValidationError) ErrorName() string {
	return "RenameApplicationConfigFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameApplicationConfigFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameApplicationConfigFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameApplicationConfigFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameApplicationConfigFileResponseValidationError{}

// Validate checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentRequestMultiError, or nil if none found.
func (m *GetDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return GetDeploymentRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentRequestMultiError) AllErrors() []error { return m }

// GetDeploymentRequestValidationError is the validation error returned by
// GetDeploymentRequest.Validate if the designated constraints aren't met.
type GetDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentRequestValidationError) ErrorName() string {
	return "GetDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentRequestValidationError{}

// Validate checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentResponseMultiError, or nil if none found.
func (m *GetDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeploymentResponseValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeploymentResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentResponseMultiError) AllErrors() []error { return m }

// GetDeploymentResponseValidationError is the validation error returned by
// GetDeploymentResponse.Validate if the designated constraints aren't met.
type GetDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentResponseValidationError) ErrorName() string {
	return "GetDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentResponseValidationError{}

// Validate checks the field values on ListDeploymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentsRequestMultiError, or nil if none found.
func (m *ListDeploymentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ApplicationName

	// no validation rules for Labels

	// no validation rules for Limit

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListDeploymentsRequestMultiError(errors)
	}

	return nil
}

// ListDeploymentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDeploymentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsRequestMultiError) AllErrors() []error { return m }

// ListDeploymentsRequestValidationError is the validation error returned by
// ListDeploymentsRequest.Validate if the designated constraints aren't met.
type ListDeploymentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsRequestValidationError) ErrorName() string {
	return "ListDeploymentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsRequestValidationError{}

// Validate checks the field values on ListDeploymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDeploymentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDeploymentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDeploymentsResponseMultiError, or nil if none found.
func (m *ListDeploymentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDeploymentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDeploymentsResponseValidationError{
					field:  fmt.Sprintf("Deployments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListDeploymentsResponseMultiError(errors)
	}

	return nil
}

// ListDeploymentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDeploymentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDeploymentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDeploymentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDeploymentsResponseMultiError) AllErrors() []error { return m }

// ListDeploymentsResponseValidationError is the validation error returned by
// ListDeploymentsResponse.Validate if the designated constraints aren't met.
type ListDeploymentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsResponseValidationError) ErrorName() string {
	return "ListDeploymentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsResponseValidationError{}

// Validate checks the field values on GetCommandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommandRequestMultiError, or nil if none found.
func (m *GetCommandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCommandId()) < 1 {
		err := GetCommandRequestValidationError{
			field:  "CommandId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommandRequestMultiError(errors)
	}

	return nil
}

// GetCommandRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommandRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommandRequestMultiError) AllErrors() []error { return m }

// GetCommandRequestValidationError is the validation error returned by
// GetCommandRequest.Validate if the designated constraints aren't met.
type GetCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommandRequestValidationError) ErrorName() string {
	return "GetCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommandRequestValidationError{}

// Validate checks the field values on GetCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommandResponseMultiError, or nil if none found.
func (m *GetCommandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommandResponseValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommandResponseValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommandResponseValidationError{
				field:  "Command",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommandResponseMultiError(errors)
	}

	return nil
}

// GetCommandResponseMultiError is an error wrapping multiple validation errors
// returned by GetCommandResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCommandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommandResponseMultiError) AllErrors() []error { return m }

// GetCommandResponseValidationError is the validation error returned by
// GetCommandResponse.Validate if the designated constraints aren't met.
type GetCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommandResponseValidationError) ErrorName() string {
	return "GetCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommandResponseValidationError{}

// Validate checks the field values on EnablePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnablePipedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnablePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnablePipedRequestMultiError, or nil if none found.
func (m *EnablePipedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnablePipedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := EnablePipedRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EnablePipedRequestMultiError(errors)
	}

	return nil
}

// EnablePipedRequestMultiError is an error wrapping multiple validation errors
// returned by EnablePipedRequest.ValidateAll() if the designated constraints
// aren't met.
type EnablePipedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnablePipedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnablePipedRequestMultiError) AllErrors() []error { return m }

// EnablePipedRequestValidationError is the validation error returned by
// EnablePipedRequest.Validate if the designated constraints aren't met.
type EnablePipedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnablePipedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnablePipedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnablePipedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnablePipedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnablePipedRequestValidationError) ErrorName() string {
	return "EnablePipedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnablePipedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnablePipedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnablePipedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnablePipedRequestValidationError{}

// Validate checks the field values on EnablePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnablePipedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnablePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnablePipedResponseMultiError, or nil if none found.
func (m *EnablePipedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EnablePipedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EnablePipedResponseMultiError(errors)
	}

	return nil
}

// EnablePipedResponseMultiError is an error wrapping multiple validation
// errors returned by EnablePipedResponse.ValidateAll() if the designated
// constraints aren't met.
type EnablePipedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnablePipedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnablePipedResponseMultiError) AllErrors() []error { return m }

// EnablePipedResponseValidationError is the validation error returned by
// EnablePipedResponse.Validate if the designated constraints aren't met.
type EnablePipedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnablePipedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnablePipedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnablePipedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnablePipedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnablePipedResponseValidationError) ErrorName() string {
	return "EnablePipedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EnablePipedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnablePipedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnablePipedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnablePipedResponseValidationError{}

// Validate checks the field values on DisablePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisablePipedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisablePipedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisablePipedRequestMultiError, or nil if none found.
func (m *DisablePipedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DisablePipedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := DisablePipedRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DisablePipedRequestMultiError(errors)
	}

	return nil
}

// DisablePipedRequestMultiError is an error wrapping multiple validation
// errors returned by DisablePipedRequest.ValidateAll() if the designated
// constraints aren't met.
type DisablePipedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisablePipedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisablePipedRequestMultiError) AllErrors() []error { return m }

// DisablePipedRequestValidationError is the validation error returned by
// DisablePipedRequest.Validate if the designated constraints aren't met.
type DisablePipedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisablePipedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisablePipedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisablePipedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisablePipedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisablePipedRequestValidationError) ErrorName() string {
	return "DisablePipedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DisablePipedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisablePipedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisablePipedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisablePipedRequestValidationError{}

// Validate checks the field values on DisablePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DisablePipedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DisablePipedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DisablePipedResponseMultiError, or nil if none found.
func (m *DisablePipedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DisablePipedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DisablePipedResponseMultiError(errors)
	}

	return nil
}

// DisablePipedResponseMultiError is an error wrapping multiple validation
// errors returned by DisablePipedResponse.ValidateAll() if the designated
// constraints aren't met.
type DisablePipedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DisablePipedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DisablePipedResponseMultiError) AllErrors() []error { return m }

// DisablePipedResponseValidationError is the validation error returned by
// DisablePipedResponse.Validate if the designated constraints aren't met.
type DisablePipedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DisablePipedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DisablePipedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DisablePipedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DisablePipedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DisablePipedResponseValidationError) ErrorName() string {
	return "DisablePipedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DisablePipedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDisablePipedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DisablePipedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DisablePipedResponseValidationError{}

// Validate checks the field values on RegisterEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEventRequestMultiError, or nil if none found.
func (m *RegisterEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := RegisterEventRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetData()) < 1 {
		err := RegisterEventRequestValidationError{
			field:  "Data",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetLabels()))
		i := 0
		for key := range m.GetLabels() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetLabels()[key]
			_ = val

			if utf8.RuneCountInString(key) < 1 {
				err := RegisterEventRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if utf8.RuneCountInString(val) < 1 {
				err := RegisterEventRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", key),
					reason: "value length must be at least 1 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return RegisterEventRequestMultiError(errors)
	}

	return nil
}

// RegisterEventRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterEventRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEventRequestMultiError) AllErrors() []error { return m }

// RegisterEventRequestValidationError is the validation error returned by
// RegisterEventRequest.Validate if the designated constraints aren't met.
type RegisterEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEventRequestValidationError) ErrorName() string {
	return "RegisterEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEventRequestValidationError{}

// Validate checks the field values on RegisterEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterEventResponseMultiError, or nil if none found.
func (m *RegisterEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEventId()) < 1 {
		err := RegisterEventResponseValidationError{
			field:  "EventId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterEventResponseMultiError(errors)
	}

	return nil
}

// RegisterEventResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterEventResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterEventResponseMultiError) AllErrors() []error { return m }

// RegisterEventResponseValidationError is the validation error returned by
// RegisterEventResponse.Validate if the designated constraints aren't met.
type RegisterEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterEventResponseValidationError) ErrorName() string {
	return "RegisterEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterEventResponseValidationError{}

// Validate checks the field values on RequestPlanPreviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestPlanPreviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestPlanPreviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestPlanPreviewRequestMultiError, or nil if none found.
func (m *RequestPlanPreviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestPlanPreviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRepoRemoteUrl()) < 1 {
		err := RequestPlanPreviewRequestValidationError{
			field:  "RepoRemoteUrl",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHeadBranch()) < 1 {
		err := RequestPlanPreviewRequestValidationError{
			field:  "HeadBranch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetHeadCommit()) < 1 {
		err := RequestPlanPreviewRequestValidationError{
			field:  "HeadCommit",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBaseBranch()) < 1 {
		err := RequestPlanPreviewRequestValidationError{
			field:  "BaseBranch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTimeout() < 0 {
		err := RequestPlanPreviewRequestValidationError{
			field:  "Timeout",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RequestPlanPreviewRequestMultiError(errors)
	}

	return nil
}

// RequestPlanPreviewRequestMultiError is an error wrapping multiple validation
// errors returned by RequestPlanPreviewRequest.ValidateAll() if the
// designated constraints aren't met.
type RequestPlanPreviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestPlanPreviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestPlanPreviewRequestMultiError) AllErrors() []error { return m }

// RequestPlanPreviewRequestValidationError is the validation error returned by
// RequestPlanPreviewRequest.Validate if the designated constraints aren't met.
type RequestPlanPreviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPlanPreviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPlanPreviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPlanPreviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPlanPreviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPlanPreviewRequestValidationError) ErrorName() string {
	return "RequestPlanPreviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RequestPlanPreviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPlanPreviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPlanPreviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPlanPreviewRequestValidationError{}

// Validate checks the field values on RequestPlanPreviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RequestPlanPreviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestPlanPreviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestPlanPreviewResponseMultiError, or nil if none found.
func (m *RequestPlanPreviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestPlanPreviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RequestPlanPreviewResponseMultiError(errors)
	}

	return nil
}

// RequestPlanPreviewResponseMultiError is an error wrapping multiple
// validation errors returned by RequestPlanPreviewResponse.ValidateAll() if
// the designated constraints aren't met.
type RequestPlanPreviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestPlanPreviewResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestPlanPreviewResponseMultiError) AllErrors() []error { return m }

// RequestPlanPreviewResponseValidationError is the validation error returned
// by RequestPlanPreviewResponse.Validate if the designated constraints aren't met.
type RequestPlanPreviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestPlanPreviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestPlanPreviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestPlanPreviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestPlanPreviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestPlanPreviewResponseValidationError) ErrorName() string {
	return "RequestPlanPreviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RequestPlanPreviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestPlanPreviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestPlanPreviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestPlanPreviewResponseValidationError{}

// Validate checks the field values on GetPlanPreviewResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlanPreviewResultsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlanPreviewResultsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlanPreviewResultsRequestMultiError, or nil if none found.
func (m *GetPlanPreviewResultsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlanPreviewResultsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommandHandleTimeout

	if len(errors) > 0 {
		return GetPlanPreviewResultsRequestMultiError(errors)
	}

	return nil
}

// GetPlanPreviewResultsRequestMultiError is an error wrapping multiple
// validation errors returned by GetPlanPreviewResultsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPlanPreviewResultsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlanPreviewResultsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlanPreviewResultsRequestMultiError) AllErrors() []error { return m }

// GetPlanPreviewResultsRequestValidationError is the validation error returned
// by GetPlanPreviewResultsRequest.Validate if the designated constraints
// aren't met.
type GetPlanPreviewResultsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlanPreviewResultsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlanPreviewResultsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlanPreviewResultsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlanPreviewResultsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlanPreviewResultsRequestValidationError) ErrorName() string {
	return "GetPlanPreviewResultsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlanPreviewResultsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlanPreviewResultsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlanPreviewResultsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlanPreviewResultsRequestValidationError{}

// Validate checks the field values on GetPlanPreviewResultsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlanPreviewResultsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlanPreviewResultsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetPlanPreviewResultsResponseMultiError, or nil if none found.
func (m *GetPlanPreviewResultsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlanPreviewResultsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlanPreviewResultsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlanPreviewResultsResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlanPreviewResultsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPlanPreviewResultsResponseMultiError(errors)
	}

	return nil
}

// GetPlanPreviewResultsResponseMultiError is an error wrapping multiple
// validation errors returned by GetPlanPreviewResultsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetPlanPreviewResultsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlanPreviewResultsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlanPreviewResultsResponseMultiError) AllErrors() []error { return m }

// GetPlanPreviewResultsResponseValidationError is the validation error
// returned by GetPlanPreviewResultsResponse.Validate if the designated
// constraints aren't met.
type GetPlanPreviewResultsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlanPreviewResultsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlanPreviewResultsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlanPreviewResultsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlanPreviewResultsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlanPreviewResultsResponseValidationError) ErrorName() string {
	return "GetPlanPreviewResultsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlanPreviewResultsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlanPreviewResultsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlanPreviewResultsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlanPreviewResultsResponseValidationError{}

// Validate checks the field values on EncryptRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EncryptRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EncryptRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EncryptRequestMultiError,
// or nil if none found.
func (m *EncryptRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EncryptRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPlaintext()) < 1 {
		err := EncryptRequestValidationError{
			field:  "Plaintext",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPipedId()) < 1 {
		err := EncryptRequestValidationError{
			field:  "PipedId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Base64Encoding

	if len(errors) > 0 {
		return EncryptRequestMultiError(errors)
	}

	return nil
}

// EncryptRequestMultiError is an error wrapping multiple validation errors
// returned by EncryptRequest.ValidateAll() if the designated constraints
// aren't met.
type EncryptRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EncryptRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EncryptRequestMultiError) AllErrors() []error { return m }

// EncryptRequestValidationError is the validation error returned by
// EncryptRequest.Validate if the designated constraints aren't met.
type EncryptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncryptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncryptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncryptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncryptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncryptRequestValidationError) ErrorName() string { return "EncryptRequestValidationError" }

// Error satisfies the builtin error interface
func (e EncryptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncryptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncryptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncryptRequestValidationError{}

// Validate checks the field values on EncryptResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EncryptResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EncryptResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EncryptResponseMultiError, or nil if none found.
func (m *EncryptResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EncryptResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCiphertext()) < 1 {
		err := EncryptResponseValidationError{
			field:  "Ciphertext",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EncryptResponseMultiError(errors)
	}

	return nil
}

// EncryptResponseMultiError is an error wrapping multiple validation errors
// returned by EncryptResponse.ValidateAll() if the designated constraints
// aren't met.
type EncryptResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EncryptResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EncryptResponseMultiError) AllErrors() []error { return m }

// EncryptResponseValidationError is the validation error returned by
// EncryptResponse.Validate if the designated constraints aren't met.
type EncryptResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncryptResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncryptResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncryptResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncryptResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncryptResponseValidationError) ErrorName() string { return "EncryptResponseValidationError" }

// Error satisfies the builtin error interface
func (e EncryptResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncryptResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncryptResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncryptResponseValidationError{}

// Validate checks the field values on StageLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StageLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StageLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StageLogMultiError, or nil
// if none found.
func (m *StageLog) ValidateAll() error {
	return m.validate(true)
}

func (m *StageLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StageLogValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StageLogValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StageLogValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Completed

	if len(errors) > 0 {
		return StageLogMultiError(errors)
	}

	return nil
}

// StageLogMultiError is an error wrapping multiple validation errors returned
// by StageLog.ValidateAll() if the designated constraints aren't met.
type StageLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StageLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StageLogMultiError) AllErrors() []error { return m }

// StageLogValidationError is the validation error returned by
// StageLog.Validate if the designated constraints aren't met.
type StageLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StageLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StageLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StageLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StageLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StageLogValidationError) ErrorName() string { return "StageLogValidationError" }

// Error satisfies the builtin error interface
func (e StageLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStageLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StageLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StageLogValidationError{}

// Validate checks the field values on ListStageLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStageLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStageLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStageLogsRequestMultiError, or nil if none found.
func (m *ListStageLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStageLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ListStageLogsRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListStageLogsRequestMultiError(errors)
	}

	return nil
}

// ListStageLogsRequestMultiError is an error wrapping multiple validation
// errors returned by ListStageLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListStageLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStageLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStageLogsRequestMultiError) AllErrors() []error { return m }

// ListStageLogsRequestValidationError is the validation error returned by
// ListStageLogsRequest.Validate if the designated constraints aren't met.
type ListStageLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStageLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStageLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStageLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStageLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStageLogsRequestValidationError) ErrorName() string {
	return "ListStageLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStageLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStageLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStageLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStageLogsRequestValidationError{}

// Validate checks the field values on ListStageLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStageLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStageLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStageLogsResponseMultiError, or nil if none found.
func (m *ListStageLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStageLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetStageLogs()))
		i := 0
		for key := range m.GetStageLogs() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetStageLogs()[key]
			_ = val

			// no validation rules for StageLogs[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListStageLogsResponseValidationError{
							field:  fmt.Sprintf("StageLogs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListStageLogsResponseValidationError{
							field:  fmt.Sprintf("StageLogs[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListStageLogsResponseValidationError{
						field:  fmt.Sprintf("StageLogs[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListStageLogsResponseMultiError(errors)
	}

	return nil
}

// ListStageLogsResponseMultiError is an error wrapping multiple validation
// errors returned by ListStageLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListStageLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStageLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStageLogsResponseMultiError) AllErrors() []error { return m }

// ListStageLogsResponseValidationError is the validation error returned by
// ListStageLogsResponse.Validate if the designated constraints aren't met.
type ListStageLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStageLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStageLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStageLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStageLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStageLogsResponseValidationError) ErrorName() string {
	return "ListStageLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStageLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStageLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStageLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStageLogsResponseValidationError{}
