// Copyright 2023 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: pkg/app/server/service/pipedservice/service.proto

package pipedservice

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	model "github.com/pipe-cd/pipecd/pkg/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListOrder int32

const (
	ListOrder_NONE ListOrder = 0
	ListOrder_ASC  ListOrder = 1
	ListOrder_DESC ListOrder = 2
)

// Enum value maps for ListOrder.
var (
	ListOrder_name = map[int32]string{
		0: "NONE",
		1: "ASC",
		2: "DESC",
	}
	ListOrder_value = map[string]int32{
		"NONE": 0,
		"ASC":  1,
		"DESC": 2,
	}
)

func (x ListOrder) Enum() *ListOrder {
	p := new(ListOrder)
	*p = x
	return p
}

func (x ListOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_app_server_service_pipedservice_service_proto_enumTypes[0].Descriptor()
}

func (ListOrder) Type() protoreflect.EnumType {
	return &file_pkg_app_server_service_pipedservice_service_proto_enumTypes[0]
}

func (x ListOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListOrder.Descriptor instead.
func (ListOrder) EnumDescriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{0}
}

type ListEventsRequest_Status int32

const (
	ListEventsRequest_ALL         ListEventsRequest_Status = 0
	ListEventsRequest_NOT_HANDLED ListEventsRequest_Status = 1
	ListEventsRequest_SUCCESS     ListEventsRequest_Status = 2
	ListEventsRequest_FAILURE     ListEventsRequest_Status = 3
	ListEventsRequest_OUTDATED    ListEventsRequest_Status = 4
)

// Enum value maps for ListEventsRequest_Status.
var (
	ListEventsRequest_Status_name = map[int32]string{
		0: "ALL",
		1: "NOT_HANDLED",
		2: "SUCCESS",
		3: "FAILURE",
		4: "OUTDATED",
	}
	ListEventsRequest_Status_value = map[string]int32{
		"ALL":         0,
		"NOT_HANDLED": 1,
		"SUCCESS":     2,
		"FAILURE":     3,
		"OUTDATED":    4,
	}
)

func (x ListEventsRequest_Status) Enum() *ListEventsRequest_Status {
	p := new(ListEventsRequest_Status)
	*p = x
	return p
}

func (x ListEventsRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListEventsRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_app_server_service_pipedservice_service_proto_enumTypes[1].Descriptor()
}

func (ListEventsRequest_Status) Type() protoreflect.EnumType {
	return &file_pkg_app_server_service_pipedservice_service_proto_enumTypes[1]
}

func (x ListEventsRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListEventsRequest_Status.Descriptor instead.
func (ListEventsRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{46, 0}
}

type ReportStatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metrics byte sequence in OpenMetrics format.
	PipedStats []byte `protobuf:"bytes,1,opt,name=piped_stats,json=pipedStats,proto3" json:"piped_stats,omitempty"`
}

func (x *ReportStatRequest) Reset() {
	*x = ReportStatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatRequest) ProtoMessage() {}

func (x *ReportStatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatRequest.ProtoReflect.Descriptor instead.
func (*ReportStatRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{0}
}

func (x *ReportStatRequest) GetPipedStats() []byte {
	if x != nil {
		return x.PipedStats
	}
	return nil
}

type ReportStatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportInterval int64 `protobuf:"varint,1,opt,name=report_interval,json=reportInterval,proto3" json:"report_interval,omitempty"`
}

func (x *ReportStatResponse) Reset() {
	*x = ReportStatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStatResponse) ProtoMessage() {}

func (x *ReportStatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStatResponse.ProtoReflect.Descriptor instead.
func (*ReportStatResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{1}
}

func (x *ReportStatResponse) GetReportInterval() int64 {
	if x != nil {
		return x.ReportInterval
	}
	return 0
}

type ReportPipedMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version           string                            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	CloudProviders    []*model.Piped_CloudProvider      `protobuf:"bytes,2,rep,name=cloud_providers,json=cloudProviders,proto3" json:"cloud_providers,omitempty"`
	PlatformProviders []*model.Piped_PlatformProvider   `protobuf:"bytes,6,rep,name=platform_providers,json=platformProviders,proto3" json:"platform_providers,omitempty"`
	Repositories      []*model.ApplicationGitRepository `protobuf:"bytes,3,rep,name=repositories,proto3" json:"repositories,omitempty"`
	SecretEncryption  *model.Piped_SecretEncryption     `protobuf:"bytes,4,opt,name=secret_encryption,json=secretEncryption,proto3" json:"secret_encryption,omitempty"`
	Config            string                            `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ReportPipedMetaRequest) Reset() {
	*x = ReportPipedMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportPipedMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPipedMetaRequest) ProtoMessage() {}

func (x *ReportPipedMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPipedMetaRequest.ProtoReflect.Descriptor instead.
func (*ReportPipedMetaRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReportPipedMetaRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReportPipedMetaRequest) GetCloudProviders() []*model.Piped_CloudProvider {
	if x != nil {
		return x.CloudProviders
	}
	return nil
}

func (x *ReportPipedMetaRequest) GetPlatformProviders() []*model.Piped_PlatformProvider {
	if x != nil {
		return x.PlatformProviders
	}
	return nil
}

func (x *ReportPipedMetaRequest) GetRepositories() []*model.ApplicationGitRepository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

func (x *ReportPipedMetaRequest) GetSecretEncryption() *model.Piped_SecretEncryption {
	if x != nil {
		return x.SecretEncryption
	}
	return nil
}

func (x *ReportPipedMetaRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type ReportPipedMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	WebBaseUrl string `protobuf:"bytes,2,opt,name=web_base_url,json=webBaseUrl,proto3" json:"web_base_url,omitempty"`
}

func (x *ReportPipedMetaResponse) Reset() {
	*x = ReportPipedMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportPipedMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPipedMetaResponse) ProtoMessage() {}

func (x *ReportPipedMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPipedMetaResponse.ProtoReflect.Descriptor instead.
func (*ReportPipedMetaResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReportPipedMetaResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportPipedMetaResponse) GetWebBaseUrl() string {
	if x != nil {
		return x.WebBaseUrl
	}
	return ""
}

type ListApplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListApplicationsRequest) Reset() {
	*x = ListApplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsRequest) ProtoMessage() {}

func (x *ListApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsRequest.ProtoReflect.Descriptor instead.
func (*ListApplicationsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{4}
}

type ListApplicationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Applications []*model.Application `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty"`
}

func (x *ListApplicationsResponse) Reset() {
	*x = ListApplicationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListApplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApplicationsResponse) ProtoMessage() {}

func (x *ListApplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApplicationsResponse.ProtoReflect.Descriptor instead.
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListApplicationsResponse) GetApplications() []*model.Application {
	if x != nil {
		return x.Applications
	}
	return nil
}

type ReportApplicationSyncStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                      `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	State         *model.ApplicationSyncState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ReportApplicationSyncStateRequest) Reset() {
	*x = ReportApplicationSyncStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationSyncStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationSyncStateRequest) ProtoMessage() {}

func (x *ReportApplicationSyncStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationSyncStateRequest.ProtoReflect.Descriptor instead.
func (*ReportApplicationSyncStateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{6}
}

func (x *ReportApplicationSyncStateRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ReportApplicationSyncStateRequest) GetState() *model.ApplicationSyncState {
	if x != nil {
		return x.State
	}
	return nil
}

type ReportApplicationSyncStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportApplicationSyncStateResponse) Reset() {
	*x = ReportApplicationSyncStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationSyncStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationSyncStateResponse) ProtoMessage() {}

func (x *ReportApplicationSyncStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationSyncStateResponse.ProtoReflect.Descriptor instead.
func (*ReportApplicationSyncStateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{7}
}

type ReportApplicationDeployingStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Deploying     bool   `protobuf:"varint,2,opt,name=deploying,proto3" json:"deploying,omitempty"`
}

func (x *ReportApplicationDeployingStatusRequest) Reset() {
	*x = ReportApplicationDeployingStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationDeployingStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationDeployingStatusRequest) ProtoMessage() {}

func (x *ReportApplicationDeployingStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationDeployingStatusRequest.ProtoReflect.Descriptor instead.
func (*ReportApplicationDeployingStatusRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{8}
}

func (x *ReportApplicationDeployingStatusRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ReportApplicationDeployingStatusRequest) GetDeploying() bool {
	if x != nil {
		return x.Deploying
	}
	return false
}

type ReportApplicationDeployingStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportApplicationDeployingStatusResponse) Reset() {
	*x = ReportApplicationDeployingStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationDeployingStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationDeployingStatusResponse) ProtoMessage() {}

func (x *ReportApplicationDeployingStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationDeployingStatusResponse.ProtoReflect.Descriptor instead.
func (*ReportApplicationDeployingStatusResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{9}
}

type ReportApplicationMostRecentDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                                `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Status        model.DeploymentStatus                `protobuf:"varint,2,opt,name=status,proto3,enum=model.DeploymentStatus" json:"status,omitempty"`
	Deployment    *model.ApplicationDeploymentReference `protobuf:"bytes,3,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *ReportApplicationMostRecentDeploymentRequest) Reset() {
	*x = ReportApplicationMostRecentDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationMostRecentDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationMostRecentDeploymentRequest) ProtoMessage() {}

func (x *ReportApplicationMostRecentDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationMostRecentDeploymentRequest.ProtoReflect.Descriptor instead.
func (*ReportApplicationMostRecentDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{10}
}

func (x *ReportApplicationMostRecentDeploymentRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *ReportApplicationMostRecentDeploymentRequest) GetStatus() model.DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return model.DeploymentStatus(0)
}

func (x *ReportApplicationMostRecentDeploymentRequest) GetDeployment() *model.ApplicationDeploymentReference {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type ReportApplicationMostRecentDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportApplicationMostRecentDeploymentResponse) Reset() {
	*x = ReportApplicationMostRecentDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationMostRecentDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationMostRecentDeploymentResponse) ProtoMessage() {}

func (x *ReportApplicationMostRecentDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationMostRecentDeploymentResponse.ProtoReflect.Descriptor instead.
func (*ReportApplicationMostRecentDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{11}
}

type GetApplicationMostRecentDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string                 `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Status        model.DeploymentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=model.DeploymentStatus" json:"status,omitempty"`
}

func (x *GetApplicationMostRecentDeploymentRequest) Reset() {
	*x = GetApplicationMostRecentDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationMostRecentDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationMostRecentDeploymentRequest) ProtoMessage() {}

func (x *GetApplicationMostRecentDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationMostRecentDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetApplicationMostRecentDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetApplicationMostRecentDeploymentRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *GetApplicationMostRecentDeploymentRequest) GetStatus() model.DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return model.DeploymentStatus(0)
}

type GetApplicationMostRecentDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *model.ApplicationDeploymentReference `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *GetApplicationMostRecentDeploymentResponse) Reset() {
	*x = GetApplicationMostRecentDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplicationMostRecentDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplicationMostRecentDeploymentResponse) ProtoMessage() {}

func (x *GetApplicationMostRecentDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplicationMostRecentDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetApplicationMostRecentDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetApplicationMostRecentDeploymentResponse) GetDeployment() *model.ApplicationDeploymentReference {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type GetDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDeploymentRequest) Reset() {
	*x = GetDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentRequest) ProtoMessage() {}

func (x *GetDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentRequest.ProtoReflect.Descriptor instead.
func (*GetDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetDeploymentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *model.Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *GetDeploymentResponse) Reset() {
	*x = GetDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeploymentResponse) ProtoMessage() {}

func (x *GetDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeploymentResponse.ProtoReflect.Descriptor instead.
func (*GetDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{15}
}

func (x *GetDeploymentResponse) GetDeployment() *model.Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type ListNotCompletedDeploymentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListNotCompletedDeploymentsRequest) Reset() {
	*x = ListNotCompletedDeploymentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotCompletedDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotCompletedDeploymentsRequest) ProtoMessage() {}

func (x *ListNotCompletedDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotCompletedDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*ListNotCompletedDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{16}
}

type ListNotCompletedDeploymentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployments []*model.Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	Cursor      string              `protobuf:"bytes,2,opt,name=cursor,proto3" json:"cursor,omitempty"`
}

func (x *ListNotCompletedDeploymentsResponse) Reset() {
	*x = ListNotCompletedDeploymentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNotCompletedDeploymentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNotCompletedDeploymentsResponse) ProtoMessage() {}

func (x *ListNotCompletedDeploymentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNotCompletedDeploymentsResponse.ProtoReflect.Descriptor instead.
func (*ListNotCompletedDeploymentsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListNotCompletedDeploymentsResponse) GetDeployments() []*model.Deployment {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *ListNotCompletedDeploymentsResponse) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

type CreateDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *model.Deployment `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *CreateDeploymentRequest) Reset() {
	*x = CreateDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentRequest) ProtoMessage() {}

func (x *CreateDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentRequest.ProtoReflect.Descriptor instead.
func (*CreateDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{18}
}

func (x *CreateDeploymentRequest) GetDeployment() *model.Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type CreateDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDeploymentResponse) Reset() {
	*x = CreateDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentResponse) ProtoMessage() {}

func (x *CreateDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentResponse.ProtoReflect.Descriptor instead.
func (*CreateDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{19}
}

type ReportDeploymentPlannedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// Simple description about what this deployment does.
	// Empty means nothing has changed compared to when the deployment was created.
	Summary string `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	// The human-readable description why the deployment is at current status.
	StatusReason string `protobuf:"bytes,3,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// Hash value of the most recently successfully deployed commit.
	RunningCommitHash string `protobuf:"bytes,4,opt,name=running_commit_hash,json=runningCommitHash,proto3" json:"running_commit_hash,omitempty"`
	// The config file name used by the last successful deployment.
	RunningConfigFilename string `protobuf:"bytes,9,opt,name=running_config_filename,json=runningConfigFilename,proto3" json:"running_config_filename,omitempty"`
	// The application version this deployment is trying to deploy.
	Version  string                   `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Versions []*model.ArtifactVersion `protobuf:"bytes,10,rep,name=versions,proto3" json:"versions,omitempty"`
	// The planned stages.
	// Empty means nothing has changed compared to when the deployment was created.
	Stages []*model.PipelineStage `protobuf:"bytes,6,rep,name=stages,proto3" json:"stages,omitempty"`
	// DeploymentChainId represents the deployment chain id which the deployment
	// belongs to. Empty means this deployment does not belong to any chain.
	DeploymentChainId string `protobuf:"bytes,7,opt,name=deployment_chain_id,json=deploymentChainId,proto3" json:"deployment_chain_id,omitempty"`
	// DeploymentChainBlockIndex represents the block in deployment chain which
	// the deployment assigned to.
	DeploymentChainBlockIndex uint32 `protobuf:"varint,8,opt,name=deployment_chain_block_index,json=deploymentChainBlockIndex,proto3" json:"deployment_chain_block_index,omitempty"`
}

func (x *ReportDeploymentPlannedRequest) Reset() {
	*x = ReportDeploymentPlannedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDeploymentPlannedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDeploymentPlannedRequest) ProtoMessage() {}

func (x *ReportDeploymentPlannedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDeploymentPlannedRequest.ProtoReflect.Descriptor instead.
func (*ReportDeploymentPlannedRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{20}
}

func (x *ReportDeploymentPlannedRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ReportDeploymentPlannedRequest) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *ReportDeploymentPlannedRequest) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

func (x *ReportDeploymentPlannedRequest) GetRunningCommitHash() string {
	if x != nil {
		return x.RunningCommitHash
	}
	return ""
}

func (x *ReportDeploymentPlannedRequest) GetRunningConfigFilename() string {
	if x != nil {
		return x.RunningConfigFilename
	}
	return ""
}

func (x *ReportDeploymentPlannedRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReportDeploymentPlannedRequest) GetVersions() []*model.ArtifactVersion {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *ReportDeploymentPlannedRequest) GetStages() []*model.PipelineStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *ReportDeploymentPlannedRequest) GetDeploymentChainId() string {
	if x != nil {
		return x.DeploymentChainId
	}
	return ""
}

func (x *ReportDeploymentPlannedRequest) GetDeploymentChainBlockIndex() uint32 {
	if x != nil {
		return x.DeploymentChainBlockIndex
	}
	return 0
}

type ReportDeploymentPlannedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportDeploymentPlannedResponse) Reset() {
	*x = ReportDeploymentPlannedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDeploymentPlannedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDeploymentPlannedResponse) ProtoMessage() {}

func (x *ReportDeploymentPlannedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDeploymentPlannedResponse.ProtoReflect.Descriptor instead.
func (*ReportDeploymentPlannedResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{21}
}

type ReportDeploymentStatusChangedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// We only accept RUNNING or ROLLING_BACK.
	Status model.DeploymentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=model.DeploymentStatus" json:"status,omitempty"`
	// The human-readable description why the deployment is at current status.
	StatusReason string `protobuf:"bytes,3,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// DeploymentChainId represents the deployment chain id which the deployment
	// belongs to. Empty means this deployment does not belong to any chain.
	DeploymentChainId string `protobuf:"bytes,4,opt,name=deployment_chain_id,json=deploymentChainId,proto3" json:"deployment_chain_id,omitempty"`
	// DeploymentChainBlockIndex represents the block in deployment chain which
	// the deployment assigned to.
	DeploymentChainBlockIndex uint32 `protobuf:"varint,5,opt,name=deployment_chain_block_index,json=deploymentChainBlockIndex,proto3" json:"deployment_chain_block_index,omitempty"`
}

func (x *ReportDeploymentStatusChangedRequest) Reset() {
	*x = ReportDeploymentStatusChangedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDeploymentStatusChangedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDeploymentStatusChangedRequest) ProtoMessage() {}

func (x *ReportDeploymentStatusChangedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDeploymentStatusChangedRequest.ProtoReflect.Descriptor instead.
func (*ReportDeploymentStatusChangedRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{22}
}

func (x *ReportDeploymentStatusChangedRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ReportDeploymentStatusChangedRequest) GetStatus() model.DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return model.DeploymentStatus(0)
}

func (x *ReportDeploymentStatusChangedRequest) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

func (x *ReportDeploymentStatusChangedRequest) GetDeploymentChainId() string {
	if x != nil {
		return x.DeploymentChainId
	}
	return ""
}

func (x *ReportDeploymentStatusChangedRequest) GetDeploymentChainBlockIndex() uint32 {
	if x != nil {
		return x.DeploymentChainBlockIndex
	}
	return 0
}

type ReportDeploymentStatusChangedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportDeploymentStatusChangedResponse) Reset() {
	*x = ReportDeploymentStatusChangedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDeploymentStatusChangedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDeploymentStatusChangedResponse) ProtoMessage() {}

func (x *ReportDeploymentStatusChangedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDeploymentStatusChangedResponse.ProtoReflect.Descriptor instead.
func (*ReportDeploymentStatusChangedResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{23}
}

type ReportDeploymentCompletedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// The status of deployment.
	Status model.DeploymentStatus `protobuf:"varint,2,opt,name=status,proto3,enum=model.DeploymentStatus" json:"status,omitempty"`
	// The human-readable description why the deployment is at current status.
	StatusReason string `protobuf:"bytes,3,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	// The completed statuses of all stages.
	StageStatuses map[string]model.StageStatus `protobuf:"bytes,4,rep,name=stage_statuses,json=stageStatuses,proto3" json:"stage_statuses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=model.StageStatus"`
	// DeploymentChainId represents the deployment chain id which the deployment
	// belongs to. Empty means this deployment does not belong to any chain.
	DeploymentChainId string `protobuf:"bytes,5,opt,name=deployment_chain_id,json=deploymentChainId,proto3" json:"deployment_chain_id,omitempty"`
	// DeploymentChainBlockIndex represents the block in deployment chain which
	// the deployment assigned to.
	DeploymentChainBlockIndex uint32 `protobuf:"varint,6,opt,name=deployment_chain_block_index,json=deploymentChainBlockIndex,proto3" json:"deployment_chain_block_index,omitempty"`
	// The completion time of deployment.
	CompletedAt int64 `protobuf:"varint,13,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *ReportDeploymentCompletedRequest) Reset() {
	*x = ReportDeploymentCompletedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDeploymentCompletedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDeploymentCompletedRequest) ProtoMessage() {}

func (x *ReportDeploymentCompletedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDeploymentCompletedRequest.ProtoReflect.Descriptor instead.
func (*ReportDeploymentCompletedRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{24}
}

func (x *ReportDeploymentCompletedRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ReportDeploymentCompletedRequest) GetStatus() model.DeploymentStatus {
	if x != nil {
		return x.Status
	}
	return model.DeploymentStatus(0)
}

func (x *ReportDeploymentCompletedRequest) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

func (x *ReportDeploymentCompletedRequest) GetStageStatuses() map[string]model.StageStatus {
	if x != nil {
		return x.StageStatuses
	}
	return nil
}

func (x *ReportDeploymentCompletedRequest) GetDeploymentChainId() string {
	if x != nil {
		return x.DeploymentChainId
	}
	return ""
}

func (x *ReportDeploymentCompletedRequest) GetDeploymentChainBlockIndex() uint32 {
	if x != nil {
		return x.DeploymentChainBlockIndex
	}
	return 0
}

func (x *ReportDeploymentCompletedRequest) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

type ReportDeploymentCompletedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportDeploymentCompletedResponse) Reset() {
	*x = ReportDeploymentCompletedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportDeploymentCompletedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportDeploymentCompletedResponse) ProtoMessage() {}

func (x *ReportDeploymentCompletedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportDeploymentCompletedResponse.ProtoReflect.Descriptor instead.
func (*ReportDeploymentCompletedResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{25}
}

type SaveDeploymentMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string            `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SaveDeploymentMetadataRequest) Reset() {
	*x = SaveDeploymentMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDeploymentMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDeploymentMetadataRequest) ProtoMessage() {}

func (x *SaveDeploymentMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDeploymentMetadataRequest.ProtoReflect.Descriptor instead.
func (*SaveDeploymentMetadataRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{26}
}

func (x *SaveDeploymentMetadataRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *SaveDeploymentMetadataRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SaveDeploymentMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveDeploymentMetadataResponse) Reset() {
	*x = SaveDeploymentMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveDeploymentMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveDeploymentMetadataResponse) ProtoMessage() {}

func (x *SaveDeploymentMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveDeploymentMetadataResponse.ProtoReflect.Descriptor instead.
func (*SaveDeploymentMetadataResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{27}
}

type SaveStageMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string            `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	StageId      string            `protobuf:"bytes,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Metadata     map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SaveStageMetadataRequest) Reset() {
	*x = SaveStageMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveStageMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStageMetadataRequest) ProtoMessage() {}

func (x *SaveStageMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStageMetadataRequest.ProtoReflect.Descriptor instead.
func (*SaveStageMetadataRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{28}
}

func (x *SaveStageMetadataRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *SaveStageMetadataRequest) GetStageId() string {
	if x != nil {
		return x.StageId
	}
	return ""
}

func (x *SaveStageMetadataRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SaveStageMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveStageMetadataResponse) Reset() {
	*x = SaveStageMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveStageMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveStageMetadataResponse) ProtoMessage() {}

func (x *SaveStageMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveStageMetadataResponse.ProtoReflect.Descriptor instead.
func (*SaveStageMetadataResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{29}
}

type ReportStageLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string            `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	StageId      string            `protobuf:"bytes,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	RetriedCount int32             `protobuf:"varint,3,opt,name=retried_count,json=retriedCount,proto3" json:"retried_count,omitempty"`
	Blocks       []*model.LogBlock `protobuf:"bytes,4,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *ReportStageLogsRequest) Reset() {
	*x = ReportStageLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStageLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStageLogsRequest) ProtoMessage() {}

func (x *ReportStageLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStageLogsRequest.ProtoReflect.Descriptor instead.
func (*ReportStageLogsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{30}
}

func (x *ReportStageLogsRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ReportStageLogsRequest) GetStageId() string {
	if x != nil {
		return x.StageId
	}
	return ""
}

func (x *ReportStageLogsRequest) GetRetriedCount() int32 {
	if x != nil {
		return x.RetriedCount
	}
	return 0
}

func (x *ReportStageLogsRequest) GetBlocks() []*model.LogBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type ReportStageLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportStageLogsResponse) Reset() {
	*x = ReportStageLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStageLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStageLogsResponse) ProtoMessage() {}

func (x *ReportStageLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStageLogsResponse.ProtoReflect.Descriptor instead.
func (*ReportStageLogsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{31}
}

type ReportStageLogsFromLastCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string            `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	StageId      string            `protobuf:"bytes,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	RetriedCount int32             `protobuf:"varint,3,opt,name=retried_count,json=retriedCount,proto3" json:"retried_count,omitempty"`
	Blocks       []*model.LogBlock `protobuf:"bytes,4,rep,name=blocks,proto3" json:"blocks,omitempty"`
	Completed    bool              `protobuf:"varint,5,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (x *ReportStageLogsFromLastCheckpointRequest) Reset() {
	*x = ReportStageLogsFromLastCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStageLogsFromLastCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStageLogsFromLastCheckpointRequest) ProtoMessage() {}

func (x *ReportStageLogsFromLastCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStageLogsFromLastCheckpointRequest.ProtoReflect.Descriptor instead.
func (*ReportStageLogsFromLastCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{32}
}

func (x *ReportStageLogsFromLastCheckpointRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ReportStageLogsFromLastCheckpointRequest) GetStageId() string {
	if x != nil {
		return x.StageId
	}
	return ""
}

func (x *ReportStageLogsFromLastCheckpointRequest) GetRetriedCount() int32 {
	if x != nil {
		return x.RetriedCount
	}
	return 0
}

func (x *ReportStageLogsFromLastCheckpointRequest) GetBlocks() []*model.LogBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *ReportStageLogsFromLastCheckpointRequest) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

type ReportStageLogsFromLastCheckpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportStageLogsFromLastCheckpointResponse) Reset() {
	*x = ReportStageLogsFromLastCheckpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStageLogsFromLastCheckpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStageLogsFromLastCheckpointResponse) ProtoMessage() {}

func (x *ReportStageLogsFromLastCheckpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStageLogsFromLastCheckpointResponse.ProtoReflect.Descriptor instead.
func (*ReportStageLogsFromLastCheckpointResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{33}
}

type ReportStageStatusChangedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId string            `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	StageId      string            `protobuf:"bytes,2,opt,name=stage_id,json=stageId,proto3" json:"stage_id,omitempty"`
	Status       model.StageStatus `protobuf:"varint,3,opt,name=status,proto3,enum=model.StageStatus" json:"status,omitempty"`
	// The human-readable description why the stage is at current status.
	StatusReason string   `protobuf:"bytes,4,opt,name=status_reason,json=statusReason,proto3" json:"status_reason,omitempty"`
	Requires     []string `protobuf:"bytes,5,rep,name=requires,proto3" json:"requires,omitempty"`
	Visible      bool     `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	RetriedCount int32    `protobuf:"varint,7,opt,name=retried_count,json=retriedCount,proto3" json:"retried_count,omitempty"`
	CompletedAt  int64    `protobuf:"varint,13,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (x *ReportStageStatusChangedRequest) Reset() {
	*x = ReportStageStatusChangedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStageStatusChangedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStageStatusChangedRequest) ProtoMessage() {}

func (x *ReportStageStatusChangedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStageStatusChangedRequest.ProtoReflect.Descriptor instead.
func (*ReportStageStatusChangedRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{34}
}

func (x *ReportStageStatusChangedRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *ReportStageStatusChangedRequest) GetStageId() string {
	if x != nil {
		return x.StageId
	}
	return ""
}

func (x *ReportStageStatusChangedRequest) GetStatus() model.StageStatus {
	if x != nil {
		return x.Status
	}
	return model.StageStatus(0)
}

func (x *ReportStageStatusChangedRequest) GetStatusReason() string {
	if x != nil {
		return x.StatusReason
	}
	return ""
}

func (x *ReportStageStatusChangedRequest) GetRequires() []string {
	if x != nil {
		return x.Requires
	}
	return nil
}

func (x *ReportStageStatusChangedRequest) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *ReportStageStatusChangedRequest) GetRetriedCount() int32 {
	if x != nil {
		return x.RetriedCount
	}
	return 0
}

func (x *ReportStageStatusChangedRequest) GetCompletedAt() int64 {
	if x != nil {
		return x.CompletedAt
	}
	return 0
}

type ReportStageStatusChangedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportStageStatusChangedResponse) Reset() {
	*x = ReportStageStatusChangedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportStageStatusChangedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportStageStatusChangedResponse) ProtoMessage() {}

func (x *ReportStageStatusChangedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportStageStatusChangedResponse.ProtoReflect.Descriptor instead.
func (*ReportStageStatusChangedResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{35}
}

type ListUnhandledCommandsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUnhandledCommandsRequest) Reset() {
	*x = ListUnhandledCommandsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnhandledCommandsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnhandledCommandsRequest) ProtoMessage() {}

func (x *ListUnhandledCommandsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnhandledCommandsRequest.ProtoReflect.Descriptor instead.
func (*ListUnhandledCommandsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{36}
}

type ListUnhandledCommandsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []*model.Command `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *ListUnhandledCommandsResponse) Reset() {
	*x = ListUnhandledCommandsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUnhandledCommandsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnhandledCommandsResponse) ProtoMessage() {}

func (x *ListUnhandledCommandsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnhandledCommandsResponse.ProtoReflect.Descriptor instead.
func (*ListUnhandledCommandsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{37}
}

func (x *ListUnhandledCommandsResponse) GetCommands() []*model.Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

type ReportCommandHandledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandId string              `protobuf:"bytes,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	Status    model.CommandStatus `protobuf:"varint,2,opt,name=status,proto3,enum=model.CommandStatus" json:"status,omitempty"`
	Metadata  map[string]string   `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	HandledAt int64               `protobuf:"varint,4,opt,name=handled_at,json=handledAt,proto3" json:"handled_at,omitempty"`
	// Additional output data to be stored in filestore.
	Output []byte `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ReportCommandHandledRequest) Reset() {
	*x = ReportCommandHandledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCommandHandledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCommandHandledRequest) ProtoMessage() {}

func (x *ReportCommandHandledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCommandHandledRequest.ProtoReflect.Descriptor instead.
func (*ReportCommandHandledRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{38}
}

func (x *ReportCommandHandledRequest) GetCommandId() string {
	if x != nil {
		return x.CommandId
	}
	return ""
}

func (x *ReportCommandHandledRequest) GetStatus() model.CommandStatus {
	if x != nil {
		return x.Status
	}
	return model.CommandStatus(0)
}

func (x *ReportCommandHandledRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ReportCommandHandledRequest) GetHandledAt() int64 {
	if x != nil {
		return x.HandledAt
	}
	return 0
}

func (x *ReportCommandHandledRequest) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type ReportCommandHandledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportCommandHandledResponse) Reset() {
	*x = ReportCommandHandledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCommandHandledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCommandHandledResponse) ProtoMessage() {}

func (x *ReportCommandHandledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCommandHandledResponse.ProtoReflect.Descriptor instead.
func (*ReportCommandHandledResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{39}
}

type ReportApplicationLiveStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *model.ApplicationLiveStateSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *ReportApplicationLiveStateRequest) Reset() {
	*x = ReportApplicationLiveStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationLiveStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationLiveStateRequest) ProtoMessage() {}

func (x *ReportApplicationLiveStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationLiveStateRequest.ProtoReflect.Descriptor instead.
func (*ReportApplicationLiveStateRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{40}
}

func (x *ReportApplicationLiveStateRequest) GetSnapshot() *model.ApplicationLiveStateSnapshot {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type ReportApplicationLiveStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportApplicationLiveStateResponse) Reset() {
	*x = ReportApplicationLiveStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationLiveStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationLiveStateResponse) ProtoMessage() {}

func (x *ReportApplicationLiveStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationLiveStateResponse.ProtoReflect.Descriptor instead.
func (*ReportApplicationLiveStateResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{41}
}

type ReportApplicationLiveStateEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KubernetesEvents []*model.KubernetesResourceStateEvent `protobuf:"bytes,1,rep,name=kubernetes_events,json=kubernetesEvents,proto3" json:"kubernetes_events,omitempty"`
}

func (x *ReportApplicationLiveStateEventsRequest) Reset() {
	*x = ReportApplicationLiveStateEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationLiveStateEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationLiveStateEventsRequest) ProtoMessage() {}

func (x *ReportApplicationLiveStateEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationLiveStateEventsRequest.ProtoReflect.Descriptor instead.
func (*ReportApplicationLiveStateEventsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{42}
}

func (x *ReportApplicationLiveStateEventsRequest) GetKubernetesEvents() []*model.KubernetesResourceStateEvent {
	if x != nil {
		return x.KubernetesEvents
	}
	return nil
}

type ReportApplicationLiveStateEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FailedIds []string `protobuf:"bytes,1,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`
}

func (x *ReportApplicationLiveStateEventsResponse) Reset() {
	*x = ReportApplicationLiveStateEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportApplicationLiveStateEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportApplicationLiveStateEventsResponse) ProtoMessage() {}

func (x *ReportApplicationLiveStateEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportApplicationLiveStateEventsResponse.ProtoReflect.Descriptor instead.
func (*ReportApplicationLiveStateEventsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{43}
}

func (x *ReportApplicationLiveStateEventsResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

type GetLatestEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetLatestEventRequest) Reset() {
	*x = GetLatestEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestEventRequest) ProtoMessage() {}

func (x *GetLatestEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestEventRequest.ProtoReflect.Descriptor instead.
func (*GetLatestEventRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{44}
}

func (x *GetLatestEventRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetLatestEventRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GetLatestEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event *model.Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *GetLatestEventResponse) Reset() {
	*x = GetLatestEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestEventResponse) ProtoMessage() {}

func (x *GetLatestEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestEventResponse.ProtoReflect.Descriptor instead.
func (*GetLatestEventResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{45}
}

func (x *GetLatestEventResponse) GetEvent() *model.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type ListEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From   int64                    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To     int64                    `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Order  ListOrder                `protobuf:"varint,3,opt,name=order,proto3,enum=grpc.service.pipedservice.ListOrder" json:"order,omitempty"`
	Status ListEventsRequest_Status `protobuf:"varint,4,opt,name=status,proto3,enum=grpc.service.pipedservice.ListEventsRequest_Status" json:"status,omitempty"`
}

func (x *ListEventsRequest) Reset() {
	*x = ListEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsRequest) ProtoMessage() {}

func (x *ListEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsRequest.ProtoReflect.Descriptor instead.
func (*ListEventsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{46}
}

func (x *ListEventsRequest) GetFrom() int64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *ListEventsRequest) GetTo() int64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *ListEventsRequest) GetOrder() ListOrder {
	if x != nil {
		return x.Order
	}
	return ListOrder_NONE
}

func (x *ListEventsRequest) GetStatus() ListEventsRequest_Status {
	if x != nil {
		return x.Status
	}
	return ListEventsRequest_ALL
}

type ListEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*model.Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ListEventsResponse) Reset() {
	*x = ListEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEventsResponse) ProtoMessage() {}

func (x *ListEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEventsResponse.ProtoReflect.Descriptor instead.
func (*ListEventsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{47}
}

func (x *ListEventsResponse) GetEvents() []*model.Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type ReportEventsHandledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventIds []string `protobuf:"bytes,1,rep,name=event_ids,json=eventIds,proto3" json:"event_ids,omitempty"`
}

func (x *ReportEventsHandledRequest) Reset() {
	*x = ReportEventsHandledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventsHandledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventsHandledRequest) ProtoMessage() {}

func (x *ReportEventsHandledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventsHandledRequest.ProtoReflect.Descriptor instead.
func (*ReportEventsHandledRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{48}
}

func (x *ReportEventsHandledRequest) GetEventIds() []string {
	if x != nil {
		return x.EventIds
	}
	return nil
}

type ReportEventsHandledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportEventsHandledResponse) Reset() {
	*x = ReportEventsHandledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventsHandledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventsHandledResponse) ProtoMessage() {}

func (x *ReportEventsHandledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventsHandledResponse.ProtoReflect.Descriptor instead.
func (*ReportEventsHandledResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{49}
}

type ReportEventStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*ReportEventStatusesRequest_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ReportEventStatusesRequest) Reset() {
	*x = ReportEventStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventStatusesRequest) ProtoMessage() {}

func (x *ReportEventStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventStatusesRequest.ProtoReflect.Descriptor instead.
func (*ReportEventStatusesRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{50}
}

func (x *ReportEventStatusesRequest) GetEvents() []*ReportEventStatusesRequest_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type ReportEventStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportEventStatusesResponse) Reset() {
	*x = ReportEventStatusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventStatusesResponse) ProtoMessage() {}

func (x *ReportEventStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventStatusesResponse.ProtoReflect.Descriptor instead.
func (*ReportEventStatusesResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{51}
}

type GetLatestAnalysisResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId string `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
}

func (x *GetLatestAnalysisResultRequest) Reset() {
	*x = GetLatestAnalysisResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestAnalysisResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestAnalysisResultRequest) ProtoMessage() {}

func (x *GetLatestAnalysisResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestAnalysisResultRequest.ProtoReflect.Descriptor instead.
func (*GetLatestAnalysisResultRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{52}
}

func (x *GetLatestAnalysisResultRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

type GetLatestAnalysisResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnalysisResult *model.AnalysisResult `protobuf:"bytes,1,opt,name=analysis_result,json=analysisResult,proto3" json:"analysis_result,omitempty"`
}

func (x *GetLatestAnalysisResultResponse) Reset() {
	*x = GetLatestAnalysisResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestAnalysisResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestAnalysisResultResponse) ProtoMessage() {}

func (x *GetLatestAnalysisResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestAnalysisResultResponse.ProtoReflect.Descriptor instead.
func (*GetLatestAnalysisResultResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{53}
}

func (x *GetLatestAnalysisResultResponse) GetAnalysisResult() *model.AnalysisResult {
	if x != nil {
		return x.AnalysisResult
	}
	return nil
}

type PutLatestAnalysisResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationId  string                `protobuf:"bytes,1,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	AnalysisResult *model.AnalysisResult `protobuf:"bytes,2,opt,name=analysis_result,json=analysisResult,proto3" json:"analysis_result,omitempty"`
}

func (x *PutLatestAnalysisResultRequest) Reset() {
	*x = PutLatestAnalysisResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutLatestAnalysisResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutLatestAnalysisResultRequest) ProtoMessage() {}

func (x *PutLatestAnalysisResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutLatestAnalysisResultRequest.ProtoReflect.Descriptor instead.
func (*PutLatestAnalysisResultRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{54}
}

func (x *PutLatestAnalysisResultRequest) GetApplicationId() string {
	if x != nil {
		return x.ApplicationId
	}
	return ""
}

func (x *PutLatestAnalysisResultRequest) GetAnalysisResult() *model.AnalysisResult {
	if x != nil {
		return x.AnalysisResult
	}
	return nil
}

type PutLatestAnalysisResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PutLatestAnalysisResultResponse) Reset() {
	*x = PutLatestAnalysisResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutLatestAnalysisResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutLatestAnalysisResultResponse) ProtoMessage() {}

func (x *PutLatestAnalysisResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutLatestAnalysisResultResponse.ProtoReflect.Descriptor instead.
func (*PutLatestAnalysisResultResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{55}
}

type GetDesiredVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDesiredVersionRequest) Reset() {
	*x = GetDesiredVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredVersionRequest) ProtoMessage() {}

func (x *GetDesiredVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredVersionRequest.ProtoReflect.Descriptor instead.
func (*GetDesiredVersionRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{56}
}

type GetDesiredVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetDesiredVersionResponse) Reset() {
	*x = GetDesiredVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDesiredVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDesiredVersionResponse) ProtoMessage() {}

func (x *GetDesiredVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDesiredVersionResponse.ProtoReflect.Descriptor instead.
func (*GetDesiredVersionResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{57}
}

func (x *GetDesiredVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type UpdateApplicationConfigurationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The application configurations that should be updated.
	Applications []*model.ApplicationInfo `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty"`
}

func (x *UpdateApplicationConfigurationsRequest) Reset() {
	*x = UpdateApplicationConfigurationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationConfigurationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationConfigurationsRequest) ProtoMessage() {}

func (x *UpdateApplicationConfigurationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationConfigurationsRequest.ProtoReflect.Descriptor instead.
func (*UpdateApplicationConfigurationsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{58}
}

func (x *UpdateApplicationConfigurationsRequest) GetApplications() []*model.ApplicationInfo {
	if x != nil {
		return x.Applications
	}
	return nil
}

type UpdateApplicationConfigurationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateApplicationConfigurationsResponse) Reset() {
	*x = UpdateApplicationConfigurationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateApplicationConfigurationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateApplicationConfigurationsResponse) ProtoMessage() {}

func (x *UpdateApplicationConfigurationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateApplicationConfigurationsResponse.ProtoReflect.Descriptor instead.
func (*UpdateApplicationConfigurationsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{59}
}

type ReportUnregisteredApplicationConfigurationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All the latest application configurations that isn't registered yet.
	// Note that ALL configs are always be contained every time.
	Applications []*model.ApplicationInfo `protobuf:"bytes,1,rep,name=applications,proto3" json:"applications,omitempty"`
}

func (x *ReportUnregisteredApplicationConfigurationsRequest) Reset() {
	*x = ReportUnregisteredApplicationConfigurationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUnregisteredApplicationConfigurationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUnregisteredApplicationConfigurationsRequest) ProtoMessage() {}

func (x *ReportUnregisteredApplicationConfigurationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUnregisteredApplicationConfigurationsRequest.ProtoReflect.Descriptor instead.
func (*ReportUnregisteredApplicationConfigurationsRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{60}
}

func (x *ReportUnregisteredApplicationConfigurationsRequest) GetApplications() []*model.ApplicationInfo {
	if x != nil {
		return x.Applications
	}
	return nil
}

type ReportUnregisteredApplicationConfigurationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportUnregisteredApplicationConfigurationsResponse) Reset() {
	*x = ReportUnregisteredApplicationConfigurationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportUnregisteredApplicationConfigurationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportUnregisteredApplicationConfigurationsResponse) ProtoMessage() {}

func (x *ReportUnregisteredApplicationConfigurationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportUnregisteredApplicationConfigurationsResponse.ProtoReflect.Descriptor instead.
func (*ReportUnregisteredApplicationConfigurationsResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{61}
}

type CreateDeploymentChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstDeployment *model.Deployment                                  `protobuf:"bytes,1,opt,name=first_deployment,json=firstDeployment,proto3" json:"first_deployment,omitempty"`
	Matchers        []*CreateDeploymentChainRequest_ApplicationMatcher `protobuf:"bytes,2,rep,name=matchers,proto3" json:"matchers,omitempty"`
}

func (x *CreateDeploymentChainRequest) Reset() {
	*x = CreateDeploymentChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentChainRequest) ProtoMessage() {}

func (x *CreateDeploymentChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentChainRequest.ProtoReflect.Descriptor instead.
func (*CreateDeploymentChainRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{62}
}

func (x *CreateDeploymentChainRequest) GetFirstDeployment() *model.Deployment {
	if x != nil {
		return x.FirstDeployment
	}
	return nil
}

func (x *CreateDeploymentChainRequest) GetMatchers() []*CreateDeploymentChainRequest_ApplicationMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

type CreateDeploymentChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDeploymentChainResponse) Reset() {
	*x = CreateDeploymentChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentChainResponse) ProtoMessage() {}

func (x *CreateDeploymentChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentChainResponse.ProtoReflect.Descriptor instead.
func (*CreateDeploymentChainResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{63}
}

type InChainDeploymentPlannableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId              string `protobuf:"bytes,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	DeploymentChainId         string `protobuf:"bytes,2,opt,name=deployment_chain_id,json=deploymentChainId,proto3" json:"deployment_chain_id,omitempty"`
	DeploymentChainBlockIndex uint32 `protobuf:"varint,3,opt,name=deployment_chain_block_index,json=deploymentChainBlockIndex,proto3" json:"deployment_chain_block_index,omitempty"`
}

func (x *InChainDeploymentPlannableRequest) Reset() {
	*x = InChainDeploymentPlannableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InChainDeploymentPlannableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InChainDeploymentPlannableRequest) ProtoMessage() {}

func (x *InChainDeploymentPlannableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InChainDeploymentPlannableRequest.ProtoReflect.Descriptor instead.
func (*InChainDeploymentPlannableRequest) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{64}
}

func (x *InChainDeploymentPlannableRequest) GetDeploymentId() string {
	if x != nil {
		return x.DeploymentId
	}
	return ""
}

func (x *InChainDeploymentPlannableRequest) GetDeploymentChainId() string {
	if x != nil {
		return x.DeploymentChainId
	}
	return ""
}

func (x *InChainDeploymentPlannableRequest) GetDeploymentChainBlockIndex() uint32 {
	if x != nil {
		return x.DeploymentChainBlockIndex
	}
	return 0
}

type InChainDeploymentPlannableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// plannable used to determine whether piped should start planning the given development.
	Plannable bool `protobuf:"varint,1,opt,name=plannable,proto3" json:"plannable,omitempty"`
	// cancel used to determine whether piped should cancel the given development.
	Cancel       bool   `protobuf:"varint,2,opt,name=cancel,proto3" json:"cancel,omitempty"`
	CancelReason string `protobuf:"bytes,3,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
}

func (x *InChainDeploymentPlannableResponse) Reset() {
	*x = InChainDeploymentPlannableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InChainDeploymentPlannableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InChainDeploymentPlannableResponse) ProtoMessage() {}

func (x *InChainDeploymentPlannableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InChainDeploymentPlannableResponse.ProtoReflect.Descriptor instead.
func (*InChainDeploymentPlannableResponse) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{65}
}

func (x *InChainDeploymentPlannableResponse) GetPlannable() bool {
	if x != nil {
		return x.Plannable
	}
	return false
}

func (x *InChainDeploymentPlannableResponse) GetCancel() bool {
	if x != nil {
		return x.Cancel
	}
	return false
}

func (x *InChainDeploymentPlannableResponse) GetCancelReason() string {
	if x != nil {
		return x.CancelReason
	}
	return ""
}

type ReportEventStatusesRequest_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status            model.EventStatus `protobuf:"varint,2,opt,name=status,proto3,enum=model.EventStatus" json:"status,omitempty"`
	StatusDescription string            `protobuf:"bytes,3,opt,name=status_description,json=statusDescription,proto3" json:"status_description,omitempty"`
}

func (x *ReportEventStatusesRequest_Event) Reset() {
	*x = ReportEventStatusesRequest_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventStatusesRequest_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventStatusesRequest_Event) ProtoMessage() {}

func (x *ReportEventStatusesRequest_Event) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventStatusesRequest_Event.ProtoReflect.Descriptor instead.
func (*ReportEventStatusesRequest_Event) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{50, 0}
}

func (x *ReportEventStatusesRequest_Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReportEventStatusesRequest_Event) GetStatus() model.EventStatus {
	if x != nil {
		return x.Status
	}
	return model.EventStatus(0)
}

func (x *ReportEventStatusesRequest_Event) GetStatusDescription() string {
	if x != nil {
		return x.StatusDescription
	}
	return ""
}

// Note: The matcher use AND operator to merge all conditions used to determine
// which apps should be trigger as node in chain.
type CreateDeploymentChainRequest_ApplicationMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The kind is one of: KUBERNETES, TERRAFORM, CLOUDRUN, LAMBDA, ECS.
	// This kind will be cast to model.ApplicationKind and we use string to use
	// empty string as default value in case this matcher field is not set.
	Kind   string            `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateDeploymentChainRequest_ApplicationMatcher) Reset() {
	*x = CreateDeploymentChainRequest_ApplicationMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeploymentChainRequest_ApplicationMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeploymentChainRequest_ApplicationMatcher) ProtoMessage() {}

func (x *CreateDeploymentChainRequest_ApplicationMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_app_server_service_pipedservice_service_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeploymentChainRequest_ApplicationMatcher.ProtoReflect.Descriptor instead.
func (*CreateDeploymentChainRequest_ApplicationMatcher) Descriptor() ([]byte, []int) {
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP(), []int{62, 0}
}

func (x *CreateDeploymentChainRequest_ApplicationMatcher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateDeploymentChainRequest_ApplicationMatcher) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CreateDeploymentChainRequest_ApplicationMatcher) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_pkg_app_server_service_pipedservice_service_proto protoreflect.FileDescriptor

var file_pkg_app_server_service_pipedservice_service_proto_rawDesc = []byte{
	0x0a, 0x31, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x6b, 0x67, 0x2f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6c, 0x6f, 0x67, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x70,
	0x69, 0x70, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x6b, 0x67, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x34, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x69,
	0x70, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xee, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x64, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x11, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x43, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x64, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x58, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x42, 0x61, 0x73, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x52, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x77, 0x0a, 0x27, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x69, 0x6e, 0x67, 0x22, 0x2a, 0x0a, 0x28, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xea, 0x01, 0x0a, 0x2c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x2d,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01,
	0x0a, 0x29, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x22,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x72, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x1a,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe2, 0x03, 0x0a, 0x1e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3f,
	0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x21, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa7, 0x02, 0x0a, 0x24, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x82, 0x01, 0x04, 0x18, 0x02, 0x18, 0x03, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x27, 0x0a, 0x25,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x04, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x75, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x2a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x54, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x23, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x1d, 0x53, 0x61, 0x76, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x1e, 0x53, 0x61, 0x76, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x18, 0x53,
	0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x67,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x19, 0x0a,
	0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x28, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4c, 0x6f, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd5, 0x02, 0x0a, 0x1f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xdc, 0x02, 0x0a, 0x1b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0a, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x20, 0x00, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x21, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b,
	0x0a, 0x27, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x28, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa0, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x44, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x55, 0x54, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x22, 0x3a, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x43, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x1a, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x8e, 0x01,
	0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1d,
	0x0a, 0x1b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x6b, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9a, 0x01, 0x0a,
	0x1e, 0x50, 0x75, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x0f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x50, 0x75, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x64, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x29, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x70, 0x0a, 0x32, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x35, 0x0a, 0x33, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb8, 0x03, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x66, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x1a, 0xe7, 0x01, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x6e, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x21, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x13, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x7f, 0x0a, 0x22, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x2a, 0x28, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x53, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x02, 0x32, 0xbb,
	0x26, 0x0a, 0x0c, 0x50, 0x69, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x6b, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x12, 0x2c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x31, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x69, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbc, 0x01, 0x0a, 0x25, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x47, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x45, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x9e, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7d, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x92, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x39, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x3f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a,
	0x19, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x61, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65,
	0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x11, 0x53, 0x61,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x33, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0f,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x31, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a, 0x21, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x43,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x61,
	0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x18,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x3a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b,
	0x01, 0x0a, 0x1a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xad, 0x01, 0x0a,
	0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x39, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x50, 0x75,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x75, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x74,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xaa, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x41, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xce,
	0x01, 0x0a, 0x2b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69,
	0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8c, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x37, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b,
	0x01, 0x0a, 0x1a, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70,
	0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x69, 0x70, 0x65, 0x64,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x2d,
	0x63, 0x64, 0x2f, 0x70, 0x69, 0x70, 0x65, 0x63, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x69, 0x70, 0x65, 0x64, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_app_server_service_pipedservice_service_proto_rawDescOnce sync.Once
	file_pkg_app_server_service_pipedservice_service_proto_rawDescData = file_pkg_app_server_service_pipedservice_service_proto_rawDesc
)

func file_pkg_app_server_service_pipedservice_service_proto_rawDescGZIP() []byte {
	file_pkg_app_server_service_pipedservice_service_proto_rawDescOnce.Do(func() {
		file_pkg_app_server_service_pipedservice_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_app_server_service_pipedservice_service_proto_rawDescData)
	})
	return file_pkg_app_server_service_pipedservice_service_proto_rawDescData
}

var file_pkg_app_server_service_pipedservice_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pkg_app_server_service_pipedservice_service_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_pkg_app_server_service_pipedservice_service_proto_goTypes = []interface{}{
	(ListOrder)(0),                                              // 0: grpc.service.pipedservice.ListOrder
	(ListEventsRequest_Status)(0),                               // 1: grpc.service.pipedservice.ListEventsRequest.Status
	(*ReportStatRequest)(nil),                                   // 2: grpc.service.pipedservice.ReportStatRequest
	(*ReportStatResponse)(nil),                                  // 3: grpc.service.pipedservice.ReportStatResponse
	(*ReportPipedMetaRequest)(nil),                              // 4: grpc.service.pipedservice.ReportPipedMetaRequest
	(*ReportPipedMetaResponse)(nil),                             // 5: grpc.service.pipedservice.ReportPipedMetaResponse
	(*ListApplicationsRequest)(nil),                             // 6: grpc.service.pipedservice.ListApplicationsRequest
	(*ListApplicationsResponse)(nil),                            // 7: grpc.service.pipedservice.ListApplicationsResponse
	(*ReportApplicationSyncStateRequest)(nil),                   // 8: grpc.service.pipedservice.ReportApplicationSyncStateRequest
	(*ReportApplicationSyncStateResponse)(nil),                  // 9: grpc.service.pipedservice.ReportApplicationSyncStateResponse
	(*ReportApplicationDeployingStatusRequest)(nil),             // 10: grpc.service.pipedservice.ReportApplicationDeployingStatusRequest
	(*ReportApplicationDeployingStatusResponse)(nil),            // 11: grpc.service.pipedservice.ReportApplicationDeployingStatusResponse
	(*ReportApplicationMostRecentDeploymentRequest)(nil),        // 12: grpc.service.pipedservice.ReportApplicationMostRecentDeploymentRequest
	(*ReportApplicationMostRecentDeploymentResponse)(nil),       // 13: grpc.service.pipedservice.ReportApplicationMostRecentDeploymentResponse
	(*GetApplicationMostRecentDeploymentRequest)(nil),           // 14: grpc.service.pipedservice.GetApplicationMostRecentDeploymentRequest
	(*GetApplicationMostRecentDeploymentResponse)(nil),          // 15: grpc.service.pipedservice.GetApplicationMostRecentDeploymentResponse
	(*GetDeploymentRequest)(nil),                                // 16: grpc.service.pipedservice.GetDeploymentRequest
	(*GetDeploymentResponse)(nil),                               // 17: grpc.service.pipedservice.GetDeploymentResponse
	(*ListNotCompletedDeploymentsRequest)(nil),                  // 18: grpc.service.pipedservice.ListNotCompletedDeploymentsRequest
	(*ListNotCompletedDeploymentsResponse)(nil),                 // 19: grpc.service.pipedservice.ListNotCompletedDeploymentsResponse
	(*CreateDeploymentRequest)(nil),                             // 20: grpc.service.pipedservice.CreateDeploymentRequest
	(*CreateDeploymentResponse)(nil),                            // 21: grpc.service.pipedservice.CreateDeploymentResponse
	(*ReportDeploymentPlannedRequest)(nil),                      // 22: grpc.service.pipedservice.ReportDeploymentPlannedRequest
	(*ReportDeploymentPlannedResponse)(nil),                     // 23: grpc.service.pipedservice.ReportDeploymentPlannedResponse
	(*ReportDeploymentStatusChangedRequest)(nil),                // 24: grpc.service.pipedservice.ReportDeploymentStatusChangedRequest
	(*ReportDeploymentStatusChangedResponse)(nil),               // 25: grpc.service.pipedservice.ReportDeploymentStatusChangedResponse
	(*ReportDeploymentCompletedRequest)(nil),                    // 26: grpc.service.pipedservice.ReportDeploymentCompletedRequest
	(*ReportDeploymentCompletedResponse)(nil),                   // 27: grpc.service.pipedservice.ReportDeploymentCompletedResponse
	(*SaveDeploymentMetadataRequest)(nil),                       // 28: grpc.service.pipedservice.SaveDeploymentMetadataRequest
	(*SaveDeploymentMetadataResponse)(nil),                      // 29: grpc.service.pipedservice.SaveDeploymentMetadataResponse
	(*SaveStageMetadataRequest)(nil),                            // 30: grpc.service.pipedservice.SaveStageMetadataRequest
	(*SaveStageMetadataResponse)(nil),                           // 31: grpc.service.pipedservice.SaveStageMetadataResponse
	(*ReportStageLogsRequest)(nil),                              // 32: grpc.service.pipedservice.ReportStageLogsRequest
	(*ReportStageLogsResponse)(nil),                             // 33: grpc.service.pipedservice.ReportStageLogsResponse
	(*ReportStageLogsFromLastCheckpointRequest)(nil),            // 34: grpc.service.pipedservice.ReportStageLogsFromLastCheckpointRequest
	(*ReportStageLogsFromLastCheckpointResponse)(nil),           // 35: grpc.service.pipedservice.ReportStageLogsFromLastCheckpointResponse
	(*ReportStageStatusChangedRequest)(nil),                     // 36: grpc.service.pipedservice.ReportStageStatusChangedRequest
	(*ReportStageStatusChangedResponse)(nil),                    // 37: grpc.service.pipedservice.ReportStageStatusChangedResponse
	(*ListUnhandledCommandsRequest)(nil),                        // 38: grpc.service.pipedservice.ListUnhandledCommandsRequest
	(*ListUnhandledCommandsResponse)(nil),                       // 39: grpc.service.pipedservice.ListUnhandledCommandsResponse
	(*ReportCommandHandledRequest)(nil),                         // 40: grpc.service.pipedservice.ReportCommandHandledRequest
	(*ReportCommandHandledResponse)(nil),                        // 41: grpc.service.pipedservice.ReportCommandHandledResponse
	(*ReportApplicationLiveStateRequest)(nil),                   // 42: grpc.service.pipedservice.ReportApplicationLiveStateRequest
	(*ReportApplicationLiveStateResponse)(nil),                  // 43: grpc.service.pipedservice.ReportApplicationLiveStateResponse
	(*ReportApplicationLiveStateEventsRequest)(nil),             // 44: grpc.service.pipedservice.ReportApplicationLiveStateEventsRequest
	(*ReportApplicationLiveStateEventsResponse)(nil),            // 45: grpc.service.pipedservice.ReportApplicationLiveStateEventsResponse
	(*GetLatestEventRequest)(nil),                               // 46: grpc.service.pipedservice.GetLatestEventRequest
	(*GetLatestEventResponse)(nil),                              // 47: grpc.service.pipedservice.GetLatestEventResponse
	(*ListEventsRequest)(nil),                                   // 48: grpc.service.pipedservice.ListEventsRequest
	(*ListEventsResponse)(nil),                                  // 49: grpc.service.pipedservice.ListEventsResponse
	(*ReportEventsHandledRequest)(nil),                          // 50: grpc.service.pipedservice.ReportEventsHandledRequest
	(*ReportEventsHandledResponse)(nil),                         // 51: grpc.service.pipedservice.ReportEventsHandledResponse
	(*ReportEventStatusesRequest)(nil),                          // 52: grpc.service.pipedservice.ReportEventStatusesRequest
	(*ReportEventStatusesResponse)(nil),                         // 53: grpc.service.pipedservice.ReportEventStatusesResponse
	(*GetLatestAnalysisResultRequest)(nil),                      // 54: grpc.service.pipedservice.GetLatestAnalysisResultRequest
	(*GetLatestAnalysisResultResponse)(nil),                     // 55: grpc.service.pipedservice.GetLatestAnalysisResultResponse
	(*PutLatestAnalysisResultRequest)(nil),                      // 56: grpc.service.pipedservice.PutLatestAnalysisResultRequest
	(*PutLatestAnalysisResultResponse)(nil),                     // 57: grpc.service.pipedservice.PutLatestAnalysisResultResponse
	(*GetDesiredVersionRequest)(nil),                            // 58: grpc.service.pipedservice.GetDesiredVersionRequest
	(*GetDesiredVersionResponse)(nil),                           // 59: grpc.service.pipedservice.GetDesiredVersionResponse
	(*UpdateApplicationConfigurationsRequest)(nil),              // 60: grpc.service.pipedservice.UpdateApplicationConfigurationsRequest
	(*UpdateApplicationConfigurationsResponse)(nil),             // 61: grpc.service.pipedservice.UpdateApplicationConfigurationsResponse
	(*ReportUnregisteredApplicationConfigurationsRequest)(nil),  // 62: grpc.service.pipedservice.ReportUnregisteredApplicationConfigurationsRequest
	(*ReportUnregisteredApplicationConfigurationsResponse)(nil), // 63: grpc.service.pipedservice.ReportUnregisteredApplicationConfigurationsResponse
	(*CreateDeploymentChainRequest)(nil),                        // 64: grpc.service.pipedservice.CreateDeploymentChainRequest
	(*CreateDeploymentChainResponse)(nil),                       // 65: grpc.service.pipedservice.CreateDeploymentChainResponse
	(*InChainDeploymentPlannableRequest)(nil),                   // 66: grpc.service.pipedservice.InChainDeploymentPlannableRequest
	(*InChainDeploymentPlannableResponse)(nil),                  // 67: grpc.service.pipedservice.InChainDeploymentPlannableResponse
	nil,                                      // 68: grpc.service.pipedservice.ReportDeploymentCompletedRequest.StageStatusesEntry
	nil,                                      // 69: grpc.service.pipedservice.SaveDeploymentMetadataRequest.MetadataEntry
	nil,                                      // 70: grpc.service.pipedservice.SaveStageMetadataRequest.MetadataEntry
	nil,                                      // 71: grpc.service.pipedservice.ReportCommandHandledRequest.MetadataEntry
	nil,                                      // 72: grpc.service.pipedservice.GetLatestEventRequest.LabelsEntry
	(*ReportEventStatusesRequest_Event)(nil), // 73: grpc.service.pipedservice.ReportEventStatusesRequest.Event
	(*CreateDeploymentChainRequest_ApplicationMatcher)(nil), // 74: grpc.service.pipedservice.CreateDeploymentChainRequest.ApplicationMatcher
	nil,                                          // 75: grpc.service.pipedservice.CreateDeploymentChainRequest.ApplicationMatcher.LabelsEntry
	(*model.Piped_CloudProvider)(nil),            // 76: model.Piped.CloudProvider
	(*model.Piped_PlatformProvider)(nil),         // 77: model.Piped.PlatformProvider
	(*model.ApplicationGitRepository)(nil),       // 78: model.ApplicationGitRepository
	(*model.Piped_SecretEncryption)(nil),         // 79: model.Piped.SecretEncryption
	(*model.Application)(nil),                    // 80: model.Application
	(*model.ApplicationSyncState)(nil),           // 81: model.ApplicationSyncState
	(model.DeploymentStatus)(0),                  // 82: model.DeploymentStatus
	(*model.ApplicationDeploymentReference)(nil), // 83: model.ApplicationDeploymentReference
	(*model.Deployment)(nil),                     // 84: model.Deployment
	(*model.ArtifactVersion)(nil),                // 85: model.ArtifactVersion
	(*model.PipelineStage)(nil),                  // 86: model.PipelineStage
	(*model.LogBlock)(nil),                       // 87: model.LogBlock
	(model.StageStatus)(0),                       // 88: model.StageStatus
	(*model.Command)(nil),                        // 89: model.Command
	(model.CommandStatus)(0),                     // 90: model.CommandStatus
	(*model.ApplicationLiveStateSnapshot)(nil),   // 91: model.ApplicationLiveStateSnapshot
	(*model.KubernetesResourceStateEvent)(nil),   // 92: model.KubernetesResourceStateEvent
	(*model.Event)(nil),                          // 93: model.Event
	(*model.AnalysisResult)(nil),                 // 94: model.AnalysisResult
	(*model.ApplicationInfo)(nil),                // 95: model.ApplicationInfo
	(model.EventStatus)(0),                       // 96: model.EventStatus
}
var file_pkg_app_server_service_pipedservice_service_proto_depIdxs = []int32{
	76, // 0: grpc.service.pipedservice.ReportPipedMetaRequest.cloud_providers:type_name -> model.Piped.CloudProvider
	77, // 1: grpc.service.pipedservice.ReportPipedMetaRequest.platform_providers:type_name -> model.Piped.PlatformProvider
	78, // 2: grpc.service.pipedservice.ReportPipedMetaRequest.repositories:type_name -> model.ApplicationGitRepository
	79, // 3: grpc.service.pipedservice.ReportPipedMetaRequest.secret_encryption:type_name -> model.Piped.SecretEncryption
	80, // 4: grpc.service.pipedservice.ListApplicationsResponse.applications:type_name -> model.Application
	81, // 5: grpc.service.pipedservice.ReportApplicationSyncStateRequest.state:type_name -> model.ApplicationSyncState
	82, // 6: grpc.service.pipedservice.ReportApplicationMostRecentDeploymentRequest.status:type_name -> model.DeploymentStatus
	83, // 7: grpc.service.pipedservice.ReportApplicationMostRecentDeploymentRequest.deployment:type_name -> model.ApplicationDeploymentReference
	82, // 8: grpc.service.pipedservice.GetApplicationMostRecentDeploymentRequest.status:type_name -> model.DeploymentStatus
	83, // 9: grpc.service.pipedservice.GetApplicationMostRecentDeploymentResponse.deployment:type_name -> model.ApplicationDeploymentReference
	84, // 10: grpc.service.pipedservice.GetDeploymentResponse.deployment:type_name -> model.Deployment
	84, // 11: grpc.service.pipedservice.ListNotCompletedDeploymentsResponse.deployments:type_name -> model.Deployment
	84, // 12: grpc.service.pipedservice.CreateDeploymentRequest.deployment:type_name -> model.Deployment
	85, // 13: grpc.service.pipedservice.ReportDeploymentPlannedRequest.versions:type_name -> model.ArtifactVersion
	86, // 14: grpc.service.pipedservice.ReportDeploymentPlannedRequest.stages:type_name -> model.PipelineStage
	82, // 15: grpc.service.pipedservice.ReportDeploymentStatusChangedRequest.status:type_name -> model.DeploymentStatus
	82, // 16: grpc.service.pipedservice.ReportDeploymentCompletedRequest.status:type_name -> model.DeploymentStatus
	68, // 17: grpc.service.pipedservice.ReportDeploymentCompletedRequest.stage_statuses:type_name -> grpc.service.pipedservice.ReportDeploymentCompletedRequest.StageStatusesEntry
	69, // 18: grpc.service.pipedservice.SaveDeploymentMetadataRequest.metadata:type_name -> grpc.service.pipedservice.SaveDeploymentMetadataRequest.MetadataEntry
	70, // 19: grpc.service.pipedservice.SaveStageMetadataRequest.metadata:type_name -> grpc.service.pipedservice.SaveStageMetadataRequest.MetadataEntry
	87, // 20: grpc.service.pipedservice.ReportStageLogsRequest.blocks:type_name -> model.LogBlock
	87, // 21: grpc.service.pipedservice.ReportStageLogsFromLastCheckpointRequest.blocks:type_name -> model.LogBlock
	88, // 22: grpc.service.pipedservice.ReportStageStatusChangedRequest.status:type_name -> model.StageStatus
	89, // 23: grpc.service.pipedservice.ListUnhandledCommandsResponse.commands:type_name -> model.Command
	90, // 24: grpc.service.pipedservice.ReportCommandHandledRequest.status:type_name -> model.CommandStatus
	71, // 25: grpc.service.pipedservice.ReportCommandHandledRequest.metadata:type_name -> grpc.service.pipedservice.ReportCommandHandledRequest.MetadataEntry
	91, // 26: grpc.service.pipedservice.ReportApplicationLiveStateRequest.snapshot:type_name -> model.ApplicationLiveStateSnapshot
	92, // 27: grpc.service.pipedservice.ReportApplicationLiveStateEventsRequest.kubernetes_events:type_name -> model.KubernetesResourceStateEvent
	72, // 28: grpc.service.pipedservice.GetLatestEventRequest.labels:type_name -> grpc.service.pipedservice.GetLatestEventRequest.LabelsEntry
	93, // 29: grpc.service.pipedservice.GetLatestEventResponse.event:type_name -> model.Event
	0,  // 30: grpc.service.pipedservice.ListEventsRequest.order:type_name -> grpc.service.pipedservice.ListOrder
	1,  // 31: grpc.service.pipedservice.ListEventsRequest.status:type_name -> grpc.service.pipedservice.ListEventsRequest.Status
	93, // 32: grpc.service.pipedservice.ListEventsResponse.events:type_name -> model.Event
	73, // 33: grpc.service.pipedservice.ReportEventStatusesRequest.events:type_name -> grpc.service.pipedservice.ReportEventStatusesRequest.Event
	94, // 34: grpc.service.pipedservice.GetLatestAnalysisResultResponse.analysis_result:type_name -> model.AnalysisResult
	94, // 35: grpc.service.pipedservice.PutLatestAnalysisResultRequest.analysis_result:type_name -> model.AnalysisResult
	95, // 36: grpc.service.pipedservice.UpdateApplicationConfigurationsRequest.applications:type_name -> model.ApplicationInfo
	95, // 37: grpc.service.pipedservice.ReportUnregisteredApplicationConfigurationsRequest.applications:type_name -> model.ApplicationInfo
	84, // 38: grpc.service.pipedservice.CreateDeploymentChainRequest.first_deployment:type_name -> model.Deployment
	74, // 39: grpc.service.pipedservice.CreateDeploymentChainRequest.matchers:type_name -> grpc.service.pipedservice.CreateDeploymentChainRequest.ApplicationMatcher
	88, // 40: grpc.service.pipedservice.ReportDeploymentCompletedRequest.StageStatusesEntry.value:type_name -> model.StageStatus
	96, // 41: grpc.service.pipedservice.ReportEventStatusesRequest.Event.status:type_name -> model.EventStatus
	75, // 42: grpc.service.pipedservice.CreateDeploymentChainRequest.ApplicationMatcher.labels:type_name -> grpc.service.pipedservice.CreateDeploymentChainRequest.ApplicationMatcher.LabelsEntry
	2,  // 43: grpc.service.pipedservice.PipedService.ReportStat:input_type -> grpc.service.pipedservice.ReportStatRequest
	4,  // 44: grpc.service.pipedservice.PipedService.ReportPipedMeta:input_type -> grpc.service.pipedservice.ReportPipedMetaRequest
	6,  // 45: grpc.service.pipedservice.PipedService.ListApplications:input_type -> grpc.service.pipedservice.ListApplicationsRequest
	8,  // 46: grpc.service.pipedservice.PipedService.ReportApplicationSyncState:input_type -> grpc.service.pipedservice.ReportApplicationSyncStateRequest
	10, // 47: grpc.service.pipedservice.PipedService.ReportApplicationDeployingStatus:input_type -> grpc.service.pipedservice.ReportApplicationDeployingStatusRequest
	12, // 48: grpc.service.pipedservice.PipedService.ReportApplicationMostRecentDeployment:input_type -> grpc.service.pipedservice.ReportApplicationMostRecentDeploymentRequest
	14, // 49: grpc.service.pipedservice.PipedService.GetApplicationMostRecentDeployment:input_type -> grpc.service.pipedservice.GetApplicationMostRecentDeploymentRequest
	16, // 50: grpc.service.pipedservice.PipedService.GetDeployment:input_type -> grpc.service.pipedservice.GetDeploymentRequest
	18, // 51: grpc.service.pipedservice.PipedService.ListNotCompletedDeployments:input_type -> grpc.service.pipedservice.ListNotCompletedDeploymentsRequest
	20, // 52: grpc.service.pipedservice.PipedService.CreateDeployment:input_type -> grpc.service.pipedservice.CreateDeploymentRequest
	22, // 53: grpc.service.pipedservice.PipedService.ReportDeploymentPlanned:input_type -> grpc.service.pipedservice.ReportDeploymentPlannedRequest
	24, // 54: grpc.service.pipedservice.PipedService.ReportDeploymentStatusChanged:input_type -> grpc.service.pipedservice.ReportDeploymentStatusChangedRequest
	26, // 55: grpc.service.pipedservice.PipedService.ReportDeploymentCompleted:input_type -> grpc.service.pipedservice.ReportDeploymentCompletedRequest
	28, // 56: grpc.service.pipedservice.PipedService.SaveDeploymentMetadata:input_type -> grpc.service.pipedservice.SaveDeploymentMetadataRequest
	30, // 57: grpc.service.pipedservice.PipedService.SaveStageMetadata:input_type -> grpc.service.pipedservice.SaveStageMetadataRequest
	32, // 58: grpc.service.pipedservice.PipedService.ReportStageLogs:input_type -> grpc.service.pipedservice.ReportStageLogsRequest
	34, // 59: grpc.service.pipedservice.PipedService.ReportStageLogsFromLastCheckpoint:input_type -> grpc.service.pipedservice.ReportStageLogsFromLastCheckpointRequest
	36, // 60: grpc.service.pipedservice.PipedService.ReportStageStatusChanged:input_type -> grpc.service.pipedservice.ReportStageStatusChangedRequest
	38, // 61: grpc.service.pipedservice.PipedService.ListUnhandledCommands:input_type -> grpc.service.pipedservice.ListUnhandledCommandsRequest
	40, // 62: grpc.service.pipedservice.PipedService.ReportCommandHandled:input_type -> grpc.service.pipedservice.ReportCommandHandledRequest
	42, // 63: grpc.service.pipedservice.PipedService.ReportApplicationLiveState:input_type -> grpc.service.pipedservice.ReportApplicationLiveStateRequest
	44, // 64: grpc.service.pipedservice.PipedService.ReportApplicationLiveStateEvents:input_type -> grpc.service.pipedservice.ReportApplicationLiveStateEventsRequest
	46, // 65: grpc.service.pipedservice.PipedService.GetLatestEvent:input_type -> grpc.service.pipedservice.GetLatestEventRequest
	48, // 66: grpc.service.pipedservice.PipedService.ListEvents:input_type -> grpc.service.pipedservice.ListEventsRequest
	50, // 67: grpc.service.pipedservice.PipedService.ReportEventsHandled:input_type -> grpc.service.pipedservice.ReportEventsHandledRequest
	52, // 68: grpc.service.pipedservice.PipedService.ReportEventStatuses:input_type -> grpc.service.pipedservice.ReportEventStatusesRequest
	54, // 69: grpc.service.pipedservice.PipedService.GetLatestAnalysisResult:input_type -> grpc.service.pipedservice.GetLatestAnalysisResultRequest
	56, // 70: grpc.service.pipedservice.PipedService.PutLatestAnalysisResult:input_type -> grpc.service.pipedservice.PutLatestAnalysisResultRequest
	58, // 71: grpc.service.pipedservice.PipedService.GetDesiredVersion:input_type -> grpc.service.pipedservice.GetDesiredVersionRequest
	60, // 72: grpc.service.pipedservice.PipedService.UpdateApplicationConfigurations:input_type -> grpc.service.pipedservice.UpdateApplicationConfigurationsRequest
	62, // 73: grpc.service.pipedservice.PipedService.ReportUnregisteredApplicationConfigurations:input_type -> grpc.service.pipedservice.ReportUnregisteredApplicationConfigurationsRequest
	64, // 74: grpc.service.pipedservice.PipedService.CreateDeploymentChain:input_type -> grpc.service.pipedservice.CreateDeploymentChainRequest
	66, // 75: grpc.service.pipedservice.PipedService.InChainDeploymentPlannable:input_type -> grpc.service.pipedservice.InChainDeploymentPlannableRequest
	3,  // 76: grpc.service.pipedservice.PipedService.ReportStat:output_type -> grpc.service.pipedservice.ReportStatResponse
	5,  // 77: grpc.service.pipedservice.PipedService.ReportPipedMeta:output_type -> grpc.service.pipedservice.ReportPipedMetaResponse
	7,  // 78: grpc.service.pipedservice.PipedService.ListApplications:output_type -> grpc.service.pipedservice.ListApplicationsResponse
	9,  // 79: grpc.service.pipedservice.PipedService.ReportApplicationSyncState:output_type -> grpc.service.pipedservice.ReportApplicationSyncStateResponse
	11, // 80: grpc.service.pipedservice.PipedService.ReportApplicationDeployingStatus:output_type -> grpc.service.pipedservice.ReportApplicationDeployingStatusResponse
	13, // 81: grpc.service.pipedservice.PipedService.ReportApplicationMostRecentDeployment:output_type -> grpc.service.pipedservice.ReportApplicationMostRecentDeploymentResponse
	15, // 82: grpc.service.pipedservice.PipedService.GetApplicationMostRecentDeployment:output_type -> grpc.service.pipedservice.GetApplicationMostRecentDeploymentResponse
	17, // 83: grpc.service.pipedservice.PipedService.GetDeployment:output_type -> grpc.service.pipedservice.GetDeploymentResponse
	19, // 84: grpc.service.pipedservice.PipedService.ListNotCompletedDeployments:output_type -> grpc.service.pipedservice.ListNotCompletedDeploymentsResponse
	21, // 85: grpc.service.pipedservice.PipedService.CreateDeployment:output_type -> grpc.service.pipedservice.CreateDeploymentResponse
	23, // 86: grpc.service.pipedservice.PipedService.ReportDeploymentPlanned:output_type -> grpc.service.pipedservice.ReportDeploymentPlannedResponse
	25, // 87: grpc.service.pipedservice.PipedService.ReportDeploymentStatusChanged:output_type -> grpc.service.pipedservice.ReportDeploymentStatusChangedResponse
	27, // 88: grpc.service.pipedservice.PipedService.ReportDeploymentCompleted:output_type -> grpc.service.pipedservice.ReportDeploymentCompletedResponse
	29, // 89: grpc.service.pipedservice.PipedService.SaveDeploymentMetadata:output_type -> grpc.service.pipedservice.SaveDeploymentMetadataResponse
	31, // 90: grpc.service.pipedservice.PipedService.SaveStageMetadata:output_type -> grpc.service.pipedservice.SaveStageMetadataResponse
	33, // 91: grpc.service.pipedservice.PipedService.ReportStageLogs:output_type -> grpc.service.pipedservice.ReportStageLogsResponse
	35, // 92: grpc.service.pipedservice.PipedService.ReportStageLogsFromLastCheckpoint:output_type -> grpc.service.pipedservice.ReportStageLogsFromLastCheckpointResponse
	37, // 93: grpc.service.pipedservice.PipedService.ReportStageStatusChanged:output_type -> grpc.service.pipedservice.ReportStageStatusChangedResponse
	39, // 94: grpc.service.pipedservice.PipedService.ListUnhandledCommands:output_type -> grpc.service.pipedservice.ListUnhandledCommandsResponse
	41, // 95: grpc.service.pipedservice.PipedService.ReportCommandHandled:output_type -> grpc.service.pipedservice.ReportCommandHandledResponse
	43, // 96: grpc.service.pipedservice.PipedService.ReportApplicationLiveState:output_type -> grpc.service.pipedservice.ReportApplicationLiveStateResponse
	45, // 97: grpc.service.pipedservice.PipedService.ReportApplicationLiveStateEvents:output_type -> grpc.service.pipedservice.ReportApplicationLiveStateEventsResponse
	47, // 98: grpc.service.pipedservice.PipedService.GetLatestEvent:output_type -> grpc.service.pipedservice.GetLatestEventResponse
	49, // 99: grpc.service.pipedservice.PipedService.ListEvents:output_type -> grpc.service.pipedservice.ListEventsResponse
	51, // 100: grpc.service.pipedservice.PipedService.ReportEventsHandled:output_type -> grpc.service.pipedservice.ReportEventsHandledResponse
	53, // 101: grpc.service.pipedservice.PipedService.ReportEventStatuses:output_type -> grpc.service.pipedservice.ReportEventStatusesResponse
	55, // 102: grpc.service.pipedservice.PipedService.GetLatestAnalysisResult:output_type -> grpc.service.pipedservice.GetLatestAnalysisResultResponse
	57, // 103: grpc.service.pipedservice.PipedService.PutLatestAnalysisResult:output_type -> grpc.service.pipedservice.PutLatestAnalysisResultResponse
	59, // 104: grpc.service.pipedservice.PipedService.GetDesiredVersion:output_type -> grpc.service.pipedservice.GetDesiredVersionResponse
	61, // 105: grpc.service.pipedservice.PipedService.UpdateApplicationConfigurations:output_type -> grpc.service.pipedservice.UpdateApplicationConfigurationsResponse
	63, // 106: grpc.service.pipedservice.PipedService.ReportUnregisteredApplicationConfigurations:output_type -> grpc.service.pipedservice.ReportUnregisteredApplicationConfigurationsResponse
	65, // 107: grpc.service.pipedservice.PipedService.CreateDeploymentChain:output_type -> grpc.service.pipedservice.CreateDeploymentChainResponse
	67, // 108: grpc.service.pipedservice.PipedService.InChainDeploymentPlannable:output_type -> grpc.service.pipedservice.InChainDeploymentPlannableResponse
	76, // [76:109] is the sub-list for method output_type
	43, // [43:76] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_pkg_app_server_service_pipedservice_service_proto_init() }
func file_pkg_app_server_service_pipedservice_service_proto_init() {
	if File_pkg_app_server_service_pipedservice_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportPipedMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportPipedMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListApplicationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationSyncStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationSyncStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationDeployingStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationDeployingStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationMostRecentDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationMostRecentDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationMostRecentDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplicationMostRecentDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotCompletedDeploymentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNotCompletedDeploymentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeploymentPlannedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeploymentPlannedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeploymentStatusChangedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeploymentStatusChangedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeploymentCompletedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportDeploymentCompletedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDeploymentMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveDeploymentMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveStageMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveStageMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStageLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStageLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStageLogsFromLastCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStageLogsFromLastCheckpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStageStatusChangedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportStageStatusChangedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnhandledCommandsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUnhandledCommandsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCommandHandledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCommandHandledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationLiveStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationLiveStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationLiveStateEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportApplicationLiveStateEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventsHandledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventsHandledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventStatusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestAnalysisResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestAnalysisResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutLatestAnalysisResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutLatestAnalysisResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDesiredVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationConfigurationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateApplicationConfigurationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportUnregisteredApplicationConfigurationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportUnregisteredApplicationConfigurationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InChainDeploymentPlannableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InChainDeploymentPlannableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventStatusesRequest_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_app_server_service_pipedservice_service_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeploymentChainRequest_ApplicationMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_app_server_service_pipedservice_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_app_server_service_pipedservice_service_proto_goTypes,
		DependencyIndexes: file_pkg_app_server_service_pipedservice_service_proto_depIdxs,
		EnumInfos:         file_pkg_app_server_service_pipedservice_service_proto_enumTypes,
		MessageInfos:      file_pkg_app_server_service_pipedservice_service_proto_msgTypes,
	}.Build()
	File_pkg_app_server_service_pipedservice_service_proto = out.File
	file_pkg_app_server_service_pipedservice_service_proto_rawDesc = nil
	file_pkg_app_server_service_pipedservice_service_proto_goTypes = nil
	file_pkg_app_server_service_pipedservice_service_proto_depIdxs = nil
}
