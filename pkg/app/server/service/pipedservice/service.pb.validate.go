// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/app/server/service/pipedservice/service.proto

package pipedservice

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	model "github.com/pipe-cd/pipecd/pkg/model"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = model.DeploymentStatus(0)
)

// Validate checks the field values on ReportStatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReportStatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportStatRequestMultiError, or nil if none found.
func (m *ReportStatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PipedStats

	if len(errors) > 0 {
		return ReportStatRequestMultiError(errors)
	}

	return nil
}

// ReportStatRequestMultiError is an error wrapping multiple validation errors
// returned by ReportStatRequest.ValidateAll() if the designated constraints
// aren't met.
type ReportStatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStatRequestMultiError) AllErrors() []error { return m }

// ReportStatRequestValidationError is the validation error returned by
// ReportStatRequest.Validate if the designated constraints aren't met.
type ReportStatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStatRequestValidationError) ErrorName() string {
	return "ReportStatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStatRequestValidationError{}

// Validate checks the field values on ReportStatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportStatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportStatResponseMultiError, or nil if none found.
func (m *ReportStatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReportInterval

	if len(errors) > 0 {
		return ReportStatResponseMultiError(errors)
	}

	return nil
}

// ReportStatResponseMultiError is an error wrapping multiple validation errors
// returned by ReportStatResponse.ValidateAll() if the designated constraints
// aren't met.
type ReportStatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStatResponseMultiError) AllErrors() []error { return m }

// ReportStatResponseValidationError is the validation error returned by
// ReportStatResponse.Validate if the designated constraints aren't met.
type ReportStatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStatResponseValidationError) ErrorName() string {
	return "ReportStatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStatResponseValidationError{}

// Validate checks the field values on ReportPipedMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportPipedMetaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportPipedMetaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportPipedMetaRequestMultiError, or nil if none found.
func (m *ReportPipedMetaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportPipedMetaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	for idx, item := range m.GetCloudProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportPipedMetaRequestValidationError{
						field:  fmt.Sprintf("CloudProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportPipedMetaRequestValidationError{
						field:  fmt.Sprintf("CloudProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportPipedMetaRequestValidationError{
					field:  fmt.Sprintf("CloudProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPlatformProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportPipedMetaRequestValidationError{
						field:  fmt.Sprintf("PlatformProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportPipedMetaRequestValidationError{
						field:  fmt.Sprintf("PlatformProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportPipedMetaRequestValidationError{
					field:  fmt.Sprintf("PlatformProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRepositories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportPipedMetaRequestValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportPipedMetaRequestValidationError{
						field:  fmt.Sprintf("Repositories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportPipedMetaRequestValidationError{
					field:  fmt.Sprintf("Repositories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSecretEncryption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportPipedMetaRequestValidationError{
					field:  "SecretEncryption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportPipedMetaRequestValidationError{
					field:  "SecretEncryption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSecretEncryption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportPipedMetaRequestValidationError{
				field:  "SecretEncryption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Config

	if len(errors) > 0 {
		return ReportPipedMetaRequestMultiError(errors)
	}

	return nil
}

// ReportPipedMetaRequestMultiError is an error wrapping multiple validation
// errors returned by ReportPipedMetaRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportPipedMetaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportPipedMetaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportPipedMetaRequestMultiError) AllErrors() []error { return m }

// ReportPipedMetaRequestValidationError is the validation error returned by
// ReportPipedMetaRequest.Validate if the designated constraints aren't met.
type ReportPipedMetaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportPipedMetaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportPipedMetaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportPipedMetaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportPipedMetaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportPipedMetaRequestValidationError) ErrorName() string {
	return "ReportPipedMetaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportPipedMetaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportPipedMetaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportPipedMetaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportPipedMetaRequestValidationError{}

// Validate checks the field values on ReportPipedMetaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportPipedMetaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportPipedMetaResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportPipedMetaResponseMultiError, or nil if none found.
func (m *ReportPipedMetaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportPipedMetaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ReportPipedMetaResponseValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for WebBaseUrl

	if len(errors) > 0 {
		return ReportPipedMetaResponseMultiError(errors)
	}

	return nil
}

// ReportPipedMetaResponseMultiError is an error wrapping multiple validation
// errors returned by ReportPipedMetaResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportPipedMetaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportPipedMetaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportPipedMetaResponseMultiError) AllErrors() []error { return m }

// ReportPipedMetaResponseValidationError is the validation error returned by
// ReportPipedMetaResponse.Validate if the designated constraints aren't met.
type ReportPipedMetaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportPipedMetaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportPipedMetaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportPipedMetaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportPipedMetaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportPipedMetaResponseValidationError) ErrorName() string {
	return "ReportPipedMetaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportPipedMetaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportPipedMetaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportPipedMetaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportPipedMetaResponseValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsRequestMultiError, or nil if none found.
func (m *ListApplicationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListApplicationsRequestMultiError(errors)
	}

	return nil
}

// ListApplicationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsRequestMultiError) AllErrors() []error { return m }

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListApplicationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListApplicationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListApplicationsResponseMultiError, or nil if none found.
func (m *ListApplicationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListApplicationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListApplicationsResponseMultiError(errors)
	}

	return nil
}

// ListApplicationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListApplicationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListApplicationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListApplicationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListApplicationsResponseMultiError) AllErrors() []error { return m }

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on ReportApplicationSyncStateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReportApplicationSyncStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportApplicationSyncStateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReportApplicationSyncStateRequestMultiError, or nil if none found.
func (m *ReportApplicationSyncStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationSyncStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := ReportApplicationSyncStateRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetState() == nil {
		err := ReportApplicationSyncStateRequestValidationError{
			field:  "State",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportApplicationSyncStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportApplicationSyncStateRequestValidationError{
					field:  "State",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportApplicationSyncStateRequestValidationError{
				field:  "State",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportApplicationSyncStateRequestMultiError(errors)
	}

	return nil
}

// ReportApplicationSyncStateRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReportApplicationSyncStateRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportApplicationSyncStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationSyncStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationSyncStateRequestMultiError) AllErrors() []error { return m }

// ReportApplicationSyncStateRequestValidationError is the validation error
// returned by ReportApplicationSyncStateRequest.Validate if the designated
// constraints aren't met.
type ReportApplicationSyncStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationSyncStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationSyncStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationSyncStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationSyncStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationSyncStateRequestValidationError) ErrorName() string {
	return "ReportApplicationSyncStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationSyncStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationSyncStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationSyncStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationSyncStateRequestValidationError{}

// Validate checks the field values on ReportApplicationSyncStateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReportApplicationSyncStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportApplicationSyncStateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReportApplicationSyncStateResponseMultiError, or nil if none found.
func (m *ReportApplicationSyncStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationSyncStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportApplicationSyncStateResponseMultiError(errors)
	}

	return nil
}

// ReportApplicationSyncStateResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReportApplicationSyncStateResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportApplicationSyncStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationSyncStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationSyncStateResponseMultiError) AllErrors() []error { return m }

// ReportApplicationSyncStateResponseValidationError is the validation error
// returned by ReportApplicationSyncStateResponse.Validate if the designated
// constraints aren't met.
type ReportApplicationSyncStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationSyncStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationSyncStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationSyncStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationSyncStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationSyncStateResponseValidationError) ErrorName() string {
	return "ReportApplicationSyncStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationSyncStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationSyncStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationSyncStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationSyncStateResponseValidationError{}

// Validate checks the field values on ReportApplicationDeployingStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReportApplicationDeployingStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportApplicationDeployingStatusRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ReportApplicationDeployingStatusRequestMultiError, or nil if none found.
func (m *ReportApplicationDeployingStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationDeployingStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := ReportApplicationDeployingStatusRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Deploying

	if len(errors) > 0 {
		return ReportApplicationDeployingStatusRequestMultiError(errors)
	}

	return nil
}

// ReportApplicationDeployingStatusRequestMultiError is an error wrapping
// multiple validation errors returned by
// ReportApplicationDeployingStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportApplicationDeployingStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationDeployingStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationDeployingStatusRequestMultiError) AllErrors() []error { return m }

// ReportApplicationDeployingStatusRequestValidationError is the validation
// error returned by ReportApplicationDeployingStatusRequest.Validate if the
// designated constraints aren't met.
type ReportApplicationDeployingStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationDeployingStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationDeployingStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationDeployingStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationDeployingStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationDeployingStatusRequestValidationError) ErrorName() string {
	return "ReportApplicationDeployingStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationDeployingStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationDeployingStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationDeployingStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationDeployingStatusRequestValidationError{}

// Validate checks the field values on ReportApplicationDeployingStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReportApplicationDeployingStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportApplicationDeployingStatusResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ReportApplicationDeployingStatusResponseMultiError, or nil if none found.
func (m *ReportApplicationDeployingStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationDeployingStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportApplicationDeployingStatusResponseMultiError(errors)
	}

	return nil
}

// ReportApplicationDeployingStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// ReportApplicationDeployingStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportApplicationDeployingStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationDeployingStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationDeployingStatusResponseMultiError) AllErrors() []error { return m }

// ReportApplicationDeployingStatusResponseValidationError is the validation
// error returned by ReportApplicationDeployingStatusResponse.Validate if the
// designated constraints aren't met.
type ReportApplicationDeployingStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationDeployingStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationDeployingStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationDeployingStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationDeployingStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationDeployingStatusResponseValidationError) ErrorName() string {
	return "ReportApplicationDeployingStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationDeployingStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationDeployingStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationDeployingStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationDeployingStatusResponseValidationError{}

// Validate checks the field values on
// ReportApplicationMostRecentDeploymentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportApplicationMostRecentDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportApplicationMostRecentDeploymentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ReportApplicationMostRecentDeploymentRequestMultiError, or nil if none found.
func (m *ReportApplicationMostRecentDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationMostRecentDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := ReportApplicationMostRecentDeploymentRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.DeploymentStatus_name[int32(m.GetStatus())]; !ok {
		err := ReportApplicationMostRecentDeploymentRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDeployment() == nil {
		err := ReportApplicationMostRecentDeploymentRequestValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportApplicationMostRecentDeploymentRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportApplicationMostRecentDeploymentRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportApplicationMostRecentDeploymentRequestValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportApplicationMostRecentDeploymentRequestMultiError(errors)
	}

	return nil
}

// ReportApplicationMostRecentDeploymentRequestMultiError is an error wrapping
// multiple validation errors returned by
// ReportApplicationMostRecentDeploymentRequest.ValidateAll() if the
// designated constraints aren't met.
type ReportApplicationMostRecentDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationMostRecentDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationMostRecentDeploymentRequestMultiError) AllErrors() []error { return m }

// ReportApplicationMostRecentDeploymentRequestValidationError is the
// validation error returned by
// ReportApplicationMostRecentDeploymentRequest.Validate if the designated
// constraints aren't met.
type ReportApplicationMostRecentDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationMostRecentDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationMostRecentDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationMostRecentDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationMostRecentDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationMostRecentDeploymentRequestValidationError) ErrorName() string {
	return "ReportApplicationMostRecentDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationMostRecentDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationMostRecentDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationMostRecentDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationMostRecentDeploymentRequestValidationError{}

// Validate checks the field values on
// ReportApplicationMostRecentDeploymentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportApplicationMostRecentDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportApplicationMostRecentDeploymentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ReportApplicationMostRecentDeploymentResponseMultiError, or nil if none found.
func (m *ReportApplicationMostRecentDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationMostRecentDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportApplicationMostRecentDeploymentResponseMultiError(errors)
	}

	return nil
}

// ReportApplicationMostRecentDeploymentResponseMultiError is an error wrapping
// multiple validation errors returned by
// ReportApplicationMostRecentDeploymentResponse.ValidateAll() if the
// designated constraints aren't met.
type ReportApplicationMostRecentDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationMostRecentDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationMostRecentDeploymentResponseMultiError) AllErrors() []error { return m }

// ReportApplicationMostRecentDeploymentResponseValidationError is the
// validation error returned by
// ReportApplicationMostRecentDeploymentResponse.Validate if the designated
// constraints aren't met.
type ReportApplicationMostRecentDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationMostRecentDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationMostRecentDeploymentResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ReportApplicationMostRecentDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationMostRecentDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationMostRecentDeploymentResponseValidationError) ErrorName() string {
	return "ReportApplicationMostRecentDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationMostRecentDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationMostRecentDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationMostRecentDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationMostRecentDeploymentResponseValidationError{}

// Validate checks the field values on
// GetApplicationMostRecentDeploymentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApplicationMostRecentDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetApplicationMostRecentDeploymentRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetApplicationMostRecentDeploymentRequestMultiError, or nil if none found.
func (m *GetApplicationMostRecentDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationMostRecentDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := GetApplicationMostRecentDeploymentRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.DeploymentStatus_name[int32(m.GetStatus())]; !ok {
		err := GetApplicationMostRecentDeploymentRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetApplicationMostRecentDeploymentRequestMultiError(errors)
	}

	return nil
}

// GetApplicationMostRecentDeploymentRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetApplicationMostRecentDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationMostRecentDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationMostRecentDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationMostRecentDeploymentRequestMultiError) AllErrors() []error { return m }

// GetApplicationMostRecentDeploymentRequestValidationError is the validation
// error returned by GetApplicationMostRecentDeploymentRequest.Validate if the
// designated constraints aren't met.
type GetApplicationMostRecentDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationMostRecentDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationMostRecentDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationMostRecentDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationMostRecentDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationMostRecentDeploymentRequestValidationError) ErrorName() string {
	return "GetApplicationMostRecentDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationMostRecentDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationMostRecentDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationMostRecentDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationMostRecentDeploymentRequestValidationError{}

// Validate checks the field values on
// GetApplicationMostRecentDeploymentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetApplicationMostRecentDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetApplicationMostRecentDeploymentResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetApplicationMostRecentDeploymentResponseMultiError, or nil if none found.
func (m *GetApplicationMostRecentDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetApplicationMostRecentDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := GetApplicationMostRecentDeploymentResponseValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetApplicationMostRecentDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetApplicationMostRecentDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetApplicationMostRecentDeploymentResponseValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetApplicationMostRecentDeploymentResponseMultiError(errors)
	}

	return nil
}

// GetApplicationMostRecentDeploymentResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetApplicationMostRecentDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetApplicationMostRecentDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetApplicationMostRecentDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetApplicationMostRecentDeploymentResponseMultiError) AllErrors() []error { return m }

// GetApplicationMostRecentDeploymentResponseValidationError is the validation
// error returned by GetApplicationMostRecentDeploymentResponse.Validate if
// the designated constraints aren't met.
type GetApplicationMostRecentDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationMostRecentDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationMostRecentDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationMostRecentDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationMostRecentDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationMostRecentDeploymentResponseValidationError) ErrorName() string {
	return "GetApplicationMostRecentDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationMostRecentDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationMostRecentDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationMostRecentDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationMostRecentDeploymentResponseValidationError{}

// Validate checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentRequestMultiError, or nil if none found.
func (m *GetDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetDeploymentRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDeploymentRequestMultiError(errors)
	}

	return nil
}

// GetDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentRequestMultiError) AllErrors() []error { return m }

// GetDeploymentRequestValidationError is the validation error returned by
// GetDeploymentRequest.Validate if the designated constraints aren't met.
type GetDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentRequestValidationError) ErrorName() string {
	return "GetDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentRequestValidationError{}

// Validate checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeploymentResponseMultiError, or nil if none found.
func (m *GetDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := GetDeploymentResponseValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDeploymentResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeploymentResponseValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDeploymentResponseMultiError(errors)
	}

	return nil
}

// GetDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeploymentResponseMultiError) AllErrors() []error { return m }

// GetDeploymentResponseValidationError is the validation error returned by
// GetDeploymentResponse.Validate if the designated constraints aren't met.
type GetDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentResponseValidationError) ErrorName() string {
	return "GetDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentResponseValidationError{}

// Validate checks the field values on ListNotCompletedDeploymentsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListNotCompletedDeploymentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotCompletedDeploymentsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListNotCompletedDeploymentsRequestMultiError, or nil if none found.
func (m *ListNotCompletedDeploymentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotCompletedDeploymentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListNotCompletedDeploymentsRequestMultiError(errors)
	}

	return nil
}

// ListNotCompletedDeploymentsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListNotCompletedDeploymentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNotCompletedDeploymentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotCompletedDeploymentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotCompletedDeploymentsRequestMultiError) AllErrors() []error { return m }

// ListNotCompletedDeploymentsRequestValidationError is the validation error
// returned by ListNotCompletedDeploymentsRequest.Validate if the designated
// constraints aren't met.
type ListNotCompletedDeploymentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotCompletedDeploymentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotCompletedDeploymentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotCompletedDeploymentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotCompletedDeploymentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotCompletedDeploymentsRequestValidationError) ErrorName() string {
	return "ListNotCompletedDeploymentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotCompletedDeploymentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotCompletedDeploymentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotCompletedDeploymentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotCompletedDeploymentsRequestValidationError{}

// Validate checks the field values on ListNotCompletedDeploymentsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListNotCompletedDeploymentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotCompletedDeploymentsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListNotCompletedDeploymentsResponseMultiError, or nil if none found.
func (m *ListNotCompletedDeploymentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotCompletedDeploymentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNotCompletedDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNotCompletedDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotCompletedDeploymentsResponseValidationError{
					field:  fmt.Sprintf("Deployments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListNotCompletedDeploymentsResponseMultiError(errors)
	}

	return nil
}

// ListNotCompletedDeploymentsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListNotCompletedDeploymentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListNotCompletedDeploymentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotCompletedDeploymentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotCompletedDeploymentsResponseMultiError) AllErrors() []error { return m }

// ListNotCompletedDeploymentsResponseValidationError is the validation error
// returned by ListNotCompletedDeploymentsResponse.Validate if the designated
// constraints aren't met.
type ListNotCompletedDeploymentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotCompletedDeploymentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotCompletedDeploymentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotCompletedDeploymentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotCompletedDeploymentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotCompletedDeploymentsResponseValidationError) ErrorName() string {
	return "ListNotCompletedDeploymentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotCompletedDeploymentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotCompletedDeploymentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotCompletedDeploymentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotCompletedDeploymentsResponseValidationError{}

// Validate checks the field values on CreateDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeploymentRequestMultiError, or nil if none found.
func (m *CreateDeploymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDeployment() == nil {
		err := CreateDeploymentRequestValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeploymentRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeploymentRequestValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeploymentRequestValidationError{
				field:  "Deployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDeploymentRequestMultiError(errors)
	}

	return nil
}

// CreateDeploymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDeploymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDeploymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentRequestMultiError) AllErrors() []error { return m }

// CreateDeploymentRequestValidationError is the validation error returned by
// CreateDeploymentRequest.Validate if the designated constraints aren't met.
type CreateDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentRequestValidationError) ErrorName() string {
	return "CreateDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentRequestValidationError{}

// Validate checks the field values on CreateDeploymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeploymentResponseMultiError, or nil if none found.
func (m *CreateDeploymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDeploymentResponseMultiError(errors)
	}

	return nil
}

// CreateDeploymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDeploymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDeploymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentResponseMultiError) AllErrors() []error { return m }

// CreateDeploymentResponseValidationError is the validation error returned by
// CreateDeploymentResponse.Validate if the designated constraints aren't met.
type CreateDeploymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentResponseValidationError) ErrorName() string {
	return "CreateDeploymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentResponseValidationError{}

// Validate checks the field values on ReportDeploymentPlannedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportDeploymentPlannedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportDeploymentPlannedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportDeploymentPlannedRequestMultiError, or nil if none found.
func (m *ReportDeploymentPlannedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportDeploymentPlannedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ReportDeploymentPlannedRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Summary

	// no validation rules for StatusReason

	// no validation rules for RunningCommitHash

	// no validation rules for RunningConfigFilename

	// no validation rules for Version

	for idx, item := range m.GetVersions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportDeploymentPlannedRequestValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportDeploymentPlannedRequestValidationError{
						field:  fmt.Sprintf("Versions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportDeploymentPlannedRequestValidationError{
					field:  fmt.Sprintf("Versions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportDeploymentPlannedRequestValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportDeploymentPlannedRequestValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportDeploymentPlannedRequestValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DeploymentChainId

	// no validation rules for DeploymentChainBlockIndex

	if len(errors) > 0 {
		return ReportDeploymentPlannedRequestMultiError(errors)
	}

	return nil
}

// ReportDeploymentPlannedRequestMultiError is an error wrapping multiple
// validation errors returned by ReportDeploymentPlannedRequest.ValidateAll()
// if the designated constraints aren't met.
type ReportDeploymentPlannedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportDeploymentPlannedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportDeploymentPlannedRequestMultiError) AllErrors() []error { return m }

// ReportDeploymentPlannedRequestValidationError is the validation error
// returned by ReportDeploymentPlannedRequest.Validate if the designated
// constraints aren't met.
type ReportDeploymentPlannedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportDeploymentPlannedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportDeploymentPlannedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportDeploymentPlannedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportDeploymentPlannedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportDeploymentPlannedRequestValidationError) ErrorName() string {
	return "ReportDeploymentPlannedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportDeploymentPlannedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportDeploymentPlannedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportDeploymentPlannedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportDeploymentPlannedRequestValidationError{}

// Validate checks the field values on ReportDeploymentPlannedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportDeploymentPlannedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportDeploymentPlannedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportDeploymentPlannedResponseMultiError, or nil if none found.
func (m *ReportDeploymentPlannedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportDeploymentPlannedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportDeploymentPlannedResponseMultiError(errors)
	}

	return nil
}

// ReportDeploymentPlannedResponseMultiError is an error wrapping multiple
// validation errors returned by ReportDeploymentPlannedResponse.ValidateAll()
// if the designated constraints aren't met.
type ReportDeploymentPlannedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportDeploymentPlannedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportDeploymentPlannedResponseMultiError) AllErrors() []error { return m }

// ReportDeploymentPlannedResponseValidationError is the validation error
// returned by ReportDeploymentPlannedResponse.Validate if the designated
// constraints aren't met.
type ReportDeploymentPlannedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportDeploymentPlannedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportDeploymentPlannedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportDeploymentPlannedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportDeploymentPlannedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportDeploymentPlannedResponseValidationError) ErrorName() string {
	return "ReportDeploymentPlannedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportDeploymentPlannedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportDeploymentPlannedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportDeploymentPlannedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportDeploymentPlannedResponseValidationError{}

// Validate checks the field values on ReportDeploymentStatusChangedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReportDeploymentStatusChangedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportDeploymentStatusChangedRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReportDeploymentStatusChangedRequestMultiError, or nil if none found.
func (m *ReportDeploymentStatusChangedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportDeploymentStatusChangedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ReportDeploymentStatusChangedRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ReportDeploymentStatusChangedRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := ReportDeploymentStatusChangedRequestValidationError{
			field:  "Status",
			reason: "value must be in list [2 3]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatusReason

	// no validation rules for DeploymentChainId

	// no validation rules for DeploymentChainBlockIndex

	if len(errors) > 0 {
		return ReportDeploymentStatusChangedRequestMultiError(errors)
	}

	return nil
}

// ReportDeploymentStatusChangedRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReportDeploymentStatusChangedRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportDeploymentStatusChangedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportDeploymentStatusChangedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportDeploymentStatusChangedRequestMultiError) AllErrors() []error { return m }

// ReportDeploymentStatusChangedRequestValidationError is the validation error
// returned by ReportDeploymentStatusChangedRequest.Validate if the designated
// constraints aren't met.
type ReportDeploymentStatusChangedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportDeploymentStatusChangedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportDeploymentStatusChangedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportDeploymentStatusChangedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportDeploymentStatusChangedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportDeploymentStatusChangedRequestValidationError) ErrorName() string {
	return "ReportDeploymentStatusChangedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportDeploymentStatusChangedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportDeploymentStatusChangedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportDeploymentStatusChangedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportDeploymentStatusChangedRequestValidationError{}

var _ReportDeploymentStatusChangedRequest_Status_InLookup = map[model.DeploymentStatus]struct{}{
	2: {},
	3: {},
}

// Validate checks the field values on ReportDeploymentStatusChangedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReportDeploymentStatusChangedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportDeploymentStatusChangedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReportDeploymentStatusChangedResponseMultiError, or nil if none found.
func (m *ReportDeploymentStatusChangedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportDeploymentStatusChangedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportDeploymentStatusChangedResponseMultiError(errors)
	}

	return nil
}

// ReportDeploymentStatusChangedResponseMultiError is an error wrapping
// multiple validation errors returned by
// ReportDeploymentStatusChangedResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportDeploymentStatusChangedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportDeploymentStatusChangedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportDeploymentStatusChangedResponseMultiError) AllErrors() []error { return m }

// ReportDeploymentStatusChangedResponseValidationError is the validation error
// returned by ReportDeploymentStatusChangedResponse.Validate if the
// designated constraints aren't met.
type ReportDeploymentStatusChangedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportDeploymentStatusChangedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportDeploymentStatusChangedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportDeploymentStatusChangedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportDeploymentStatusChangedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportDeploymentStatusChangedResponseValidationError) ErrorName() string {
	return "ReportDeploymentStatusChangedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportDeploymentStatusChangedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportDeploymentStatusChangedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportDeploymentStatusChangedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportDeploymentStatusChangedResponseValidationError{}

// Validate checks the field values on ReportDeploymentCompletedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReportDeploymentCompletedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportDeploymentCompletedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportDeploymentCompletedRequestMultiError, or nil if none found.
func (m *ReportDeploymentCompletedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportDeploymentCompletedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ReportDeploymentCompletedRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.DeploymentStatus_name[int32(m.GetStatus())]; !ok {
		err := ReportDeploymentCompletedRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatusReason

	// no validation rules for StageStatuses

	// no validation rules for DeploymentChainId

	// no validation rules for DeploymentChainBlockIndex

	if m.GetCompletedAt() <= 0 {
		err := ReportDeploymentCompletedRequestValidationError{
			field:  "CompletedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportDeploymentCompletedRequestMultiError(errors)
	}

	return nil
}

// ReportDeploymentCompletedRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReportDeploymentCompletedRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportDeploymentCompletedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportDeploymentCompletedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportDeploymentCompletedRequestMultiError) AllErrors() []error { return m }

// ReportDeploymentCompletedRequestValidationError is the validation error
// returned by ReportDeploymentCompletedRequest.Validate if the designated
// constraints aren't met.
type ReportDeploymentCompletedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportDeploymentCompletedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportDeploymentCompletedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportDeploymentCompletedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportDeploymentCompletedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportDeploymentCompletedRequestValidationError) ErrorName() string {
	return "ReportDeploymentCompletedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportDeploymentCompletedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportDeploymentCompletedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportDeploymentCompletedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportDeploymentCompletedRequestValidationError{}

// Validate checks the field values on ReportDeploymentCompletedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReportDeploymentCompletedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportDeploymentCompletedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReportDeploymentCompletedResponseMultiError, or nil if none found.
func (m *ReportDeploymentCompletedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportDeploymentCompletedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportDeploymentCompletedResponseMultiError(errors)
	}

	return nil
}

// ReportDeploymentCompletedResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReportDeploymentCompletedResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportDeploymentCompletedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportDeploymentCompletedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportDeploymentCompletedResponseMultiError) AllErrors() []error { return m }

// ReportDeploymentCompletedResponseValidationError is the validation error
// returned by ReportDeploymentCompletedResponse.Validate if the designated
// constraints aren't met.
type ReportDeploymentCompletedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportDeploymentCompletedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportDeploymentCompletedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportDeploymentCompletedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportDeploymentCompletedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportDeploymentCompletedResponseValidationError) ErrorName() string {
	return "ReportDeploymentCompletedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportDeploymentCompletedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportDeploymentCompletedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportDeploymentCompletedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportDeploymentCompletedResponseValidationError{}

// Validate checks the field values on SaveDeploymentMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveDeploymentMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDeploymentMetadataRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SaveDeploymentMetadataRequestMultiError, or nil if none found.
func (m *SaveDeploymentMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDeploymentMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := SaveDeploymentMetadataRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return SaveDeploymentMetadataRequestMultiError(errors)
	}

	return nil
}

// SaveDeploymentMetadataRequestMultiError is an error wrapping multiple
// validation errors returned by SaveDeploymentMetadataRequest.ValidateAll()
// if the designated constraints aren't met.
type SaveDeploymentMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDeploymentMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDeploymentMetadataRequestMultiError) AllErrors() []error { return m }

// SaveDeploymentMetadataRequestValidationError is the validation error
// returned by SaveDeploymentMetadataRequest.Validate if the designated
// constraints aren't met.
type SaveDeploymentMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDeploymentMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDeploymentMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDeploymentMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDeploymentMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDeploymentMetadataRequestValidationError) ErrorName() string {
	return "SaveDeploymentMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDeploymentMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDeploymentMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDeploymentMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDeploymentMetadataRequestValidationError{}

// Validate checks the field values on SaveDeploymentMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveDeploymentMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveDeploymentMetadataResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SaveDeploymentMetadataResponseMultiError, or nil if none found.
func (m *SaveDeploymentMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveDeploymentMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SaveDeploymentMetadataResponseMultiError(errors)
	}

	return nil
}

// SaveDeploymentMetadataResponseMultiError is an error wrapping multiple
// validation errors returned by SaveDeploymentMetadataResponse.ValidateAll()
// if the designated constraints aren't met.
type SaveDeploymentMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveDeploymentMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveDeploymentMetadataResponseMultiError) AllErrors() []error { return m }

// SaveDeploymentMetadataResponseValidationError is the validation error
// returned by SaveDeploymentMetadataResponse.Validate if the designated
// constraints aren't met.
type SaveDeploymentMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveDeploymentMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveDeploymentMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveDeploymentMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveDeploymentMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveDeploymentMetadataResponseValidationError) ErrorName() string {
	return "SaveDeploymentMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveDeploymentMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveDeploymentMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveDeploymentMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveDeploymentMetadataResponseValidationError{}

// Validate checks the field values on SaveStageMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveStageMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveStageMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveStageMetadataRequestMultiError, or nil if none found.
func (m *SaveStageMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveStageMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := SaveStageMetadataRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := SaveStageMetadataRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if len(errors) > 0 {
		return SaveStageMetadataRequestMultiError(errors)
	}

	return nil
}

// SaveStageMetadataRequestMultiError is an error wrapping multiple validation
// errors returned by SaveStageMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type SaveStageMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveStageMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveStageMetadataRequestMultiError) AllErrors() []error { return m }

// SaveStageMetadataRequestValidationError is the validation error returned by
// SaveStageMetadataRequest.Validate if the designated constraints aren't met.
type SaveStageMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveStageMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveStageMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveStageMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveStageMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveStageMetadataRequestValidationError) ErrorName() string {
	return "SaveStageMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveStageMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveStageMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveStageMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveStageMetadataRequestValidationError{}

// Validate checks the field values on SaveStageMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SaveStageMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveStageMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveStageMetadataResponseMultiError, or nil if none found.
func (m *SaveStageMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveStageMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SaveStageMetadataResponseMultiError(errors)
	}

	return nil
}

// SaveStageMetadataResponseMultiError is an error wrapping multiple validation
// errors returned by SaveStageMetadataResponse.ValidateAll() if the
// designated constraints aren't met.
type SaveStageMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveStageMetadataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveStageMetadataResponseMultiError) AllErrors() []error { return m }

// SaveStageMetadataResponseValidationError is the validation error returned by
// SaveStageMetadataResponse.Validate if the designated constraints aren't met.
type SaveStageMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveStageMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveStageMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveStageMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveStageMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveStageMetadataResponseValidationError) ErrorName() string {
	return "SaveStageMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveStageMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveStageMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveStageMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveStageMetadataResponseValidationError{}

// Validate checks the field values on ReportStageLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportStageLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStageLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportStageLogsRequestMultiError, or nil if none found.
func (m *ReportStageLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ReportStageLogsRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := ReportStageLogsRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RetriedCount

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportStageLogsRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportStageLogsRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportStageLogsRequestValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportStageLogsRequestMultiError(errors)
	}

	return nil
}

// ReportStageLogsRequestMultiError is an error wrapping multiple validation
// errors returned by ReportStageLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportStageLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageLogsRequestMultiError) AllErrors() []error { return m }

// ReportStageLogsRequestValidationError is the validation error returned by
// ReportStageLogsRequest.Validate if the designated constraints aren't met.
type ReportStageLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageLogsRequestValidationError) ErrorName() string {
	return "ReportStageLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageLogsRequestValidationError{}

// Validate checks the field values on ReportStageLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportStageLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStageLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportStageLogsResponseMultiError, or nil if none found.
func (m *ReportStageLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportStageLogsResponseMultiError(errors)
	}

	return nil
}

// ReportStageLogsResponseMultiError is an error wrapping multiple validation
// errors returned by ReportStageLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportStageLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageLogsResponseMultiError) AllErrors() []error { return m }

// ReportStageLogsResponseValidationError is the validation error returned by
// ReportStageLogsResponse.Validate if the designated constraints aren't met.
type ReportStageLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageLogsResponseValidationError) ErrorName() string {
	return "ReportStageLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageLogsResponseValidationError{}

// Validate checks the field values on ReportStageLogsFromLastCheckpointRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReportStageLogsFromLastCheckpointRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportStageLogsFromLastCheckpointRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ReportStageLogsFromLastCheckpointRequestMultiError, or nil if none found.
func (m *ReportStageLogsFromLastCheckpointRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageLogsFromLastCheckpointRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ReportStageLogsFromLastCheckpointRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := ReportStageLogsFromLastCheckpointRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RetriedCount

	for idx, item := range m.GetBlocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportStageLogsFromLastCheckpointRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportStageLogsFromLastCheckpointRequestValidationError{
						field:  fmt.Sprintf("Blocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportStageLogsFromLastCheckpointRequestValidationError{
					field:  fmt.Sprintf("Blocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Completed

	if len(errors) > 0 {
		return ReportStageLogsFromLastCheckpointRequestMultiError(errors)
	}

	return nil
}

// ReportStageLogsFromLastCheckpointRequestMultiError is an error wrapping
// multiple validation errors returned by
// ReportStageLogsFromLastCheckpointRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportStageLogsFromLastCheckpointRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageLogsFromLastCheckpointRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageLogsFromLastCheckpointRequestMultiError) AllErrors() []error { return m }

// ReportStageLogsFromLastCheckpointRequestValidationError is the validation
// error returned by ReportStageLogsFromLastCheckpointRequest.Validate if the
// designated constraints aren't met.
type ReportStageLogsFromLastCheckpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageLogsFromLastCheckpointRequestValidationError) ErrorName() string {
	return "ReportStageLogsFromLastCheckpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageLogsFromLastCheckpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageLogsFromLastCheckpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageLogsFromLastCheckpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageLogsFromLastCheckpointRequestValidationError{}

// Validate checks the field values on
// ReportStageLogsFromLastCheckpointResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportStageLogsFromLastCheckpointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportStageLogsFromLastCheckpointResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ReportStageLogsFromLastCheckpointResponseMultiError, or nil if none found.
func (m *ReportStageLogsFromLastCheckpointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageLogsFromLastCheckpointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportStageLogsFromLastCheckpointResponseMultiError(errors)
	}

	return nil
}

// ReportStageLogsFromLastCheckpointResponseMultiError is an error wrapping
// multiple validation errors returned by
// ReportStageLogsFromLastCheckpointResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportStageLogsFromLastCheckpointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageLogsFromLastCheckpointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageLogsFromLastCheckpointResponseMultiError) AllErrors() []error { return m }

// ReportStageLogsFromLastCheckpointResponseValidationError is the validation
// error returned by ReportStageLogsFromLastCheckpointResponse.Validate if the
// designated constraints aren't met.
type ReportStageLogsFromLastCheckpointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageLogsFromLastCheckpointResponseValidationError) ErrorName() string {
	return "ReportStageLogsFromLastCheckpointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageLogsFromLastCheckpointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageLogsFromLastCheckpointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageLogsFromLastCheckpointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageLogsFromLastCheckpointResponseValidationError{}

// Validate checks the field values on ReportStageStatusChangedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportStageStatusChangedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStageStatusChangedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportStageStatusChangedRequestMultiError, or nil if none found.
func (m *ReportStageStatusChangedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageStatusChangedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := ReportStageStatusChangedRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStageId()) < 1 {
		err := ReportStageStatusChangedRequestValidationError{
			field:  "StageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.StageStatus_name[int32(m.GetStatus())]; !ok {
		err := ReportStageStatusChangedRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StatusReason

	// no validation rules for Visible

	// no validation rules for RetriedCount

	if m.GetCompletedAt() <= 0 {
		err := ReportStageStatusChangedRequestValidationError{
			field:  "CompletedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportStageStatusChangedRequestMultiError(errors)
	}

	return nil
}

// ReportStageStatusChangedRequestMultiError is an error wrapping multiple
// validation errors returned by ReportStageStatusChangedRequest.ValidateAll()
// if the designated constraints aren't met.
type ReportStageStatusChangedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageStatusChangedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageStatusChangedRequestMultiError) AllErrors() []error { return m }

// ReportStageStatusChangedRequestValidationError is the validation error
// returned by ReportStageStatusChangedRequest.Validate if the designated
// constraints aren't met.
type ReportStageStatusChangedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageStatusChangedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageStatusChangedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageStatusChangedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageStatusChangedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageStatusChangedRequestValidationError) ErrorName() string {
	return "ReportStageStatusChangedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageStatusChangedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageStatusChangedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageStatusChangedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageStatusChangedRequestValidationError{}

// Validate checks the field values on ReportStageStatusChangedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReportStageStatusChangedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportStageStatusChangedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportStageStatusChangedResponseMultiError, or nil if none found.
func (m *ReportStageStatusChangedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportStageStatusChangedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportStageStatusChangedResponseMultiError(errors)
	}

	return nil
}

// ReportStageStatusChangedResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReportStageStatusChangedResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportStageStatusChangedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportStageStatusChangedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportStageStatusChangedResponseMultiError) AllErrors() []error { return m }

// ReportStageStatusChangedResponseValidationError is the validation error
// returned by ReportStageStatusChangedResponse.Validate if the designated
// constraints aren't met.
type ReportStageStatusChangedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportStageStatusChangedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportStageStatusChangedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportStageStatusChangedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportStageStatusChangedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportStageStatusChangedResponseValidationError) ErrorName() string {
	return "ReportStageStatusChangedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportStageStatusChangedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportStageStatusChangedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportStageStatusChangedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportStageStatusChangedResponseValidationError{}

// Validate checks the field values on ListUnhandledCommandsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUnhandledCommandsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnhandledCommandsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUnhandledCommandsRequestMultiError, or nil if none found.
func (m *ListUnhandledCommandsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnhandledCommandsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUnhandledCommandsRequestMultiError(errors)
	}

	return nil
}

// ListUnhandledCommandsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUnhandledCommandsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUnhandledCommandsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnhandledCommandsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnhandledCommandsRequestMultiError) AllErrors() []error { return m }

// ListUnhandledCommandsRequestValidationError is the validation error returned
// by ListUnhandledCommandsRequest.Validate if the designated constraints
// aren't met.
type ListUnhandledCommandsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnhandledCommandsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnhandledCommandsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnhandledCommandsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnhandledCommandsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnhandledCommandsRequestValidationError) ErrorName() string {
	return "ListUnhandledCommandsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnhandledCommandsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnhandledCommandsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnhandledCommandsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnhandledCommandsRequestValidationError{}

// Validate checks the field values on ListUnhandledCommandsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUnhandledCommandsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnhandledCommandsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListUnhandledCommandsResponseMultiError, or nil if none found.
func (m *ListUnhandledCommandsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnhandledCommandsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCommands() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUnhandledCommandsResponseValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUnhandledCommandsResponseValidationError{
						field:  fmt.Sprintf("Commands[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUnhandledCommandsResponseValidationError{
					field:  fmt.Sprintf("Commands[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUnhandledCommandsResponseMultiError(errors)
	}

	return nil
}

// ListUnhandledCommandsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUnhandledCommandsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListUnhandledCommandsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnhandledCommandsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnhandledCommandsResponseMultiError) AllErrors() []error { return m }

// ListUnhandledCommandsResponseValidationError is the validation error
// returned by ListUnhandledCommandsResponse.Validate if the designated
// constraints aren't met.
type ListUnhandledCommandsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnhandledCommandsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnhandledCommandsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnhandledCommandsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnhandledCommandsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnhandledCommandsResponseValidationError) ErrorName() string {
	return "ListUnhandledCommandsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnhandledCommandsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnhandledCommandsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnhandledCommandsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnhandledCommandsResponseValidationError{}

// Validate checks the field values on ReportCommandHandledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCommandHandledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCommandHandledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCommandHandledRequestMultiError, or nil if none found.
func (m *ReportCommandHandledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCommandHandledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCommandId()) < 1 {
		err := ReportCommandHandledRequestValidationError{
			field:  "CommandId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.CommandStatus_name[int32(m.GetStatus())]; !ok {
		err := ReportCommandHandledRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if m.GetHandledAt() <= 0 {
		err := ReportCommandHandledRequestValidationError{
			field:  "HandledAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Output

	if len(errors) > 0 {
		return ReportCommandHandledRequestMultiError(errors)
	}

	return nil
}

// ReportCommandHandledRequestMultiError is an error wrapping multiple
// validation errors returned by ReportCommandHandledRequest.ValidateAll() if
// the designated constraints aren't met.
type ReportCommandHandledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCommandHandledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCommandHandledRequestMultiError) AllErrors() []error { return m }

// ReportCommandHandledRequestValidationError is the validation error returned
// by ReportCommandHandledRequest.Validate if the designated constraints
// aren't met.
type ReportCommandHandledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCommandHandledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCommandHandledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCommandHandledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCommandHandledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCommandHandledRequestValidationError) ErrorName() string {
	return "ReportCommandHandledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCommandHandledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCommandHandledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCommandHandledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCommandHandledRequestValidationError{}

// Validate checks the field values on ReportCommandHandledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportCommandHandledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportCommandHandledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportCommandHandledResponseMultiError, or nil if none found.
func (m *ReportCommandHandledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportCommandHandledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportCommandHandledResponseMultiError(errors)
	}

	return nil
}

// ReportCommandHandledResponseMultiError is an error wrapping multiple
// validation errors returned by ReportCommandHandledResponse.ValidateAll() if
// the designated constraints aren't met.
type ReportCommandHandledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportCommandHandledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportCommandHandledResponseMultiError) AllErrors() []error { return m }

// ReportCommandHandledResponseValidationError is the validation error returned
// by ReportCommandHandledResponse.Validate if the designated constraints
// aren't met.
type ReportCommandHandledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportCommandHandledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportCommandHandledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportCommandHandledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportCommandHandledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportCommandHandledResponseValidationError) ErrorName() string {
	return "ReportCommandHandledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportCommandHandledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportCommandHandledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportCommandHandledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportCommandHandledResponseValidationError{}

// Validate checks the field values on ReportApplicationLiveStateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReportApplicationLiveStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportApplicationLiveStateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReportApplicationLiveStateRequestMultiError, or nil if none found.
func (m *ReportApplicationLiveStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationLiveStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSnapshot() == nil {
		err := ReportApplicationLiveStateRequestValidationError{
			field:  "Snapshot",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportApplicationLiveStateRequestValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportApplicationLiveStateRequestValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportApplicationLiveStateRequestValidationError{
				field:  "Snapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReportApplicationLiveStateRequestMultiError(errors)
	}

	return nil
}

// ReportApplicationLiveStateRequestMultiError is an error wrapping multiple
// validation errors returned by
// ReportApplicationLiveStateRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportApplicationLiveStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationLiveStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationLiveStateRequestMultiError) AllErrors() []error { return m }

// ReportApplicationLiveStateRequestValidationError is the validation error
// returned by ReportApplicationLiveStateRequest.Validate if the designated
// constraints aren't met.
type ReportApplicationLiveStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationLiveStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationLiveStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationLiveStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationLiveStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationLiveStateRequestValidationError) ErrorName() string {
	return "ReportApplicationLiveStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationLiveStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationLiveStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationLiveStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationLiveStateRequestValidationError{}

// Validate checks the field values on ReportApplicationLiveStateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReportApplicationLiveStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportApplicationLiveStateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ReportApplicationLiveStateResponseMultiError, or nil if none found.
func (m *ReportApplicationLiveStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationLiveStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportApplicationLiveStateResponseMultiError(errors)
	}

	return nil
}

// ReportApplicationLiveStateResponseMultiError is an error wrapping multiple
// validation errors returned by
// ReportApplicationLiveStateResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportApplicationLiveStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationLiveStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationLiveStateResponseMultiError) AllErrors() []error { return m }

// ReportApplicationLiveStateResponseValidationError is the validation error
// returned by ReportApplicationLiveStateResponse.Validate if the designated
// constraints aren't met.
type ReportApplicationLiveStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationLiveStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationLiveStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationLiveStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationLiveStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationLiveStateResponseValidationError) ErrorName() string {
	return "ReportApplicationLiveStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationLiveStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationLiveStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationLiveStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationLiveStateResponseValidationError{}

// Validate checks the field values on ReportApplicationLiveStateEventsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReportApplicationLiveStateEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportApplicationLiveStateEventsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ReportApplicationLiveStateEventsRequestMultiError, or nil if none found.
func (m *ReportApplicationLiveStateEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationLiveStateEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKubernetesEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportApplicationLiveStateEventsRequestValidationError{
						field:  fmt.Sprintf("KubernetesEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportApplicationLiveStateEventsRequestValidationError{
						field:  fmt.Sprintf("KubernetesEvents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportApplicationLiveStateEventsRequestValidationError{
					field:  fmt.Sprintf("KubernetesEvents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportApplicationLiveStateEventsRequestMultiError(errors)
	}

	return nil
}

// ReportApplicationLiveStateEventsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ReportApplicationLiveStateEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type ReportApplicationLiveStateEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationLiveStateEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationLiveStateEventsRequestMultiError) AllErrors() []error { return m }

// ReportApplicationLiveStateEventsRequestValidationError is the validation
// error returned by ReportApplicationLiveStateEventsRequest.Validate if the
// designated constraints aren't met.
type ReportApplicationLiveStateEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationLiveStateEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationLiveStateEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationLiveStateEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationLiveStateEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationLiveStateEventsRequestValidationError) ErrorName() string {
	return "ReportApplicationLiveStateEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationLiveStateEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationLiveStateEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationLiveStateEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationLiveStateEventsRequestValidationError{}

// Validate checks the field values on ReportApplicationLiveStateEventsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ReportApplicationLiveStateEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportApplicationLiveStateEventsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ReportApplicationLiveStateEventsResponseMultiError, or nil if none found.
func (m *ReportApplicationLiveStateEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportApplicationLiveStateEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportApplicationLiveStateEventsResponseMultiError(errors)
	}

	return nil
}

// ReportApplicationLiveStateEventsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ReportApplicationLiveStateEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportApplicationLiveStateEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportApplicationLiveStateEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportApplicationLiveStateEventsResponseMultiError) AllErrors() []error { return m }

// ReportApplicationLiveStateEventsResponseValidationError is the validation
// error returned by ReportApplicationLiveStateEventsResponse.Validate if the
// designated constraints aren't met.
type ReportApplicationLiveStateEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportApplicationLiveStateEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportApplicationLiveStateEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportApplicationLiveStateEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportApplicationLiveStateEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportApplicationLiveStateEventsResponseValidationError) ErrorName() string {
	return "ReportApplicationLiveStateEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportApplicationLiveStateEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportApplicationLiveStateEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportApplicationLiveStateEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportApplicationLiveStateEventsResponseValidationError{}

// Validate checks the field values on GetLatestEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLatestEventRequestMultiError, or nil if none found.
func (m *GetLatestEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := GetLatestEventRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Labels

	if len(errors) > 0 {
		return GetLatestEventRequestMultiError(errors)
	}

	return nil
}

// GetLatestEventRequestMultiError is an error wrapping multiple validation
// errors returned by GetLatestEventRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLatestEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestEventRequestMultiError) AllErrors() []error { return m }

// GetLatestEventRequestValidationError is the validation error returned by
// GetLatestEventRequest.Validate if the designated constraints aren't met.
type GetLatestEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestEventRequestValidationError) ErrorName() string {
	return "GetLatestEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestEventRequestValidationError{}

// Validate checks the field values on GetLatestEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLatestEventResponseMultiError, or nil if none found.
func (m *GetLatestEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEvent() == nil {
		err := GetLatestEventResponseValidationError{
			field:  "Event",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLatestEventResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLatestEventResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLatestEventResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLatestEventResponseMultiError(errors)
	}

	return nil
}

// GetLatestEventResponseMultiError is an error wrapping multiple validation
// errors returned by GetLatestEventResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLatestEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestEventResponseMultiError) AllErrors() []error { return m }

// GetLatestEventResponseValidationError is the validation error returned by
// GetLatestEventResponse.Validate if the designated constraints aren't met.
type GetLatestEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestEventResponseValidationError) ErrorName() string {
	return "GetLatestEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestEventResponseValidationError{}

// Validate checks the field values on ListEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsRequestMultiError, or nil if none found.
func (m *ListEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for To

	if _, ok := ListOrder_name[int32(m.GetOrder())]; !ok {
		err := ListEventsRequestValidationError{
			field:  "Order",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := ListEventsRequest_Status_name[int32(m.GetStatus())]; !ok {
		err := ListEventsRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListEventsRequestMultiError(errors)
	}

	return nil
}

// ListEventsRequestMultiError is an error wrapping multiple validation errors
// returned by ListEventsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsRequestMultiError) AllErrors() []error { return m }

// ListEventsRequestValidationError is the validation error returned by
// ListEventsRequest.Validate if the designated constraints aren't met.
type ListEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsRequestValidationError) ErrorName() string {
	return "ListEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsRequestValidationError{}

// Validate checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEventsResponseMultiError, or nil if none found.
func (m *ListEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEventsResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEventsResponseMultiError(errors)
	}

	return nil
}

// ListEventsResponseMultiError is an error wrapping multiple validation errors
// returned by ListEventsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsResponseMultiError) AllErrors() []error { return m }

// ListEventsResponseValidationError is the validation error returned by
// ListEventsResponse.Validate if the designated constraints aren't met.
type ListEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsResponseValidationError) ErrorName() string {
	return "ListEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsResponseValidationError{}

// Validate checks the field values on ReportEventsHandledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportEventsHandledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportEventsHandledRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportEventsHandledRequestMultiError, or nil if none found.
func (m *ReportEventsHandledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportEventsHandledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetEventIds()) < 1 {
		err := ReportEventsHandledRequestValidationError{
			field:  "EventIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportEventsHandledRequestMultiError(errors)
	}

	return nil
}

// ReportEventsHandledRequestMultiError is an error wrapping multiple
// validation errors returned by ReportEventsHandledRequest.ValidateAll() if
// the designated constraints aren't met.
type ReportEventsHandledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportEventsHandledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportEventsHandledRequestMultiError) AllErrors() []error { return m }

// ReportEventsHandledRequestValidationError is the validation error returned
// by ReportEventsHandledRequest.Validate if the designated constraints aren't met.
type ReportEventsHandledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportEventsHandledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportEventsHandledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportEventsHandledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportEventsHandledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportEventsHandledRequestValidationError) ErrorName() string {
	return "ReportEventsHandledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportEventsHandledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportEventsHandledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportEventsHandledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportEventsHandledRequestValidationError{}

// Validate checks the field values on ReportEventsHandledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportEventsHandledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportEventsHandledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportEventsHandledResponseMultiError, or nil if none found.
func (m *ReportEventsHandledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportEventsHandledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportEventsHandledResponseMultiError(errors)
	}

	return nil
}

// ReportEventsHandledResponseMultiError is an error wrapping multiple
// validation errors returned by ReportEventsHandledResponse.ValidateAll() if
// the designated constraints aren't met.
type ReportEventsHandledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportEventsHandledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportEventsHandledResponseMultiError) AllErrors() []error { return m }

// ReportEventsHandledResponseValidationError is the validation error returned
// by ReportEventsHandledResponse.Validate if the designated constraints
// aren't met.
type ReportEventsHandledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportEventsHandledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportEventsHandledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportEventsHandledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportEventsHandledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportEventsHandledResponseValidationError) ErrorName() string {
	return "ReportEventsHandledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportEventsHandledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportEventsHandledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportEventsHandledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportEventsHandledResponseValidationError{}

// Validate checks the field values on ReportEventStatusesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportEventStatusesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportEventStatusesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportEventStatusesRequestMultiError, or nil if none found.
func (m *ReportEventStatusesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportEventStatusesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportEventStatusesRequestValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportEventStatusesRequestValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportEventStatusesRequestValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportEventStatusesRequestMultiError(errors)
	}

	return nil
}

// ReportEventStatusesRequestMultiError is an error wrapping multiple
// validation errors returned by ReportEventStatusesRequest.ValidateAll() if
// the designated constraints aren't met.
type ReportEventStatusesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportEventStatusesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportEventStatusesRequestMultiError) AllErrors() []error { return m }

// ReportEventStatusesRequestValidationError is the validation error returned
// by ReportEventStatusesRequest.Validate if the designated constraints aren't met.
type ReportEventStatusesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportEventStatusesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportEventStatusesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportEventStatusesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportEventStatusesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportEventStatusesRequestValidationError) ErrorName() string {
	return "ReportEventStatusesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportEventStatusesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportEventStatusesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportEventStatusesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportEventStatusesRequestValidationError{}

// Validate checks the field values on ReportEventStatusesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportEventStatusesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportEventStatusesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportEventStatusesResponseMultiError, or nil if none found.
func (m *ReportEventStatusesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportEventStatusesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportEventStatusesResponseMultiError(errors)
	}

	return nil
}

// ReportEventStatusesResponseMultiError is an error wrapping multiple
// validation errors returned by ReportEventStatusesResponse.ValidateAll() if
// the designated constraints aren't met.
type ReportEventStatusesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportEventStatusesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportEventStatusesResponseMultiError) AllErrors() []error { return m }

// ReportEventStatusesResponseValidationError is the validation error returned
// by ReportEventStatusesResponse.Validate if the designated constraints
// aren't met.
type ReportEventStatusesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportEventStatusesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportEventStatusesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportEventStatusesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportEventStatusesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportEventStatusesResponseValidationError) ErrorName() string {
	return "ReportEventStatusesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportEventStatusesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportEventStatusesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportEventStatusesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportEventStatusesResponseValidationError{}

// Validate checks the field values on GetLatestAnalysisResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestAnalysisResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestAnalysisResultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLatestAnalysisResultRequestMultiError, or nil if none found.
func (m *GetLatestAnalysisResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestAnalysisResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := GetLatestAnalysisResultRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLatestAnalysisResultRequestMultiError(errors)
	}

	return nil
}

// GetLatestAnalysisResultRequestMultiError is an error wrapping multiple
// validation errors returned by GetLatestAnalysisResultRequest.ValidateAll()
// if the designated constraints aren't met.
type GetLatestAnalysisResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestAnalysisResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestAnalysisResultRequestMultiError) AllErrors() []error { return m }

// GetLatestAnalysisResultRequestValidationError is the validation error
// returned by GetLatestAnalysisResultRequest.Validate if the designated
// constraints aren't met.
type GetLatestAnalysisResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestAnalysisResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestAnalysisResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestAnalysisResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestAnalysisResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestAnalysisResultRequestValidationError) ErrorName() string {
	return "GetLatestAnalysisResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestAnalysisResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestAnalysisResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestAnalysisResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestAnalysisResultRequestValidationError{}

// Validate checks the field values on GetLatestAnalysisResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLatestAnalysisResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLatestAnalysisResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetLatestAnalysisResultResponseMultiError, or nil if none found.
func (m *GetLatestAnalysisResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLatestAnalysisResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAnalysisResult() == nil {
		err := GetLatestAnalysisResultResponseValidationError{
			field:  "AnalysisResult",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAnalysisResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLatestAnalysisResultResponseValidationError{
					field:  "AnalysisResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLatestAnalysisResultResponseValidationError{
					field:  "AnalysisResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnalysisResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLatestAnalysisResultResponseValidationError{
				field:  "AnalysisResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLatestAnalysisResultResponseMultiError(errors)
	}

	return nil
}

// GetLatestAnalysisResultResponseMultiError is an error wrapping multiple
// validation errors returned by GetLatestAnalysisResultResponse.ValidateAll()
// if the designated constraints aren't met.
type GetLatestAnalysisResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLatestAnalysisResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLatestAnalysisResultResponseMultiError) AllErrors() []error { return m }

// GetLatestAnalysisResultResponseValidationError is the validation error
// returned by GetLatestAnalysisResultResponse.Validate if the designated
// constraints aren't met.
type GetLatestAnalysisResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLatestAnalysisResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLatestAnalysisResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLatestAnalysisResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLatestAnalysisResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLatestAnalysisResultResponseValidationError) ErrorName() string {
	return "GetLatestAnalysisResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLatestAnalysisResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLatestAnalysisResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLatestAnalysisResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLatestAnalysisResultResponseValidationError{}

// Validate checks the field values on PutLatestAnalysisResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutLatestAnalysisResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutLatestAnalysisResultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PutLatestAnalysisResultRequestMultiError, or nil if none found.
func (m *PutLatestAnalysisResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutLatestAnalysisResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetApplicationId()) < 1 {
		err := PutLatestAnalysisResultRequestValidationError{
			field:  "ApplicationId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAnalysisResult() == nil {
		err := PutLatestAnalysisResultRequestValidationError{
			field:  "AnalysisResult",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAnalysisResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutLatestAnalysisResultRequestValidationError{
					field:  "AnalysisResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutLatestAnalysisResultRequestValidationError{
					field:  "AnalysisResult",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAnalysisResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutLatestAnalysisResultRequestValidationError{
				field:  "AnalysisResult",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutLatestAnalysisResultRequestMultiError(errors)
	}

	return nil
}

// PutLatestAnalysisResultRequestMultiError is an error wrapping multiple
// validation errors returned by PutLatestAnalysisResultRequest.ValidateAll()
// if the designated constraints aren't met.
type PutLatestAnalysisResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutLatestAnalysisResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutLatestAnalysisResultRequestMultiError) AllErrors() []error { return m }

// PutLatestAnalysisResultRequestValidationError is the validation error
// returned by PutLatestAnalysisResultRequest.Validate if the designated
// constraints aren't met.
type PutLatestAnalysisResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutLatestAnalysisResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutLatestAnalysisResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutLatestAnalysisResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutLatestAnalysisResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutLatestAnalysisResultRequestValidationError) ErrorName() string {
	return "PutLatestAnalysisResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutLatestAnalysisResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutLatestAnalysisResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutLatestAnalysisResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutLatestAnalysisResultRequestValidationError{}

// Validate checks the field values on PutLatestAnalysisResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutLatestAnalysisResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutLatestAnalysisResultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PutLatestAnalysisResultResponseMultiError, or nil if none found.
func (m *PutLatestAnalysisResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutLatestAnalysisResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutLatestAnalysisResultResponseMultiError(errors)
	}

	return nil
}

// PutLatestAnalysisResultResponseMultiError is an error wrapping multiple
// validation errors returned by PutLatestAnalysisResultResponse.ValidateAll()
// if the designated constraints aren't met.
type PutLatestAnalysisResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutLatestAnalysisResultResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutLatestAnalysisResultResponseMultiError) AllErrors() []error { return m }

// PutLatestAnalysisResultResponseValidationError is the validation error
// returned by PutLatestAnalysisResultResponse.Validate if the designated
// constraints aren't met.
type PutLatestAnalysisResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutLatestAnalysisResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutLatestAnalysisResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutLatestAnalysisResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutLatestAnalysisResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutLatestAnalysisResultResponseValidationError) ErrorName() string {
	return "PutLatestAnalysisResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutLatestAnalysisResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutLatestAnalysisResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutLatestAnalysisResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutLatestAnalysisResultResponseValidationError{}

// Validate checks the field values on GetDesiredVersionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesiredVersionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesiredVersionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesiredVersionRequestMultiError, or nil if none found.
func (m *GetDesiredVersionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredVersionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetDesiredVersionRequestMultiError(errors)
	}

	return nil
}

// GetDesiredVersionRequestMultiError is an error wrapping multiple validation
// errors returned by GetDesiredVersionRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDesiredVersionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredVersionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredVersionRequestMultiError) AllErrors() []error { return m }

// GetDesiredVersionRequestValidationError is the validation error returned by
// GetDesiredVersionRequest.Validate if the designated constraints aren't met.
type GetDesiredVersionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredVersionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredVersionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredVersionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredVersionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredVersionRequestValidationError) ErrorName() string {
	return "GetDesiredVersionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredVersionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredVersionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredVersionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredVersionRequestValidationError{}

// Validate checks the field values on GetDesiredVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDesiredVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDesiredVersionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDesiredVersionResponseMultiError, or nil if none found.
func (m *GetDesiredVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDesiredVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if len(errors) > 0 {
		return GetDesiredVersionResponseMultiError(errors)
	}

	return nil
}

// GetDesiredVersionResponseMultiError is an error wrapping multiple validation
// errors returned by GetDesiredVersionResponse.ValidateAll() if the
// designated constraints aren't met.
type GetDesiredVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDesiredVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDesiredVersionResponseMultiError) AllErrors() []error { return m }

// GetDesiredVersionResponseValidationError is the validation error returned by
// GetDesiredVersionResponse.Validate if the designated constraints aren't met.
type GetDesiredVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDesiredVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDesiredVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDesiredVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDesiredVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDesiredVersionResponseValidationError) ErrorName() string {
	return "GetDesiredVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDesiredVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDesiredVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDesiredVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDesiredVersionResponseValidationError{}

// Validate checks the field values on UpdateApplicationConfigurationsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateApplicationConfigurationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateApplicationConfigurationsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateApplicationConfigurationsRequestMultiError, or nil if none found.
func (m *UpdateApplicationConfigurationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationConfigurationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateApplicationConfigurationsRequestValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateApplicationConfigurationsRequestValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateApplicationConfigurationsRequestValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateApplicationConfigurationsRequestMultiError(errors)
	}

	return nil
}

// UpdateApplicationConfigurationsRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateApplicationConfigurationsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationConfigurationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationConfigurationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationConfigurationsRequestMultiError) AllErrors() []error { return m }

// UpdateApplicationConfigurationsRequestValidationError is the validation
// error returned by UpdateApplicationConfigurationsRequest.Validate if the
// designated constraints aren't met.
type UpdateApplicationConfigurationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationConfigurationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationConfigurationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationConfigurationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationConfigurationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationConfigurationsRequestValidationError) ErrorName() string {
	return "UpdateApplicationConfigurationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationConfigurationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationConfigurationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationConfigurationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationConfigurationsRequestValidationError{}

// Validate checks the field values on UpdateApplicationConfigurationsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateApplicationConfigurationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateApplicationConfigurationsResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateApplicationConfigurationsResponseMultiError, or nil if none found.
func (m *UpdateApplicationConfigurationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateApplicationConfigurationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateApplicationConfigurationsResponseMultiError(errors)
	}

	return nil
}

// UpdateApplicationConfigurationsResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateApplicationConfigurationsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateApplicationConfigurationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateApplicationConfigurationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateApplicationConfigurationsResponseMultiError) AllErrors() []error { return m }

// UpdateApplicationConfigurationsResponseValidationError is the validation
// error returned by UpdateApplicationConfigurationsResponse.Validate if the
// designated constraints aren't met.
type UpdateApplicationConfigurationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateApplicationConfigurationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateApplicationConfigurationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateApplicationConfigurationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateApplicationConfigurationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateApplicationConfigurationsResponseValidationError) ErrorName() string {
	return "UpdateApplicationConfigurationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateApplicationConfigurationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateApplicationConfigurationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateApplicationConfigurationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateApplicationConfigurationsResponseValidationError{}

// Validate checks the field values on
// ReportUnregisteredApplicationConfigurationsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReportUnregisteredApplicationConfigurationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportUnregisteredApplicationConfigurationsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ReportUnregisteredApplicationConfigurationsRequestMultiError, or nil if
// none found.
func (m *ReportUnregisteredApplicationConfigurationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportUnregisteredApplicationConfigurationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReportUnregisteredApplicationConfigurationsRequestValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReportUnregisteredApplicationConfigurationsRequestValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReportUnregisteredApplicationConfigurationsRequestValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReportUnregisteredApplicationConfigurationsRequestMultiError(errors)
	}

	return nil
}

// ReportUnregisteredApplicationConfigurationsRequestMultiError is an error
// wrapping multiple validation errors returned by
// ReportUnregisteredApplicationConfigurationsRequest.ValidateAll() if the
// designated constraints aren't met.
type ReportUnregisteredApplicationConfigurationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportUnregisteredApplicationConfigurationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportUnregisteredApplicationConfigurationsRequestMultiError) AllErrors() []error { return m }

// ReportUnregisteredApplicationConfigurationsRequestValidationError is the
// validation error returned by
// ReportUnregisteredApplicationConfigurationsRequest.Validate if the
// designated constraints aren't met.
type ReportUnregisteredApplicationConfigurationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportUnregisteredApplicationConfigurationsRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ReportUnregisteredApplicationConfigurationsRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ReportUnregisteredApplicationConfigurationsRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ReportUnregisteredApplicationConfigurationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportUnregisteredApplicationConfigurationsRequestValidationError) ErrorName() string {
	return "ReportUnregisteredApplicationConfigurationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReportUnregisteredApplicationConfigurationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportUnregisteredApplicationConfigurationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportUnregisteredApplicationConfigurationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportUnregisteredApplicationConfigurationsRequestValidationError{}

// Validate checks the field values on
// ReportUnregisteredApplicationConfigurationsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReportUnregisteredApplicationConfigurationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ReportUnregisteredApplicationConfigurationsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ReportUnregisteredApplicationConfigurationsResponseMultiError, or nil if
// none found.
func (m *ReportUnregisteredApplicationConfigurationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportUnregisteredApplicationConfigurationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportUnregisteredApplicationConfigurationsResponseMultiError(errors)
	}

	return nil
}

// ReportUnregisteredApplicationConfigurationsResponseMultiError is an error
// wrapping multiple validation errors returned by
// ReportUnregisteredApplicationConfigurationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ReportUnregisteredApplicationConfigurationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportUnregisteredApplicationConfigurationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportUnregisteredApplicationConfigurationsResponseMultiError) AllErrors() []error { return m }

// ReportUnregisteredApplicationConfigurationsResponseValidationError is the
// validation error returned by
// ReportUnregisteredApplicationConfigurationsResponse.Validate if the
// designated constraints aren't met.
type ReportUnregisteredApplicationConfigurationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportUnregisteredApplicationConfigurationsResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ReportUnregisteredApplicationConfigurationsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ReportUnregisteredApplicationConfigurationsResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ReportUnregisteredApplicationConfigurationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportUnregisteredApplicationConfigurationsResponseValidationError) ErrorName() string {
	return "ReportUnregisteredApplicationConfigurationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportUnregisteredApplicationConfigurationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportUnregisteredApplicationConfigurationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportUnregisteredApplicationConfigurationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportUnregisteredApplicationConfigurationsResponseValidationError{}

// Validate checks the field values on CreateDeploymentChainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentChainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentChainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDeploymentChainRequestMultiError, or nil if none found.
func (m *CreateDeploymentChainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentChainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFirstDeployment() == nil {
		err := CreateDeploymentChainRequestValidationError{
			field:  "FirstDeployment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetFirstDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDeploymentChainRequestValidationError{
					field:  "FirstDeployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDeploymentChainRequestValidationError{
					field:  "FirstDeployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirstDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDeploymentChainRequestValidationError{
				field:  "FirstDeployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMatchers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDeploymentChainRequestValidationError{
						field:  fmt.Sprintf("Matchers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDeploymentChainRequestValidationError{
						field:  fmt.Sprintf("Matchers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDeploymentChainRequestValidationError{
					field:  fmt.Sprintf("Matchers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDeploymentChainRequestMultiError(errors)
	}

	return nil
}

// CreateDeploymentChainRequestMultiError is an error wrapping multiple
// validation errors returned by CreateDeploymentChainRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateDeploymentChainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentChainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentChainRequestMultiError) AllErrors() []error { return m }

// CreateDeploymentChainRequestValidationError is the validation error returned
// by CreateDeploymentChainRequest.Validate if the designated constraints
// aren't met.
type CreateDeploymentChainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentChainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentChainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentChainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentChainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentChainRequestValidationError) ErrorName() string {
	return "CreateDeploymentChainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentChainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentChainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentChainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentChainRequestValidationError{}

// Validate checks the field values on CreateDeploymentChainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentChainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDeploymentChainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateDeploymentChainResponseMultiError, or nil if none found.
func (m *CreateDeploymentChainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentChainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateDeploymentChainResponseMultiError(errors)
	}

	return nil
}

// CreateDeploymentChainResponseMultiError is an error wrapping multiple
// validation errors returned by CreateDeploymentChainResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateDeploymentChainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentChainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentChainResponseMultiError) AllErrors() []error { return m }

// CreateDeploymentChainResponseValidationError is the validation error
// returned by CreateDeploymentChainResponse.Validate if the designated
// constraints aren't met.
type CreateDeploymentChainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentChainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentChainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentChainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentChainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentChainResponseValidationError) ErrorName() string {
	return "CreateDeploymentChainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentChainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentChainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentChainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentChainResponseValidationError{}

// Validate checks the field values on InChainDeploymentPlannableRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InChainDeploymentPlannableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InChainDeploymentPlannableRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InChainDeploymentPlannableRequestMultiError, or nil if none found.
func (m *InChainDeploymentPlannableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InChainDeploymentPlannableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDeploymentId()) < 1 {
		err := InChainDeploymentPlannableRequestValidationError{
			field:  "DeploymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDeploymentChainId()) < 1 {
		err := InChainDeploymentPlannableRequestValidationError{
			field:  "DeploymentChainId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DeploymentChainBlockIndex

	if len(errors) > 0 {
		return InChainDeploymentPlannableRequestMultiError(errors)
	}

	return nil
}

// InChainDeploymentPlannableRequestMultiError is an error wrapping multiple
// validation errors returned by
// InChainDeploymentPlannableRequest.ValidateAll() if the designated
// constraints aren't met.
type InChainDeploymentPlannableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InChainDeploymentPlannableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InChainDeploymentPlannableRequestMultiError) AllErrors() []error { return m }

// InChainDeploymentPlannableRequestValidationError is the validation error
// returned by InChainDeploymentPlannableRequest.Validate if the designated
// constraints aren't met.
type InChainDeploymentPlannableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InChainDeploymentPlannableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InChainDeploymentPlannableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InChainDeploymentPlannableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InChainDeploymentPlannableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InChainDeploymentPlannableRequestValidationError) ErrorName() string {
	return "InChainDeploymentPlannableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InChainDeploymentPlannableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInChainDeploymentPlannableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InChainDeploymentPlannableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InChainDeploymentPlannableRequestValidationError{}

// Validate checks the field values on InChainDeploymentPlannableResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *InChainDeploymentPlannableResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InChainDeploymentPlannableResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// InChainDeploymentPlannableResponseMultiError, or nil if none found.
func (m *InChainDeploymentPlannableResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InChainDeploymentPlannableResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Plannable

	// no validation rules for Cancel

	// no validation rules for CancelReason

	if len(errors) > 0 {
		return InChainDeploymentPlannableResponseMultiError(errors)
	}

	return nil
}

// InChainDeploymentPlannableResponseMultiError is an error wrapping multiple
// validation errors returned by
// InChainDeploymentPlannableResponse.ValidateAll() if the designated
// constraints aren't met.
type InChainDeploymentPlannableResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InChainDeploymentPlannableResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InChainDeploymentPlannableResponseMultiError) AllErrors() []error { return m }

// InChainDeploymentPlannableResponseValidationError is the validation error
// returned by InChainDeploymentPlannableResponse.Validate if the designated
// constraints aren't met.
type InChainDeploymentPlannableResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InChainDeploymentPlannableResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InChainDeploymentPlannableResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InChainDeploymentPlannableResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InChainDeploymentPlannableResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InChainDeploymentPlannableResponseValidationError) ErrorName() string {
	return "InChainDeploymentPlannableResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InChainDeploymentPlannableResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInChainDeploymentPlannableResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InChainDeploymentPlannableResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InChainDeploymentPlannableResponseValidationError{}

// Validate checks the field values on ReportEventStatusesRequest_Event with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ReportEventStatusesRequest_Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportEventStatusesRequest_Event with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReportEventStatusesRequest_EventMultiError, or nil if none found.
func (m *ReportEventStatusesRequest_Event) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportEventStatusesRequest_Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ReportEventStatusesRequest_EventValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := model.EventStatus_name[int32(m.GetStatus())]; !ok {
		err := ReportEventStatusesRequest_EventValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatusDescription()) < 1 {
		err := ReportEventStatusesRequest_EventValidationError{
			field:  "StatusDescription",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportEventStatusesRequest_EventMultiError(errors)
	}

	return nil
}

// ReportEventStatusesRequest_EventMultiError is an error wrapping multiple
// validation errors returned by
// ReportEventStatusesRequest_Event.ValidateAll() if the designated
// constraints aren't met.
type ReportEventStatusesRequest_EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportEventStatusesRequest_EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportEventStatusesRequest_EventMultiError) AllErrors() []error { return m }

// ReportEventStatusesRequest_EventValidationError is the validation error
// returned by ReportEventStatusesRequest_Event.Validate if the designated
// constraints aren't met.
type ReportEventStatusesRequest_EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportEventStatusesRequest_EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportEventStatusesRequest_EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportEventStatusesRequest_EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportEventStatusesRequest_EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportEventStatusesRequest_EventValidationError) ErrorName() string {
	return "ReportEventStatusesRequest_EventValidationError"
}

// Error satisfies the builtin error interface
func (e ReportEventStatusesRequest_EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportEventStatusesRequest_Event.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportEventStatusesRequest_EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportEventStatusesRequest_EventValidationError{}

// Validate checks the field values on
// CreateDeploymentChainRequest_ApplicationMatcher with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDeploymentChainRequest_ApplicationMatcher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateDeploymentChainRequest_ApplicationMatcher with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreateDeploymentChainRequest_ApplicationMatcherMultiError, or nil if none found.
func (m *CreateDeploymentChainRequest_ApplicationMatcher) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDeploymentChainRequest_ApplicationMatcher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Kind

	// no validation rules for Labels

	if len(errors) > 0 {
		return CreateDeploymentChainRequest_ApplicationMatcherMultiError(errors)
	}

	return nil
}

// CreateDeploymentChainRequest_ApplicationMatcherMultiError is an error
// wrapping multiple validation errors returned by
// CreateDeploymentChainRequest_ApplicationMatcher.ValidateAll() if the
// designated constraints aren't met.
type CreateDeploymentChainRequest_ApplicationMatcherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDeploymentChainRequest_ApplicationMatcherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDeploymentChainRequest_ApplicationMatcherMultiError) AllErrors() []error { return m }

// CreateDeploymentChainRequest_ApplicationMatcherValidationError is the
// validation error returned by
// CreateDeploymentChainRequest_ApplicationMatcher.Validate if the designated
// constraints aren't met.
type CreateDeploymentChainRequest_ApplicationMatcherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentChainRequest_ApplicationMatcherValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreateDeploymentChainRequest_ApplicationMatcherValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreateDeploymentChainRequest_ApplicationMatcherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentChainRequest_ApplicationMatcherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentChainRequest_ApplicationMatcherValidationError) ErrorName() string {
	return "CreateDeploymentChainRequest_ApplicationMatcherValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentChainRequest_ApplicationMatcherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentChainRequest_ApplicationMatcher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentChainRequest_ApplicationMatcherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentChainRequest_ApplicationMatcherValidationError{}
