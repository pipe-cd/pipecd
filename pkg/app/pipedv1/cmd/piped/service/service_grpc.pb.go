// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: pkg/app/pipedv1/cmd/piped/service/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	// ListStageCommands returns the list requested commands to the given stage.
	ListStageCommands(ctx context.Context, in *ListStageCommandsRequest, opts ...grpc.CallOption) (*ListStageCommandsResponse, error)
	// Put and Get the latest analysis result of a given application.
	// Used by the analysis plugin to store and retrieve the latest analysis result.
	GetLatestAnalysisResult(ctx context.Context, in *GetLatestAnalysisResultRequest, opts ...grpc.CallOption) (*GetLatestAnalysisResultResponse, error)
	PutLatestAnalysisResult(ctx context.Context, in *PutLatestAnalysisResultRequest, opts ...grpc.CallOption) (*PutLatestAnalysisResultResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) ListStageCommands(ctx context.Context, in *ListStageCommandsRequest, opts ...grpc.CallOption) (*ListStageCommandsResponse, error) {
	out := new(ListStageCommandsResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/ListStageCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetLatestAnalysisResult(ctx context.Context, in *GetLatestAnalysisResultRequest, opts ...grpc.CallOption) (*GetLatestAnalysisResultResponse, error) {
	out := new(GetLatestAnalysisResultResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/GetLatestAnalysisResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) PutLatestAnalysisResult(ctx context.Context, in *PutLatestAnalysisResultRequest, opts ...grpc.CallOption) (*PutLatestAnalysisResultResponse, error) {
	out := new(PutLatestAnalysisResultResponse)
	err := c.cc.Invoke(ctx, "/grpc.piped.service.PluginService/PutLatestAnalysisResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility
type PluginServiceServer interface {
	// ListStageCommands returns the list requested commands to the given stage.
	ListStageCommands(context.Context, *ListStageCommandsRequest) (*ListStageCommandsResponse, error)
	// Put and Get the latest analysis result of a given application.
	// Used by the analysis plugin to store and retrieve the latest analysis result.
	GetLatestAnalysisResult(context.Context, *GetLatestAnalysisResultRequest) (*GetLatestAnalysisResultResponse, error)
	PutLatestAnalysisResult(context.Context, *PutLatestAnalysisResultRequest) (*PutLatestAnalysisResultResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServiceServer struct {
}

func (UnimplementedPluginServiceServer) ListStageCommands(context.Context, *ListStageCommandsRequest) (*ListStageCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStageCommands not implemented")
}
func (UnimplementedPluginServiceServer) GetLatestAnalysisResult(context.Context, *GetLatestAnalysisResultRequest) (*GetLatestAnalysisResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestAnalysisResult not implemented")
}
func (UnimplementedPluginServiceServer) PutLatestAnalysisResult(context.Context, *PutLatestAnalysisResultRequest) (*PutLatestAnalysisResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutLatestAnalysisResult not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_ListStageCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStageCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ListStageCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/ListStageCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ListStageCommands(ctx, req.(*ListStageCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetLatestAnalysisResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestAnalysisResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetLatestAnalysisResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/GetLatestAnalysisResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetLatestAnalysisResult(ctx, req.(*GetLatestAnalysisResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_PutLatestAnalysisResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutLatestAnalysisResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).PutLatestAnalysisResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.piped.service.PluginService/PutLatestAnalysisResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).PutLatestAnalysisResult(ctx, req.(*PutLatestAnalysisResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.piped.service.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStageCommands",
			Handler:    _PluginService_ListStageCommands_Handler,
		},
		{
			MethodName: "GetLatestAnalysisResult",
			Handler:    _PluginService_GetLatestAnalysisResult_Handler,
		},
		{
			MethodName: "PutLatestAnalysisResult",
			Handler:    _PluginService_PutLatestAnalysisResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/app/pipedv1/cmd/piped/service/service.proto",
}
