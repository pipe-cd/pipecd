// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/pipe-cd/pipecd/pkg/app/pipedv1/platformprovider/kubernetes (interfaces: Applier,Loader)

// Package kubernetestest is a generated GoMock package.
package kubernetestest

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubernetes "github.com/pipe-cd/pipecd/pkg/app/pipedv1/platformprovider/kubernetes"
)

// MockApplier is a mock of Applier interface.
type MockApplier struct {
	ctrl     *gomock.Controller
	recorder *MockApplierMockRecorder
}

// MockApplierMockRecorder is the mock recorder for MockApplier.
type MockApplierMockRecorder struct {
	mock *MockApplier
}

// NewMockApplier creates a new mock instance.
func NewMockApplier(ctrl *gomock.Controller) *MockApplier {
	mock := &MockApplier{ctrl: ctrl}
	mock.recorder = &MockApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplier) EXPECT() *MockApplierMockRecorder {
	return m.recorder
}

// ApplyManifest mocks base method.
func (m *MockApplier) ApplyManifest(arg0 context.Context, arg1 kubernetes.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyManifest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyManifest indicates an expected call of ApplyManifest.
func (mr *MockApplierMockRecorder) ApplyManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyManifest", reflect.TypeOf((*MockApplier)(nil).ApplyManifest), arg0, arg1)
}

// CreateManifest mocks base method.
func (m *MockApplier) CreateManifest(arg0 context.Context, arg1 kubernetes.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManifest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateManifest indicates an expected call of CreateManifest.
func (mr *MockApplierMockRecorder) CreateManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManifest", reflect.TypeOf((*MockApplier)(nil).CreateManifest), arg0, arg1)
}

// Delete mocks base method.
func (m *MockApplier) Delete(arg0 context.Context, arg1 kubernetes.ResourceKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockApplierMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApplier)(nil).Delete), arg0, arg1)
}

// ReplaceManifest mocks base method.
func (m *MockApplier) ReplaceManifest(arg0 context.Context, arg1 kubernetes.Manifest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceManifest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceManifest indicates an expected call of ReplaceManifest.
func (mr *MockApplierMockRecorder) ReplaceManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceManifest", reflect.TypeOf((*MockApplier)(nil).ReplaceManifest), arg0, arg1)
}

// MockLoader is a mock of Loader interface.
type MockLoader struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder struct {
	mock *MockLoader
}

// NewMockLoader creates a new mock instance.
func NewMockLoader(ctrl *gomock.Controller) *MockLoader {
	mock := &MockLoader{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader) EXPECT() *MockLoaderMockRecorder {
	return m.recorder
}

// LoadManifests mocks base method.
func (m *MockLoader) LoadManifests(arg0 context.Context) ([]kubernetes.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadManifests", arg0)
	ret0, _ := ret[0].([]kubernetes.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadManifests indicates an expected call of LoadManifests.
func (mr *MockLoaderMockRecorder) LoadManifests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadManifests", reflect.TypeOf((*MockLoader)(nil).LoadManifests), arg0)
}
