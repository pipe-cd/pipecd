// Copyright 2023 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package initialize

import (
	"bytes"
	"testing"

	"github.com/goccy/go-yaml"
	"github.com/pipe-cd/pipecd/pkg/config"
	"github.com/stretchr/testify/assert"
)

func TestGenerateKubernetesConfig(t *testing.T) {
	testcases := []struct {
		name        string
		inputs      []string // mock for user's input
		expectedCfg genericConfig
		expectedErr error
	}{
		{
			name: "valid config for KubernetesApp",
			inputs: []string{
				"myApp",
			},
			expectedCfg: genericConfig{
				Kind:       config.KindKubernetesApp,
				APIVersion: config.VersionV1Beta1,
				ApplicationSpec: &genericKubernetesApplicationSpec{
					Name:        "myApp",
					Input:       config.KubernetesDeploymentInput{},
					Description: "Generated by `pipectl init`. See https://pipecd.dev/docs/user-guide/configuration-reference/ for more.",
				},
			},
			expectedErr: nil,
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			// Mock user's input.
			in := bytes.NewBufferString("")
			for _, word := range tc.inputs {
				in.WriteString(word + "\n")
			}

			cfg, err := generateKubernetesConfig(in)

			assert.Equal(t, tc.expectedErr, err)
			assert.Equal(t, tc.expectedCfg, *cfg)

			// Check if the config is compatible with the original config.
			yml, err := yaml.Marshal(cfg)
			assert.NoError(t, err)
			// If the config is not compatible, then decoding will fail.
			_, err = config.DecodeYAML(yml)
			assert.NoError(t, err)
		})
	}
}
