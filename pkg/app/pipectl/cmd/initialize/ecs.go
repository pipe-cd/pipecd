// Copyright 2023 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package initialize

import (
	"fmt"

	"github.com/pipe-cd/pipecd/pkg/config"
)

type genericECSApplicationSpec struct {
	Name        string                    `yaml:"name"`
	Input       genericECSDeploymentInput `yaml:"input"`
	Description string                    `yaml:"description,omitempty"`
}

// genericECSDeploymentInput represents an generic input for config.ECSDeploymentInput.
type genericECSDeploymentInput struct {
	ServiceDefinitionFile string                 `yaml:"serviceDefinitionFile"`
	TaskDefinitionFile    string                 `yaml:"taskDefinitionFile"`
	TargetGroups          genericECSTargetGroups `yaml:"targetGroups,omitempty"`
}

type genericECSTargetGroups struct {
	Primary genericECSTargetGroup `yaml:"primary,omitempty"`
	Canary  genericECSTargetGroup `yaml:"canary,omitempty"`
}

type genericECSTargetGroup struct {
	TargetGroupArn string `yaml:"targetGroupArn"`
	ContainerName  string `yaml:"containerName"`
	ContainerPort  int    `yaml:"containerPort"`
}

func generateECSConfig() (*genericConfig, error) {
	spec, e := generateECSSpec()
	if e != nil {
		return nil, e
	}
	return &genericConfig{
		Kind:            config.KindECSApp,
		APIVersion:      config.VersionV1Beta1,
		ApplicationSpec: spec,
	}, nil
}

func generateECSSpec() (*genericECSApplicationSpec, error) {

	appName := promptStringRequired("Name of the application: ")
	serviceDefFile := promptStringRequired("Name of the service definition file (e.g. serviceDef.yaml): ")
	taskDefFile := promptStringRequired("Name of the task definition file (e.g. taskDef.yaml): ")

	// target gruops
	targetGroupArn := promptString("ARN of the target group to the service: ")
	containerName := promptString("Name of the container of the target group: ")
	containerPort, e := promptInt("Port of the container of the target group (int): ")
	if e != nil {
		fmt.Printf("Invalid input for containerPort(int): %v\n", e)
		return nil, e
	}

	cfg := &genericECSApplicationSpec{
		Name: appName,
		Input: genericECSDeploymentInput{
			ServiceDefinitionFile: serviceDefFile,
			TaskDefinitionFile:    taskDefFile,
			TargetGroups: genericECSTargetGroups{
				Primary: genericECSTargetGroup{
					TargetGroupArn: targetGroupArn,
					ContainerName:  containerName,
					ContainerPort:  containerPort,
				},
			},
		},
		Description: "Generated by `pipectl init`. See https://pipecd.dev/docs/user-guide/configuration-reference/ for more.",
	}

	return cfg, nil
}

// Other than QuickSync
// func createPipeline() config.DeploymentPipeline {
// 	panic("not implemented")
// }
