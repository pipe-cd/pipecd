// Copyright 2023 The PipeCD Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package initialize

import (
	"fmt"

	"github.com/pipe-cd/pipecd/pkg/app/pipectl/prompt"
	"github.com/pipe-cd/pipecd/pkg/config"
)

// Use genericConfigs in order to simplify using the GenericApplicationSpec and keep the order as we want.
type genericECSApplicationSpec struct {
	Name        string                    `json:"name"`
	Input       config.ECSDeploymentInput `json:"input"`
	Description string                    `json:"description,omitempty"`
}

func generateECSConfig(reader prompt.Reader) (*genericConfig, error) {
	spec, e := generateECSSpec(reader)
	if e != nil {
		return nil, e
	}

	return &genericConfig{
		Kind:            config.KindECSApp,
		APIVersion:      config.VersionV1Beta1,
		ApplicationSpec: spec,
	}, nil
}

func generateECSSpec(reader prompt.Reader) (*genericECSApplicationSpec, error) {
	appName, e := reader.ReadStringRequired("Name of the application: ")
	if e != nil {
		return nil, fmt.Errorf("invalid input for application name(string): %v", e)
	}
	serviceDefFile, e := reader.ReadStringRequired("Name of the service definition file (e.g. serviceDef.yaml): ")
	if e != nil {
		return nil, fmt.Errorf("invalid input for service definition file(string): %v", e)
	}

	taskDefFile, e := reader.ReadStringRequired("Name of the task definition file (e.g. taskDef.yaml): ")
	if e != nil {
		return nil, fmt.Errorf("invalid input for task definition file(string): %v", e)
	}

	// target groups
	targetGroupArn, e := reader.ReadString("ARN of the target group to the service: ")
	if e != nil {
		return nil, fmt.Errorf("invalid input for targetGroupArn(string): %v", e)
	}
	containerName, e := reader.ReadString("Name of the container of the target group: ")
	if e != nil {
		return nil, fmt.Errorf("invalid input for containerName(string): %v", e)
	}
	containerPort, e := reader.ReadInt("Port of the container of the target group [int]: ")
	if e != nil {
		return nil, fmt.Errorf("invalid input for containerPort(int): %v", e)
	}

	cfg := &genericECSApplicationSpec{
		Name: appName,
		Input: config.ECSDeploymentInput{
			ServiceDefinitionFile: serviceDefFile,
			TaskDefinitionFile:    taskDefFile,
			TargetGroups: config.ECSTargetGroups{
				Primary: &config.ECSTargetGroup{
					TargetGroupArn: targetGroupArn,
					ContainerName:  containerName,
					ContainerPort:  containerPort,
				},
			},
		},
		Description: "Generated by `pipectl init`. See https://pipecd.dev/docs/user-guide/configuration-reference/ for more.",
	}

	return cfg, nil
}
