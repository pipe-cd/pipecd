// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/app/ops/handler/handler.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datastore "github.com/pipe-cd/pipecd/pkg/datastore"
	model "github.com/pipe-cd/pipecd/pkg/model"
)

// MockprojectStore is a mock of projectStore interface.
type MockprojectStore struct {
	ctrl     *gomock.Controller
	recorder *MockprojectStoreMockRecorder
}

// MockprojectStoreMockRecorder is the mock recorder for MockprojectStore.
type MockprojectStoreMockRecorder struct {
	mock *MockprojectStore
}

// NewMockprojectStore creates a new mock instance.
func NewMockprojectStore(ctrl *gomock.Controller) *MockprojectStore {
	mock := &MockprojectStore{ctrl: ctrl}
	mock.recorder = &MockprojectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprojectStore) EXPECT() *MockprojectStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockprojectStore) Add(ctx context.Context, proj *model.Project) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, proj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockprojectStoreMockRecorder) Add(ctx, proj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockprojectStore)(nil).Add), ctx, proj)
}

// Get mocks base method.
func (m *MockprojectStore) Get(ctx context.Context, id string) (*model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockprojectStoreMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockprojectStore)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockprojectStore) List(ctx context.Context, opts datastore.ListOptions) ([]model.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, opts)
	ret0, _ := ret[0].([]model.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockprojectStoreMockRecorder) List(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockprojectStore)(nil).List), ctx, opts)
}

// UpdateProjectStaticAdmin mocks base method.
func (m *MockprojectStore) UpdateProjectStaticAdmin(ctx context.Context, id, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectStaticAdmin", ctx, id, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectStaticAdmin indicates an expected call of UpdateProjectStaticAdmin.
func (mr *MockprojectStoreMockRecorder) UpdateProjectStaticAdmin(ctx, id, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectStaticAdmin", reflect.TypeOf((*MockprojectStore)(nil).UpdateProjectStaticAdmin), ctx, id, username, password)
}